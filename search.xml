<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title>Hello World</title>
      <link href="//2018/hello-world.html"/>
      <url>//2018/hello-world.html</url>
      <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can <u>find</u> the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
      
      
    </entry>
    
    <entry>
      <title>Next默认目录结构</title>
      <link href="//2018/Next%E9%BB%98%E8%AE%A4%E7%9B%AE%E5%BD%95%E7%BB%93%E6%9E%84.html"/>
      <url>//2018/Next%E9%BB%98%E8%AE%A4%E7%9B%AE%E5%BD%95%E7%BB%93%E6%9E%84.html</url>
      <content type="html"><![CDATA[<h2 id="Next默认目录结构"><a href="#Next默认目录结构" class="headerlink" title="Next默认目录结构"></a>Next默认目录结构</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">.</span><br><span class="line">├── .deploy</span><br><span class="line">├── public</span><br><span class="line">├── scaffolds</span><br><span class="line">├── scripts</span><br><span class="line">├── source</span><br><span class="line">|   ├── _drafts</span><br><span class="line">|   └── _posts</span><br><span class="line">├── themes</span><br><span class="line">├── _config.yml</span><br><span class="line">└── package.json</span><br></pre></td></tr></table></figure><ul><li>deploy：执行hexo deploy命令部署到GitHub上的内容目录</li><li>public：执行hexo generate命令，输出的静态网页内容目录</li><li>scaffolds：layout模板文件目录，其中的md文件可以添加编辑</li><li>scripts：扩展脚本目录，这里可以自定义一些javascript脚本</li><li>source：文章源码目录，该目录下的markdown和html文件均会被hexo处理。该页面对应repo的根目录，404文件、favicon.ico文件，CNAME文件等都应该放这里，该目录下可新建页面目录。 <ul><li>drafts：草稿文章</li><li>posts：发布文章</li></ul></li><li>themes：主题文件目录</li><li>_config.yml：全局配置文件，大多数的设置都在这里</li><li>package.json：应用程序数据，指明hexo的版本等信息，类似于一般软件中的关于按钮</li></ul><p>然后我们需要修改样式的话是需要设置css和甚至是修改模板， 页面展现的全部逻辑都在每个主题中控制<br><a id="more"></a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">├── .github            #git信息</span><br><span class="line">├── languages          #多语言</span><br><span class="line">|   ├── default.yml    #默认语言</span><br><span class="line">|   └── zh-Hans.yml      #简体中文</span><br><span class="line">|   └── zh-tw.yml      #繁体中文</span><br><span class="line">├── layout             #布局，根目录下的*.ejs文件是对主页，分页，存档等的控制</span><br><span class="line">|   ├── _custom        #可以自己修改的模板，覆盖原有模板</span><br><span class="line">|   |   ├── _header.swig    #头部样式</span><br><span class="line">|   |   ├── _sidebar.swig   #侧边栏样式</span><br><span class="line">|   ├── _macro        #可以自己修改的模板，覆盖原有模板</span><br><span class="line">|   |   ├── post.swig    #文章模板</span><br><span class="line">|   |   ├── reward.swig    #打赏模板</span><br><span class="line">|   |   ├── sidebar.swig   #侧边栏模板</span><br><span class="line">|   ├── _partial       #局部的布局</span><br><span class="line">|   |   ├── head       #头部模板</span><br><span class="line">|   |   ├── search     #搜索模板</span><br><span class="line">|   |   ├── share      #分享模板</span><br><span class="line">|   ├── _script        #局部的布局</span><br><span class="line">|   ├── _third-party   #第三方模板</span><br><span class="line">|   ├── _layout.swig   #主页面模板</span><br><span class="line">|   ├── index.swig     #主页面模板</span><br><span class="line">|   ├── page           #页面模板</span><br><span class="line">|   └── tag.swig       #tag模板</span><br><span class="line">├── scripts            #script源码</span><br><span class="line">|   ├── tags           #tags的script源码</span><br><span class="line">|   ├── marge.js       #页面模板</span><br><span class="line">├── source             #源码</span><br><span class="line">|   ├── css            #css源码</span><br><span class="line">|   |   ├── _common    #*.styl基础css</span><br><span class="line">|   |   ├── _custom    #*.styl局部css</span><br><span class="line">|   |   └── _mixins    #mixins的css</span><br><span class="line">|   ├── fonts          #字体</span><br><span class="line">|   ├── images         #图片</span><br><span class="line">|   ├── uploads        #添加的文件</span><br><span class="line">|   └── js             #javascript源代码</span><br><span class="line">├── _config.yml        #主题配置文件</span><br><span class="line">└── README.md          #用GitHub的都知道</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> Next </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Next </tag>
            
            <tag> 结构 </tag>
            
            <tag> 目录 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>诏安印象</title>
      <link href="//2018/%E8%AF%8F%E5%AE%89%E5%8D%B0%E8%B1%A1.html"/>
      <url>//2018/%E8%AF%8F%E5%AE%89%E5%8D%B0%E8%B1%A1.html</url>
      <content type="html"><![CDATA[<h2 id="前笔"><a href="#前笔" class="headerlink" title="前笔"></a>前笔</h2><p>诏安县是“书画艺术之乡”、“中国民间文化艺术（绘画）之乡、“中国青梅之乡”、原中央苏区县、福建著名的侨乡和重要台胞祖籍地。本文将记录18年在诏安生活与工作上点滴，以备留念！ </p><hr><p><img src="http://p5mgr4bgm.bkt.clouddn.com/UNADJUSTEDNONRAW_thumb_266.jpg" alt="UNADJUSTEDNONRAW_thumb_266-w600"></p><a id="more"></a><p><img src="http://p5mgr4bgm.bkt.clouddn.com/UNADJUSTEDNONRAW_thumb_265.jpg" alt="UNADJUSTEDNONRAW_thumb_265-w600"></p><ul><li>2018-03-16 [手机的魔力]</li></ul><hr><p><img src="http://p5mgr4bgm.bkt.clouddn.com/UNADJUSTEDNONRAW_thumb_25d.jpg" alt="UNADJUSTEDNONRAW_thumb_25d-w600"><br><img src="http://p5mgr4bgm.bkt.clouddn.com/UNADJUSTEDNONRAW_thumb_25e.jpg" alt="UNADJUSTEDNONRAW_thumb_25e-w600"></p><ul><li>2018-03-13 [傍晚时光]</li></ul><hr><p><img src="http://p5mgr4bgm.bkt.clouddn.com/UNADJUSTEDNONRAW_thumb_26e.jpg" alt="UNADJUSTEDNONRAW_thumb_26e-w600"><br><img src="http://p5mgr4bgm.bkt.clouddn.com/UNADJUSTEDNONRAW_thumb_264.jpg" alt="UNADJUSTEDNONRAW_thumb_264-w600"></p><ul><li>2018-03-16 [街头小巷]</li></ul><hr><p><img src="http://p5mgr4bgm.bkt.clouddn.com/UNADJUSTEDNONRAW_thumb_275.jpg" alt="UNADJUSTEDNONRAW_thumb_275-w600"></p><ul><li>2018-03-13 [动车]</li></ul><hr><p><img src="http://p5mgr4bgm.bkt.clouddn.com/UNADJUSTEDNONRAW_thumb_277.jpg" alt="UNADJUSTEDNONRAW_thumb_277-w600"></p><ul><li>2018-03-13 [夕阳]</li></ul><hr><p><img src="http://p5mgr4bgm.bkt.clouddn.com/UNADJUSTEDNONRAW_thumb_26d.jpg" alt="UNADJUSTEDNONRAW_thumb_26d-w600"></p><ul><li>2018-03-20 [清晨]</li></ul><hr><p><img src="http://p5mgr4bgm.bkt.clouddn.com/2018-04-12-IMG_0253.jpg" alt="IMG_0253-w600"></p>]]></content>
      
      <categories>
          
          <category> 摄影 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 摄影 </tag>
            
            <tag> 街拍 </tag>
            
            <tag> 诏安 </tag>
            
            <tag> 生活 </tag>
            
            <tag> 手机 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>橡胶沥青应力吸收层施工方案</title>
      <link href="//2018/%E6%A9%A1%E8%83%B6%E6%B2%A5%E9%9D%92%E5%BA%94%E5%8A%9B%E5%90%B8%E6%94%B6%E5%B1%82%E6%96%BD%E5%B7%A5%E6%96%B9%E6%A1%88.html"/>
      <url>//2018/%E6%A9%A1%E8%83%B6%E6%B2%A5%E9%9D%92%E5%BA%94%E5%8A%9B%E5%90%B8%E6%94%B6%E5%B1%82%E6%96%BD%E5%B7%A5%E6%96%B9%E6%A1%88.html</url>
      <content type="html"><![CDATA[<p>应力吸收层是指铺筑于半刚性基层与沥青路面之间或者水泥混凝土路面与沥青路面之间，具有高变形能力的改性沥青层，它能够吸收裂缝部位的应力集中，防止沥青路面形成反射裂缝，加强层间黏结与防水，延长路面使用寿命的特点。</p> <a id="more"></a><h2 id="主要施工机械及检测仪器"><a href="#主要施工机械及检测仪器" class="headerlink" title="主要施工机械及检测仪器"></a>主要施工机械及检测仪器</h2><h3 id="主要施工机械"><a href="#主要施工机械" class="headerlink" title="主要施工机械"></a>主要施工机械</h3><ol><li>橡胶沥青生产设备一套</li><li>橡胶沥青碎石同步封层车一台</li><li>洒水车</li><li>森林灭火鼓风机2台</li><li>压路机：25T轮胎压路机1台</li><li>ZL50装载机1台</li></ol><h3 id="主要检测仪器"><a href="#主要检测仪器" class="headerlink" title="主要检测仪器"></a>主要检测仪器</h3><ol><li>沥青针入度仪器</li><li>沥青延度仪</li><li>沥青软化点仪</li><li>布式旋转粘度计</li><li>标准筛（方筛孔）</li></ol><h2 id="施工工艺"><a href="#施工工艺" class="headerlink" title="施工工艺"></a>施工工艺</h2><ol><li>施工前应进行基层的清扫、吸尘和清洗。<br>先人工用竹扫帚将基层表面进行全面清扫，再用2～3台森林灭火鼓风机沿纵向排成斜线将浮灰吹净，若不能达到”除净”的要求，则用水冲洗，清除基层表面浮灰和泥浆，尽量使基层顶面集料颗粒能部分外露。</li><li>确定橡胶粉的掺量<br>一般选择至少三个不同的橡胶粉掺量（例如14％、16％、18％）进行试验，将橡胶粉加入沥青的温度范围在177～204℃之间，拌和1小时后进行试验。根据试验结果选取合适的橡胶粉掺量，橡胶沥青各项指标应满足表3技术要求。</li><li>橡胶沥青的生产<br>应由熟练人员操作橡胶沥青生产设备，采用间歇式方式生产。操作人员准确控制导热油温度，准确控制配料比例。对成品橡胶沥青及时进行各项检验。</li><li>在洒布橡胶沥青前，应注意检查<br>空气温度和地面温度都不得低于15℃，下承层必须干燥，路缘石防护良好。风速不影响橡胶沥青洒布效果。需用的设备进入待命状态，包括橡胶沥青洒布车、碎石撒布机、胶轮压路机。</li><li>橡胶沥青洒布<br>橡胶沥青洒布量采用1.5～2.0kg/㎡,采用预裹附的集料时。 起步和终止位置应铺工程纸（油毛毡），以准确进行横向衔接，洒布车经过后应及时取走工程纸。 纵向衔接应与已洒布部分重叠10cm左右。 撒铺碎石前禁止任何车辆、行人通过橡胶沥青层。</li><li>撒铺碎石<br>喷洒橡胶沥青后应立即撒铺碎石，碎石撒铺量为8-12 kg/㎡,根据试铺情况确定，以满铺、不散失为度，碎石覆盖率要达到80%以上,对于局部碎石撒铺量不足的地方，用人工补足。</li><li>碾压<br>采用25T以上的胶轮压路机进行压实。碎石撒铺后应立即进行碾压作业，胶轮压路机应同时进行碾压，紧跟碎石撒铺车，碾压数为2遍。</li><li>在铺筑上层沥青混合料前，应对橡胶沥青应力吸收层进行清扫，以清除没有粘结的松散碎石，避免影响应力吸收层与上面层的粘结。</li><li>橡胶沥青应力吸收层施工应与上面层沥青混凝土紧凑进行，中间不开放交通，若期间必须开放交通，须待应力吸收层施工完成3小时后方可开放交通，但车速不宜超过25km/h。</li></ol><h2 id="橡胶沥青应力吸收层施工要求"><a href="#橡胶沥青应力吸收层施工要求" class="headerlink" title="橡胶沥青应力吸收层施工要求"></a>橡胶沥青应力吸收层施工要求</h2><h3 id="原材料质量控制要求"><a href="#原材料质量控制要求" class="headerlink" title="原材料质量控制要求"></a>原材料质量控制要求</h3><p><strong>橡胶粉</strong><br>橡胶粉颗粒规格应符合下表要求。橡胶粉筛分应采用水筛法进行试验。橡胶粉密度应为1.15   0.05 g/cm3，应无铁丝或其它杂质，纤维比例应不超过0.5%。<br>供应商应提供橡胶粉质量保证书，说明橡胶粉规格、加工方式、加工的废旧轮胎类型、橡胶粉的储存方式等。</p><p><img src="http://p5mgr4bgm.bkt.clouddn.com/屏幕快照 2018-04-01 下午6.08.05.png" alt="屏幕快照 2018-04-01 下午6.08.05-w600"></p><p><strong>橡胶沥青</strong><br>橡胶改性沥青应满足以下技术要求，其抽检项目符合下表的要求。</p><p><img src="http://p5mgr4bgm.bkt.clouddn.com/屏幕快照 2018-04-01 下午6.08.15.png" alt="屏幕快照 2018-04-01 下午6.08.15-w600"></p><p><strong>集料</strong><br>应力吸收层应采用石质坚硬、清洁、不含风化颗粒、近立方体颗粒的破碎卵碎石，应选用反击式破碎机轧制的碎石，规格为5mm～10mm。<br>橡胶沥青应力吸收层集料级配范围如下表。 </p><p><img src="http://p5mgr4bgm.bkt.clouddn.com/屏幕快照 2018-04-01 下午6.08.27.png" alt="屏幕快照 2018-04-01 下午6.08.27-w600"></p><h3 id="质量管理"><a href="#质量管理" class="headerlink" title="质量管理"></a>质量管理</h3><ol><li>施工阶段的检测项目包括：橡胶沥青性质、橡胶沥青洒布量、集料洒布量、刹车试验、外观检查等。</li><li><p>检验方法及检验标准见下表<br><img src="http://p5mgr4bgm.bkt.clouddn.com/屏幕快照 2018-04-01 下午6.08.41.png" alt="屏幕快照 2018-04-01 下午6.08.41-w600"></p></li><li><p>橡胶沥青洒布量和碎石洒铺量控制<br><strong>沥青洒布量控制</strong><br>将要洒布沥青时，在标准尺寸矩形容器内置沥青油毡，称其重量并置于洒布车前5～10m，待洒布车经过容器后立即取出再称其重，以此计算实际撒布量，再结合沥青洒布车电脑调节装置直到设计洒布量为止。<br><strong>碎石撒布量控制</strong><br>将要洒布碎石时，取一标准尺寸矩形容器称其重量并置于撒布车前已洒布沥青路面的路段最尾处，待洒布车经过容器后立即取出再称其重，以此计算实际洒布量，然后通过调节装置直至调到设计洒布量为止。</p></li><li><p>橡胶沥青施工时间关键点</p><ul><li>沥青车预热准备时间为2小时</li><li>沥青撤布车，泵满6吨沥青的时间为20分钟。</li><li>沥青撒布车每6吨橡胶沥青每升温10℃时间约为1小时，185℃升到200℃需要约90分钟。</li><li>正常的工作时间。撤布完6吨橡胶沥青的时间为1-2小时。</li></ul></li></ol><h2 id="原材料规格及厂家"><a href="#原材料规格及厂家" class="headerlink" title="原材料规格及厂家"></a>原材料规格及厂家</h2><h3 id="基质沥青"><a href="#基质沥青" class="headerlink" title="基质沥青"></a>基质沥青</h3><p>橡胶沥青所用的基质沥青采用70号道路石油沥青，其技术要求见表1。</p><p><img src="http://p5mgr4bgm.bkt.clouddn.com/屏幕快照 2018-04-01 下午6.09.23.png" alt="屏幕快照 2018-04-01 下午6.09.23-w600"></p><h3 id="橡胶粉"><a href="#橡胶粉" class="headerlink" title="橡胶粉"></a>橡胶粉</h3><p>橡胶沥青所采用的橡胶粉规格应符合表2要求。橡胶粉筛分应采用水筛法进行试验。橡胶粉密度应为1.15   0.05 g/cm3，应无铁丝或其它杂质，纤维比例应不超过0.5%，要求含有橡胶粉重量4%的碳酸钙，以防止胶粉颗粒相互粘结。<br>供应商应提供橡胶粉质量保证书，说明橡胶粉规格、加工方式、加工的废旧轮胎类型、橡胶粉的储存方式等。</p><p><img src="http://p5mgr4bgm.bkt.clouddn.com/屏幕快照 2018-04-01 下午6.19.05.png" alt="屏幕快照 2018-04-01 下午6.19.05-w600"></p>]]></content>
      
      <categories>
          
          <category> 施工方案 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 施工 </tag>
            
            <tag> 橡胶沥青 </tag>
            
            <tag> 应力吸收层 </tag>
            
            <tag> 路面 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>非离子乳化沥青防水涂料的配方及制作工艺</title>
      <link href="//2018/%E9%9D%9E%E7%A6%BB%E5%AD%90%E4%B9%B3%E5%8C%96%E6%B2%A5%E9%9D%92%E9%98%B2%E6%B0%B4%E6%B6%82%E6%96%99%E7%9A%84%E9%85%8D%E6%96%B9%E5%8F%8A%E5%88%B6%E4%BD%9C%E5%B7%A5%E8%89%BA.html"/>
      <url>//2018/%E9%9D%9E%E7%A6%BB%E5%AD%90%E4%B9%B3%E5%8C%96%E6%B2%A5%E9%9D%92%E9%98%B2%E6%B0%B4%E6%B6%82%E6%96%99%E7%9A%84%E9%85%8D%E6%96%B9%E5%8F%8A%E5%88%B6%E4%BD%9C%E5%B7%A5%E8%89%BA.html</url>
      <content type="html"><![CDATA[<p>乳化沥青防水涂料是一种非离子型冷施工的防水、黏结材料。施工时呈液态，为棕褐色液体（硬化后成黑色），本产品无毒、无臭、不燃，具有良好的涂覆和黏结性，干燥快，干燥后变成一种稳定的薄膜，是一种“湿流干凝”材料。</p><h2 id="原料及制作工艺"><a href="#原料及制作工艺" class="headerlink" title="原料及制作工艺"></a>原料及制作工艺</h2><p><strong>原料</strong></p><ul><li>甲液：平平加O（2.2-2.4）</li><li>聚乙烯醇（4-4.2）</li><li>氢氧化钠（0.45-0.5）</li><li>泡花碱（中性）（1.4-1.6）</li><li>水（100）</li><li>乙液：10#沥青（25）、60#沥青（75）</li></ul><p><strong>制作工艺</strong></p><ol><li>将10#和60#沥青按配合比称量加入锅内，加热至200-220℃溶液脱水过滤后，降温至150-160℃以备待用（<code>乙液</code>）;</li><li>按配合比称取一定数量的基乙烯醇加入桶内（<em>用前先用少量清水浸泡一夜，便于加热溶化</em>）加入一定量的水，用水浴法加热搅拌使之溶解。;</li><li>将乳化剂按配合比分别加入已知质量的80-90℃热水中。加料次序是先加氢氧化钠，搅拌使其溶解，随即加泡花碱及聚乙烯醇搅拌均匀，再加平平加O成为混合液，再加足水量保持<strong>70-80</strong>℃左右待用（<code>甲液</code>）;</li><li>将乳化剂溶液（甲液）倒入搅拌机中，开机搅拌，即将事先准备好的沥青溶液（<code>乙液</code>）徐徐注入匀化机中进行乳化，经3-4min后，将出料阀门打开，将乳化沥青放出，经冷却装桶密封保存。</li></ol>]]></content>
      
      <categories>
          
          <category> 乳化沥青 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 工艺 </tag>
            
            <tag> 乳化沥青 </tag>
            
            <tag> 防水 </tag>
            
            <tag> 配方 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>SBS胶乳改性乳化沥青稳定性研究</title>
      <link href="//2018/SBS%E8%83%B6%E4%B9%B3%E6%94%B9%E6%80%A7%E4%B9%B3%E5%8C%96%E6%B2%A5%E9%9D%92%E7%A8%B3%E5%AE%9A%E6%80%A7%E7%A0%94%E7%A9%B6.html"/>
      <url>//2018/SBS%E8%83%B6%E4%B9%B3%E6%94%B9%E6%80%A7%E4%B9%B3%E5%8C%96%E6%B2%A5%E9%9D%92%E7%A8%B3%E5%AE%9A%E6%80%A7%E7%A0%94%E7%A9%B6.html</url>
      <content type="html"><![CDATA[<blockquote><p>胶乳类作为改性剂制备改性乳化沥青时，乳化沥青和胶乳在乳化剂的作用下，破坏各自原有的平衡，重新建立起一种新的平衡，如果这种平衡不能稳定存在，将会影响改性乳化沥青的生产、储存和使用。因此，乳液稳定性是评价改性乳化沥青的关键指标。而改性乳化沥青的稳定性与制备工艺、乳化剂用量、胶乳与乳化沥青颗粒大小等诸多因素有关。从热力学的角度分析，任何乳状液都不是稳定的，随着时间的推移、环境温度的变化或接触介质的变化，都可能引起乳状液的分层、絮凝和聚集，最终导致乳状液的破坏。改性乳化沥青是一种热力学不稳定体系，其稳定性是由所添加的乳化剂、乳液稳定剂等产生的各种作用而引起的。维持乳液稳定性的各种理论主要有吸附理论、膜理论、吸附双电层理论等。</p></blockquote> <a id="more"></a><h3 id="试验部分"><a href="#试验部分" class="headerlink" title="试验部分"></a>试验部分</h3><h4 id="试验原料"><a href="#试验原料" class="headerlink" title="试验原料"></a>试验原料</h4><ul><li>基质沥青：胜利90号；</li><li>乳化剂：JQT，阳离子型，江阴峭歧股份有限公司生产；</li><li>改性剂：自制的SBS胶乳：固含量为40.68%，具有很好的稳定性；</li><li>稳定剂；CaCl2：化学纯；聚丙烯酰胺；</li><li>盐酸：化学纯。 </li></ul><h4 id="试验设备"><a href="#试验设备" class="headerlink" title="试验设备"></a>试验设备</h4><p>沥青乳化机：温州兴达机械制造厂生产，型号YXD-60。</p><h3 id="制备工艺"><a href="#制备工艺" class="headerlink" title="制备工艺"></a>制备工艺</h3><p>按胶乳混合状态分类，改性乳化沥青的制备方法通常有3种：二次热混合法、一次热混合法和一次冷混合法。目前普遍认为二次热混合法的乳化效果较好。试验采用二次热混合法，其工艺流程见图1。即先将SBS胶乳和乳化剂的水溶液经混合剪切进行第一次混合，然后再加入热的沥青，在沥青乳化剂的作用下进行第二次乳化分散的过程。</p><h3 id="SBS胶乳的制备"><a href="#SBS胶乳的制备" class="headerlink" title="SBS胶乳的制备"></a>SBS胶乳的制备</h3><p>取25g线型的SBS-792于烧杯中，加入一定量的甲苯溶剂，放置1h，使得SBS充分溶胀；再于烧杯中加入定量的以阳离子为主的复配型乳化剂，此混合液在高分散乳化机作用下，慢慢注入定量的热蒸馏水，在此过程中，乳化机的转速为10 000rpm；待水加入完毕后，调节乳化机转速至16 000rpm，作用30min，得O/W型初级乳液；此初级乳液通过减压蒸馏分出其中的甲苯溶剂，得SBS胶乳。</p><h3 id="试验结果与讨论"><a href="#试验结果与讨论" class="headerlink" title="试验结果与讨论"></a>试验结果与讨论</h3><h3 id="乳化剂用量的影响"><a href="#乳化剂用量的影响" class="headerlink" title="乳化剂用量的影响"></a>乳化剂用量的影响</h3><p>乳化剂的用量少，乳化效果不好，乳液中沥青微粒粒径大小不均，体系的储存稳定性下降；用量多，使生产成本提高，造成浪费。通过考察乳化剂用量对沥青乳化后储存稳定性的影响，进而也可以确定乳化剂的最佳用量。影响见图2。改性乳化沥青中，SBS胶乳的含量为总物料的6%。<br>从图2可以看出，乳化剂的用量在0.4%-0.8%范围内时，乳化沥青的储存稳定性随乳化剂的用量变化很大，当用量大于0.8%时，乳化沥青的储存稳定性几乎保持不变，且乳液具有很好的储存稳定性。对于加入6%SBS胶乳(相当于4.8%的固体SBS含量)的改性乳化沥青，乳化剂用量小于1%时，其储存稳定性随乳化剂用量的增加变化较大，乳化剂用量大于1%，乳化剂的用量对改性乳化沥青的储存稳定性影响较小，体系趋于稳定。<br>当乳化剂用量较少时，乳化剂不能使水的表面张力充分降低，沥青和水几乎是直接接触着的，乳化效果不好，所以稳定性差；随着乳化剂量的增加，沥青乳液逐渐开始趋向于稳定的状态，乳化剂分子的亲水和亲油基团分别和水、改性沥青结合。再增加乳化剂用量，沥青乳液稳定性的变化不大时，说明沥青乳液中乳化剂含量已经达到临界胶束浓度。从图2可以看出，阳离子乳化剂JQT在含量为1%时才能在改性乳化沥青中达到临界胶束浓度。</p><h3 id="稳定剂用量的影响"><a href="#稳定剂用量的影响" class="headerlink" title="稳定剂用量的影响"></a>稳定剂用量的影响</h3><p>用单一乳化剂制备沥青乳液，其乳液颗粒有时会粗大不均，易发生絮凝或者沉降现象。</p><p>如果在单一乳化剂中添加稳定剂制备沥青乳液，则可以得到颗粒均匀而微细的乳液。稳定剂包括无机稳定剂和有机稳定剂。其中稳定效果最好的无机盐类物质为氯化铵和氯化钙。有机盐类稳定剂有胺类、聚乙烯醇、聚丙烯酰胺、羧甲基纤维素钠等，因此选择适宜的稳定剂是保证乳化沥青稳定的重要措施。</p><p>试验在乳化剂和改性剂用量为总物料的1%和6%条件下，分别考察无机稳定剂CaCl2和有机稳定剂聚丙烯酰胺及其复配后对改性乳化沥青储存稳定性的影响。见图3。</p><p>图3表明，无论是无机类还是有机类稳定剂，改性乳化沥青的储存稳定性并不随其用量的增加而呈现降低的趋势，其用量存在一个最佳值。出现此原因，主要是因为添加稳定剂能够增强乳液颗粒周围的双电层效应，增加f电位和颗粒之间的相互排斥力，只有当颗粒间的排斥力达到某一平衡时，颗粒间才可以稳定共存；排斥力太大或太小，都会使得颗粒之间存在凝聚，不能起到很好的稳定效果。由此可以看出，CaCl2的最佳用量为0.2%；聚丙烯酰胺和1：1质量比复配的CaCl2和聚丙烯酰胺的最佳用量都为0.15%。</p><p>从图3中还可以看出，聚丙烯酰胺的稳定效果优于CaCl2，究其原理，是沥青乳液中加入聚丙烯酰胺稳定剂，可以提高水相粘度，能在分散的微粒上形成界面膜，使其微粒相互碰撞时不易聚结，减小沥青微粒的沉降速度。界面膜由密排的定向分子组成，膜的强度较大，沥青微粒聚结需要克服的阻力也大，因而沥青乳液越能稳定。加入CaCl2后增大水相密度，减小与沥青相的密度差，能够增强乳液颗粒周围的双电层效应，增大f电位，增加颗粒之间的相互排斥力，减缓颗粒之间的合一凝聚速度。从试验结果可以看出，对于胜利90号重交通道路石油沥青来说，增加乳液的粘度和密度虽都可以达到稳定的效果，但是粘度的增加对储存稳定性的贡献更大。而复配的CaCl2和聚丙烯酰胺作为稳定剂时，其一方面增加水相的粘度，另一方面增加水相的密度，在与单一稳定剂用量相同的条件下，其可以起到双重的稳定效果，故可以大大改善改性乳化沥青的储存稳定牲。因此，对于胜利90号重交通道路石油沥青，采用无机和有机复配的稳定剂效果最好。</p><h3 id="乳化剂溶液的pH值的影响"><a href="#乳化剂溶液的pH值的影响" class="headerlink" title="乳化剂溶液的pH值的影响"></a>乳化剂溶液的pH值的影响</h3><p>对于阳离子乳化剂，主要在酸性条件下使用。以季铵盐型乳化剂配制乳化液时，由于其乳化剂易溶于水，不需添加酸。但如果在季铵盐中添加有机或者无机酸调整溶液的pH值，能够增强乳化剂本身的活性，在提高乳化稳定性和储存稳定性的同时，可以降低乳化剂的用量。<br>此试验采用盐酸来调节乳化剂的pH值，在没有添加稳定剂的条件下考察乳液pH值对改性乳化沥青存储稳定性的影响。其中SBS胶乳的加入量为6%，乳化剂用量为l%。<code>见表l</code>。</p><p>表1  乳化剂水溶液pH值对改性乳化沥青储存稳定性的影响<br><img src="http://p5mgr4bgm.bkt.clouddn.com/15223956090185.jpg" alt="表1-w700"></p><p>从表1可以看出，乳化剂水溶液本身的pH值范围为5-6，而与SBS胶乳的pH值的范围相同，因此两种乳液混合后颗粒的稳定性好。对于乳化沥青来说，加入酸，可能会使乳液达到较好的稳定性，而在此试验中效果恰恰相反，从表中数据可以看出，随着酸的加入，pH变小，体系的储存稳定性下降。由此可见，在采用胶乳类改性剂制备改性乳化沥青时，要得到稳定体系，需调整乳化剂水溶液的pH值与改性剂乳液的一致。</p><h3 id="SBS胶乳对体系微观稳定性的影响"><a href="#SBS胶乳对体系微观稳定性的影响" class="headerlink" title="SBS胶乳对体系微观稳定性的影响"></a>SBS胶乳对体系微观稳定性的影响</h3><p>由于SBS胶乳作为改性剂时，其用量只有百分之几，考察其对改性乳化沥青储存稳定性的影响，不能从根本上反映出SBS在体系中的分散状况，因此本试验采用德国莱卡公司生产的光学电子显微镜进行分析。图4和图5分别为改性剂SBS胶乳用量为6%时的光学显微镜图。<br>放大倍数分别为400和l 000倍。从图中可以看出SBS颗粒(白色颗粒)在乳化沥青中分散比较均匀，没有明显的聚集结胶现象。<br>通过透射电镜分析，得出SBS颗粒平均粒径为1.97 p.m，沥青的平均粒径为2.53 p.m。测量SBS胶乳20C的密度为0.990lg/cm-1，乳化沥青的密度1.089g/cm-1。两者颗粒大小、密度的相近是保证SBS在体系中均匀分散的重要因素。<br>此外，影响改性乳化沥青稳定性的因素还有制备工艺、乳化设备、沥青特性等诸多因素。为了使改性乳化沥青具有一定的稳定性，.在研制生产过程中，应采取以下措施：(1)应尽量选择结构与沥青组成结构相同或相似的乳化剂以提高其亲和力，且乳化剂的用量要达到临界胶束浓度；(2)应设法提高连续相(水相)的粘度，以降低颗粒的沉降速率；(3)应尽量减少分散相与连续相之间的密度差；(4)应调整乳化剂水溶液的pH值，以保证对沥青的完全乳化，此外也要与胶乳类改性剂的pH值相同或接近；(5)应尽量选用乳化后颗粒大小与沥青颗粒大小相近的改性剂。</p><h3 id="SBS胶乳改性乳化沥青的性能分析"><a href="#SBS胶乳改性乳化沥青的性能分析" class="headerlink" title="SBS胶乳改性乳化沥青的性能分析"></a>SBS胶乳改性乳化沥青的性能分析</h3><p>根据稳定性考察得出的各影响因素的最佳用量制备改性乳化沥青，即乳化剂JQT的用量为1%；SBS胶乳用量为6%；稳定剂选用1 c1质量比复配的。CaCl2和聚丙烯酰胺，用量为o.15%。其中沥青与水的比例为50：50，乳化机转速1 000rpm，乳化时间为3rain。对其的性质进行分析，分别采用相应的行业标准。具体数据列于<code>下表2</code>。<br> <img src="http://p5mgr4bgm.bkt.clouddn.com/15223956888655.jpg" alt="表2-w700"></p><p>从表2中可以看出，所制备的改性乳化沥青的各项性能均满足公路施工技术规范的要求，是一效果较好的改性乳化沥青。从蒸发残留物性能来看，改性后针入度、软化点和延度相对于基质沥青(25℃针入度：85 1/10mm；软化点：47.5C，5C延度：脆断)都有不同程度的改善，进而说明SBS胶乳对沥青具有很好的改性效果，是一性能较好的改性剂乳液。</p><h3 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h3><ul><li>阳离子乳化剂JQT在用量为1%时达到其临界胶束浓度，即其的最佳用量为1%。<br>-对于胜利90号重交通道路石油沥青，无机类和有机类稳定剂复配后可以大大提高其的储存稳定性。</li><li>对于乳化剂JQT，加酸降低其水溶液的pH值反而对改性乳化沥青的储存稳定性不利。</li><li>SBS颗粒的大小和密度与乳化后沥青颗粒的大小和乳化沥青的密度匹配时，可以使得SBS颗粒在乳化沥青中分散均匀。</li><li>根据试验得出的各因素的最佳用量制备出性能优良的改性乳化沥青，通过SBS胶乳改性前后沥青的三项指标分析得出，SBS胶乳具有很好的改性效果，是一较好的改性剂乳液。</li></ul><hr>]]></content>
      
      <categories>
          
          <category> 改性乳化沥青 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SBS </tag>
            
            <tag> 改性乳化沥青 </tag>
            
            <tag> 稳定性 </tag>
            
            <tag> 工艺 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Ubuntu16.04设置Pycharm桌面快捷键</title>
      <link href="//2018/Ubuntu16.04-pycharm-icon-setting.html"/>
      <url>//2018/Ubuntu16.04-pycharm-icon-setting.html</url>
      <content type="html"><![CDATA[<h2 id="Ubuntu下所有的快捷方式都在："><a href="#Ubuntu下所有的快捷方式都在：" class="headerlink" title="Ubuntu下所有的快捷方式都在："></a>Ubuntu下所有的快捷方式都在：</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/usr/share/applications</span><br></pre></td></tr></table></figure><h2 id="解压"><a href="#解压" class="headerlink" title="解压"></a>解压</h2><p>这里我将pycharm下载并解压到了/home/snakeson/developer文件夹下</p><p>这里的pycharm.sh是批处理执行文件，prcharm.png是快捷方式图标</p><h2 id="终端打开"><a href="#终端打开" class="headerlink" title="终端打开"></a>终端打开</h2><p>使用Ubuntu终端进行打开：<br>方法一（使用vim）：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo vi  /usr/share/applications/pycharm.desktop</span><br></pre></td></tr></table></figure></p><p>方法二（使用gedit）：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo gedit  /usr/share/applications/pycharm.desktop</span><br></pre></td></tr></table></figure><p>然后就会弹出一个新框：<br><a id="more"></a></p><h2 id="张贴"><a href="#张贴" class="headerlink" title="张贴"></a>张贴</h2><p>我们将下面的内容贴上去：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">[Desktop Entry]</span><br><span class="line">Type=Application</span><br><span class="line">Name=Pycharm</span><br><span class="line">GenericName=Pycharm3</span><br><span class="line">Comment=Pycharm3:The Python IDE</span><br><span class="line">Exec=<span class="string">"/home/snakeson/developer/pycharm-community-2017.2.3/bin/pycharm.sh"</span> %f</span><br><span class="line">Icon=<span class="regexp">/home/</span>snakeson/developer/pycharm-community<span class="number">-2017.2</span><span class="number">.3</span>/bin/pycharm.png</span><br><span class="line">Terminal=pycharm</span><br><span class="line">Categories=Pycharm;</span><br></pre></td></tr></table></figure></p><hr><p>注意一定要将Desktop Entry复制进去，也就是上面的全部都要复制进去，这里我们需要替换掉两个地方：<strong>Exec=”xx”</strong>和<strong>Icon=</strong>,这里要替换掉我们的pycharm解压的目录，当然了，我已经替换好了，如果你的目录跟我的目录不一样的话，你得把路径给换了，不管你是pycharm2017还是pycharm2016,，例如Comment什么的都不要改变，只变上面提到的两个路径就可以了。</p><h2 id="添加可执行权限"><a href="#添加可执行权限" class="headerlink" title="添加可执行权限"></a>添加可执行权限</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo chmod +x /usr/share/applications/pycharm.desktop</span><br></pre></td></tr></table></figure><h2 id="拷贝到桌面"><a href="#拷贝到桌面" class="headerlink" title="拷贝到桌面"></a>拷贝到桌面</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">将/usr/share/applications/pycharm.desktop文件拷贝到桌面，双击即可运行。</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> SnakeSon </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Ubuntu </tag>
            
            <tag> Pycharm </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Fisher–Yates shuffle 洗牌算法</title>
      <link href="//2018/shuffle-algorithm.html"/>
      <url>//2018/shuffle-algorithm.html</url>
      <content type="html"><![CDATA[<p>简单来说 Fisher–Yates shuffle 算法是一个用来将一个有限集合生成一个随机排列的算法（数组随机排序）。这个算法生成的随机排列是等概率的。同时这个算法非常高效。</p><p>本文主要介绍这个算法的来源、演变、原理。并举出一个例子为大家清晰的描述每次迭代过程。最后使用 JavaScript 代码将算法实现。</p><p><img src="https://upload.wikimedia.org/wikipedia/commons/thumb/7/7c/Riffle_shuffle.jpg/320px-Riffle_shuffle.jpg" alt=""></p> <a id="more"></a><h2 id="Fisher-and-Yates-的原始版"><a href="#Fisher-and-Yates-的原始版" class="headerlink" title="Fisher and Yates 的原始版"></a>Fisher and Yates 的原始版</h2><p><img src="https://upload.wikimedia.org/wikipedia/commons/thumb/3/37/Biologist_and_statistician_Ronald_Fisher.jpg/189px-Biologist_and_statistician_Ronald_Fisher.jpg" alt=""></p><p>Fisher–Yates shuffle 的原始版本，最初描述在 1938 年的 Ronald Fisher（上图） 和 Frank Yates 写的书中，书名为《Statistical tables for biological, agricultural and medical research》。他们使用纸和笔去描述了这个算法，并使用了一个随机数表来提供随机数。它给出了 <strong><em>1</em></strong> 到 N 的数字的的随机排列，具体步骤如下：</p><ol><li>写下从 1 到 N 的数字</li><li><a href="">取</a>一个从 1 到剩下的数字（包括这个数字）的随机数 k</li><li>从低位开始，得到第 k 个数字（这个数字还没有被取出），把它写在独立的一个列表的最后一位</li><li>重复第 2 步，直到所有的数字都被取出</li><li>第 3 步写出的这个序列，现在就是原始数字的随机排列</li></ol><p>已经证明如果第 2 步取出的数字是真随机的，那么最后得到的排序一定也是。</p><h2 id="现代方法"><a href="#现代方法" class="headerlink" title="现代方法"></a>现代方法</h2><p>Fisher–Yates shuffle 算法的现代版本是为计算机设计的。由 Richard Durstenfeld 在1964年 描述。并且是被 Donald E. Knuth 在 《The Art of Computer Programming》 中推广。但是不管是 Durstenfeld 还是 Knuth，都没有在书的第一版中承认这个算法是 Fisher 和 Yates 的研究成果。也许他们并不知道。不过后来出版的 《The Art of Computer Programming》提到了 Fisher 和 Yates 贡献。</p><p>现代版本的描述与原始略有不同，因为如果按照原始方法，愚蠢的计算机会花很多无用的时间去计算上述第 3 步的剩余数字。<strong>这里的方法是在每次迭代时交换这个被取出的数字到原始列表的最后</strong>。这样就将时间复杂度从 O(n^2) 减小到了 <strong>O(n)</strong>。算法的伪代码如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">-- To shuffle an array a of n elements (indices 0..n-1):</span><br><span class="line">for i from n−1 downto 1 do</span><br><span class="line">     j ← random integer such that 0 ≤ j ≤ i</span><br><span class="line">     exchange a[j] and a[i]</span><br></pre></td></tr></table></figure><h2 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h2><h3 id="迭代步骤演示"><a href="#迭代步骤演示" class="headerlink" title="迭代步骤演示"></a>迭代步骤演示</h3><p>根据每次迭代次数可以用下面的表格，描述这个算法的执行过程</p><table><thead><tr><th style="text-align:left">随机数取值范围</th><th style="text-align:left">随机数</th><th style="text-align:right">原始数据</th><th style="text-align:left">结果</th></tr></thead><tbody><tr><td style="text-align:left"></td><td style="text-align:left"></td><td style="text-align:right">1 2 3 4 5 6 7 8</td><td style="text-align:left"></td></tr><tr><td style="text-align:left">1-8</td><td style="text-align:left">6</td><td style="text-align:right">1 2 3 4 5 7 8</td><td style="text-align:left">6</td></tr><tr><td style="text-align:left">1-7</td><td style="text-align:left">2</td><td style="text-align:right">1 7 3 4 5 8</td><td style="text-align:left">2 6</td></tr><tr><td style="text-align:left">1–6</td><td style="text-align:left">6</td><td style="text-align:right">1 7 3 4 5</td><td style="text-align:left">8 2 6</td></tr><tr><td style="text-align:left">1–5</td><td style="text-align:left">1</td><td style="text-align:right">5 7 3 4</td><td style="text-align:left">1 8 2 6</td></tr><tr><td style="text-align:left">1–4</td><td style="text-align:left">3</td><td style="text-align:right">5 7 4</td><td style="text-align:left">3 1 8 2 6</td></tr><tr><td style="text-align:left">1–3</td><td style="text-align:left">3</td><td style="text-align:right">5 7</td><td style="text-align:left">4 3 1 8 2 6</td></tr><tr><td style="text-align:left">1–2</td><td style="text-align:left">1</td><td style="text-align:right">7</td><td style="text-align:left">5 4 3 1 8 2 6</td></tr></tbody></table><h3 id="动画演示"><a href="#动画演示" class="headerlink" title="动画演示"></a>动画演示</h3><p>下面这个动画就是整个数组 0-19 的随机排序过程</p><iframe height="317" scrolling="no" src="//codepen.io/haoyang/embed/jrvrQq/?height=317&theme-id=dark&default-tab=result&embed-version=2" frameborder="no" allowtransparency="true" allowfullscreen="true" style="width: 100%;">See the Pen <a href="https://codepen.io/haoyang/pen/jrvrQq/" target="_blank" rel="noopener">Fisher–Yates shuffle</a> by Chuan shi (<a href="http://codepen.io/haoyang" target="_blank" rel="noopener">@haoyang</a>) on <a href="http://codepen.io" target="_blank" rel="noopener">CodePen</a>.<br></iframe><h2 id="JavaScript-代码实现"><a href="#JavaScript-代码实现" class="headerlink" title="JavaScript 代码实现"></a>JavaScript 代码实现</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Fisher–Yates shuffle</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="built_in">Array</span>.prototype.shuffle = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> input = <span class="keyword">this</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = input.length<span class="number">-1</span>; i &gt;=<span class="number">0</span>; i--) &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> randomIndex = <span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random()*(i+<span class="number">1</span>));</span><br><span class="line">        <span class="keyword">var</span> itemAtIndex = input[randomIndex];</span><br><span class="line"></span><br><span class="line">        input[randomIndex] = input[i];</span><br><span class="line">        input[i] = itemAtIndex;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> input;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用方式也很简单，直接用数组调用这个方法即可</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>].shuffle()</span><br><span class="line"></span><br><span class="line"><span class="comment">//[4, 6, 3, 2, 5, 1, 7, 8] // 每次结果都是随机的</span></span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>总之，Fisher–Yates shuffle 算法是一个非常高效又公平的随机排序算法，如果有随机排序数组的需求，用这个就对了！</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://en.wikipedia.org/wiki/Fisher%E2%80%93Yates_shuffle" target="_blank" rel="noopener">Fisher–Yates shuffle From Wikipedia</a></li></ul>]]></content>
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> shuffle </tag>
            
            <tag> 乱序 </tag>
            
            <tag> 洗牌 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Git 如何 clone 非 master 分支的代码</title>
      <link href="//2018/git-clone-not-master-branch.html"/>
      <url>//2018/git-clone-not-master-branch.html</url>
      <content type="html"><![CDATA[<h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h2><p>我们每次使用命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone git@gitlab.xxx.com:xxxxx.git</span><br></pre></td></tr></table></figure><p>默认 clone 的是这个仓库的 master 分支。如果最新的代码不在 master 分支上，该如何拿到呢？如下图所示，最新的代码可能在<code>daily/1.4.1</code>分支上，我们希望拿到这个分支上的代码。</p><p><img src="https://ooo.0o0.ooo/2016/07/07/577e349ab42ed.png" alt="7f07c8f6deef169ef6be5103bbd3e932f8676bb1.png"><br><a id="more"></a></p><h2 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h2><p><strong>刚刚开周会的时候，自己洋洋得意的分享我的解决方案，但是……经过与团队成员的的讨论，自己的方法弱爆了，现在把更优雅的方法写一下。原来写的方法并不太适合用在这个场景里。</strong> 我之前写的方法在文章后面。</p><p>直接使用命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git branch -r #查看远程分支</span><br></pre></td></tr></table></figure><p>或</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git branch -a #查看所有分支</span><br></pre></td></tr></table></figure><p>会显示</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">origin/HEAD -&gt; origin/master</span><br><span class="line">origin/daily/1.2.2</span><br><span class="line">origin/daily/1.3.0</span><br><span class="line">origin/daily/1.4.1</span><br><span class="line">origin/develop</span><br><span class="line">origin/feature/daily-1.0.0</span><br><span class="line">origin/master</span><br></pre></td></tr></table></figure><p>然后直接</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout origin/daily/1.4.1</span><br></pre></td></tr></table></figure><p>就好了。。。</p><h2 id="原来的解决方案"><a href="#原来的解决方案" class="headerlink" title="原来的解决方案"></a>原来的解决方案</h2><p><strong>其实我原来写的这个方法更多的是：设置已有的本地分支跟踪一个刚刚拉取下来的远程分支，或者想要修改正在跟踪的上游分支。</strong></p><p>我们在本地先建立一个分支，建议名称和远程的想要同步的分支名称一样。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git branch daily/1.4.1</span><br></pre></td></tr></table></figure><p>在切换到这个本地分支</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git checkout daily/1.4.1</span><br><span class="line"># Switched to branch &apos;daily/1.4.1&apos;</span><br></pre></td></tr></table></figure><p>接下来就可以去建立上游分支的关联了，但是这个命令比较长，不好记，我们可以直接先<code>pull</code>一下，git 会提示我们相应的操作和命令。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">git pull</span><br><span class="line">There is no tracking information for the current branch.</span><br><span class="line">Please specify which branch you want to merge with.</span><br><span class="line">See git-pull(1) for details.</span><br><span class="line"></span><br><span class="line">    git pull &lt;remote&gt; &lt;branch&gt;</span><br><span class="line"></span><br><span class="line">If you wish to set tracking information for this branch you can do so with:</span><br><span class="line"></span><br><span class="line">    git branch --set-upstream-to=origin/&lt;branch&gt; daily/1.4.1</span><br></pre></td></tr></table></figure><p>我们看到最后一行，执行这个命令，即可完成与上游分支的关联。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git branch --set-upstream-to=origin/daily/1.4.1 daily/1.4.1</span><br><span class="line"># Branch daily/1.4.1 set up to track remote branch daily/1.4.1 from origin.</span><br></pre></td></tr></table></figure><p>然后再<code>pull</code>一下就好了！</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git pull</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> GitHub </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
            <tag> GitHub </tag>
            
            <tag> 分支 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>JavaScript 语言精粹笔记2-方法、毒瘤等</title>
      <link href="//2018/JavaScript-good-parts-note2.html"/>
      <url>//2018/JavaScript-good-parts-note2.html</url>
      <content type="html"><![CDATA[<p>记录一下阅读蝴蝶书的笔记，本篇为书中最后一部分：方法、代码风格、优美的特性、毒瘤、糟粕等。</p><h2 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h2><p>这一章主要介绍了一些方法集。这里写几个我不太熟悉的方法和要点吧。</p><ul><li><p><code>array.join()</code></p><blockquote><p>对于IE6/7，使用<code>array.join()</code>连接大量字符串的效率确实优于使用<code>+</code>元素运算符。但是目前主流的浏览器，包括IE8以后的版本，都对<code>+</code>元素运算符连接字符串做了特别优化，性能已经显著高于<code>array.join()</code>。</p></blockquote></li><li><p><code>number.toExponential(fractionDigits)</code></p><p>  把这个<code>number</code>转换成一个指数形式的字符串。</p></li><li><p><code>number.toFixed(fractionDigits)</code></p><p>  将这个<code>number</code>转换成一个十进制形式的字符串。</p><a id="more"></a></li></ul><h2 id="毒瘤"><a href="#毒瘤" class="headerlink" title="毒瘤"></a>毒瘤</h2><ul><li><p>注意全局变量的引入。</p></li><li><p>JavaScript 中 Unicode 是16位的。包含65536个字符（基本多文种平面 Basic Multilingual Plane）。剩下的百万字符中的每一个都可以用一对字符来表示。Unicode 把一对字符视为一个单一的字符，而 JavaScript 认为一对字符是两个不同的字符。</p></li><li><p>检测<code>null</code>的方式。</p></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> <span class="literal">null</span>) <span class="comment">//object</span></span><br><span class="line"></span><br><span class="line">myValue === <span class="literal">null</span> <span class="comment">//检测 null</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (myValue &amp;&amp; <span class="keyword">typeof</span> myValue === <span class="string">'object'</span>) &#123;</span><br><span class="line">    <span class="comment">// myValue 是一个对象或数组！</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p><code>parseInt</code> 把字符串转化为整数的函数。它遇到非数字时会停止解析，所以<code>parseInt(&#39;16&#39;)</code>和<code>parseInt(&#39;16ton&#39;)</code>产生相同的结果。</p><p>  如果该字符串第一个字符是0，那么该字符串会基于八进制而不是十进制来求职。在八进制中，8和9不是数字，所以<code>parseInt(&#39;08&#39;)</code>和<code>parseInt(&#39;09&#39;)</code>都产生0作为结果。但<code>parseInt()</code>可以接受基数，因此<code>parseInt(&#39;08&#39;,10)</code>结果为8，建议总是加上这个基数参数。</p></li><li><p>JavaScript 的对象永远不会是真的空对象，因为它们可以送原型链中取得成员属性。</p></li></ul><h2 id="糟粕"><a href="#糟粕" class="headerlink" title="糟粕"></a>糟粕</h2><ul><li><p>避免使用<code>with</code>语句。</p></li><li><p>避免使用<code>eval</code>语句。</p></li><li><p><code>continue</code>可能会降低运算性能。</p></li><li><p>位运算符在 JavaScript 会非常慢。</p><p>  Java 里，位运算符处理的是整数。JavaScript 没有整数类型，它只有双精度的浮点数，因此，位运算符把它们的数字运算数先转换为整数，执行运算，在转换回去。JavaScript 的执行环境一般接触不到硬件，所以非常慢。</p></li><li><p>避免使用包装对象。<code>new Object</code>和<code>new Array</code>等。</p></li><li><p>避免使用<code>void</code>。</p></li></ul><p>本系列结束。</p>]]></content>
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> 函数 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>如何使用 babel</title>
      <link href="//2018/how-to-use-babel.html"/>
      <url>//2018/how-to-use-babel.html</url>
      <content type="html"><![CDATA[<p><a href="https://babeljs.io/" target="_blank" rel="noopener">Babel</a> 用于将 ES6 的代码转化为 ES5，使得 ES6 可以在目前的浏览器环境下使用。学习使用 babel 是为了使用 ES2015 做准备。本文将介绍如何使用 babel，以及一些相关的配置。</p><p><img src="https://babeljs.io/images/logo.svg" alt=""></p><p>学习 Babel 可以通过其手册 Babel handbook。</p><ul><li><a href="https://github.com/thejameskyle/babel-handbook" target="_blank" rel="noopener">babel-handbook</a></li></ul><p>其中包含多语言版本，分为<a href="https://github.com/thejameskyle/babel-handbook/blob/master/translations/zh-Hans/user-handbook.md" target="_blank" rel="noopener">用户手册</a>和<a href="https://github.com/thejameskyle/babel-handbook/blob/master/translations/zh-Hans/plugin-handbook.md" target="_blank" rel="noopener">插件手册</a>。这是一个很好的学习 Babel 的资料。<br><a id="more"></a></p><h2 id="babel-cli"><a href="#babel-cli" class="headerlink" title="babel-cli"></a>babel-cli</h2><p>在 node 和 npm 环境安装好的前提下，安装 babel，如下：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --global babel-cli</span><br></pre></td></tr></table></figure><p>安装完成后就可以编译文件了。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">babel main.js</span><br></pre></td></tr></table></figure><p>编译后的文件显示在终端上，可以添加其他命令让它输出到指定文件下：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">babel example.js --out-file compiled.js</span><br><span class="line">或</span><br><span class="line">babel example.js -o compiled.js</span><br></pre></td></tr></table></figure><p>或将整个目录编译成一个新的目录：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">babel src --out-dir lib</span><br><span class="line">或</span><br><span class="line">babel src -d lib</span><br></pre></td></tr></table></figure><p>但这很麻烦，并且并不是一个很好的解决方案，请看下一节项目内运行 babel-cli。</p><h2 id="在项目内运行-babel-cli"><a href="#在项目内运行-babel-cli" class="headerlink" title="在项目内运行 babel-cli"></a>在项目内运行 babel-cli</h2><p>初始化项目</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm init</span><br></pre></td></tr></table></figure><p>再安装 babel-cli</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --save-dev babel-cli</span><br></pre></td></tr></table></figure><p>项目中的<code>package.json</code>应该包含如下内容：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"name"</span>: <span class="string">"learn-es6"</span>,</span><br><span class="line">  <span class="attr">"version"</span>: <span class="string">"1.0.0"</span>,</span><br><span class="line">  <span class="attr">"devDependencies"</span>: &#123;</span><br><span class="line">    <span class="attr">"babel-cli"</span>: <span class="string">"^6.10.1"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>添加 npm scripts 命令。</p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  "name": "learn-es6",</span><br><span class="line">  "version": "1.0.0",</span><br><span class="line"><span class="addition">+   "scripts": &#123;</span></span><br><span class="line"><span class="addition">+     "build": "babel src -d lib"</span></span><br><span class="line"><span class="addition">+   &#125;,</span></span><br><span class="line">  "devDependencies": &#123;</span><br><span class="line">    "babel-cli": "^6.10.1"</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此时在终端里运行</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm run build</span><br></pre></td></tr></table></figure><p>还不能成功编译，因为没有配置<code>.babelrc</code>文件。</p><h2 id="配置-babelrc"><a href="#配置-babelrc" class="headerlink" title="配置.babelrc"></a>配置<code>.babelrc</code></h2><p>通过配置<code>.babelrc</code>来告诉 babel 来做什么。</p><p>在项目的根路径下创建<code>.babelrc</code>文件。然后输入以下内容作为开始：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"presets"</span>: [],</span><br><span class="line">    <span class="attr">"plugins"</span>: []</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>为了让 babel 将 ES2015 转化为 ES5，我们要安装如下：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --save-dev babel-preset-es2015</span><br></pre></td></tr></table></figure><p>安装完成后在<code>.babelrc</code>中添加参数：</p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    "presets": [</span><br><span class="line"><span class="addition">+       "es2015"</span></span><br><span class="line">    ],</span><br><span class="line">    "plugins": []</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>现在在项目<code>src/main.js</code>中写一些 ES2015 的代码试试吧。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a = <span class="number">1</span></span><br></pre></td></tr></table></figure><p>在终端中输入命令</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm run build</span><br></pre></td></tr></table></figure><p>执行后终端中显示：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; learn-es6@1.0.0 build c:\gitWorkSpace\learn-es6</span><br><span class="line">&gt; babel src -d lib</span><br></pre></td></tr></table></figure><p>然后可以看到目录中出现了<code>lib/main.js</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">"use strict"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> a = <span class="number">1</span>;</span><br></pre></td></tr></table></figure><p>即编译成功。</p><h2 id="配置-jshintrc"><a href="#配置-jshintrc" class="headerlink" title="配置.jshintrc"></a>配置<code>.jshintrc</code></h2><p>若编辑器中安装了 jshint 语法检查的插件。默认对于 ES2015 的代码可能会报错或者警告，看着可能会不爽。我们可以在配置文件中将它设置为允许 ES2015 的模式。</p><p>在项目根目录下创建文件<code>.jshintrc</code>。内容如下：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"asi"</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">"esversion"</span>: <span class="number">2015</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上述文件我分别设置了，使用无分号模式，es 版本使用 2015。</p><p>关于<code>.jshintrc</code>的更详细配置可以参见官方示例：<a href="https://github.com/jshint/jshint/blob/master/examples/.jshintrc" target="_blank" rel="noopener">https://github.com/jshint/jshint/blob/master/examples/.jshintrc</a></p><p>好，babel 就说到这里，下面开始进入真正的 ES2015 的学习！</p>]]></content>
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ES2015 </tag>
            
            <tag> ES6 </tag>
            
            <tag> ES5 </tag>
            
            <tag> babel </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>JavaScript 语言精粹笔记1-语法、对象、函数</title>
      <link href="//2018/JavaScript-good-parts-note1.html"/>
      <url>//2018/JavaScript-good-parts-note1.html</url>
      <content type="html"><![CDATA[<p>记录一下阅读蝴蝶书的笔记，本篇为第一部分包含书中前三章内容：语法、对象和函数。</p><p><img src="https://img3.doubanio.com/lpic/s3651235.jpg" alt=""></p><p>原书中第一章为精华，做了一些周边介绍，略去。</p><h2 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h2><h3 id="空白"><a href="#空白" class="headerlink" title="空白"></a>空白</h3><p>这里说一下JavaScript的注释，一种是 <code>/* */</code> 包围的块注释，另一种是 <code>//</code> 开头的行注释。</p><p>因为块注释的字符可能是JavaScript中正则表达式字面量，因此不是很安全，如：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    var rm_a = /a*/</span>.match(s)</span><br><span class="line">*<span class="regexp">/</span></span><br></pre></td></tr></table></figure><a id="more"></a><h3 id="标识符"><a href="#标识符" class="headerlink" title="标识符"></a>标识符</h3><p>标识符由一个字母开头，后面可选择性的加上一个或多个字母、数字或下划线。要避免保留字。</p><p>标识符被用于语句、变量、参数、属性名、运算符和标记。</p><h3 id="数字"><a href="#数字" class="headerlink" title="数字"></a>数字</h3><p>可以存在指数部分，100和1e2完全相等</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">100</span> === <span class="number">1e2</span> <span class="comment">// true</span></span><br></pre></td></tr></table></figure><p>使用<code>isNaN</code>来检测<code>NaN</code>。</p><h3 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h3><p>当年 JavaScript 被创建的时候，Unicode 是16位字符集，因此 JavaScript 字符串是16位的。</p><p>用双引号或单引号包裹。</p><p>重点说一下转义字符<code>\</code></p><p>反斜杠后面可以跟<code>&quot;</code>, <code>&#39;</code>, <code>\</code>, <code>/</code>, <code>b</code> (backspace), <code>f</code> (formfeed), <code>n</code>, <code>r</code> (carriage return), <code>t</code>, <code>u1234</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'A'</span> === <span class="string">'\u0041'</span> <span class="comment">// true</span></span><br></pre></td></tr></table></figure><h3 id="语句"><a href="#语句" class="headerlink" title="语句"></a>语句</h3><p>每个<code>&lt;script&gt;</code>标签的内容被一起抛到一个公共的全局名字空间中。</p><p><code>{...}</code>代码块不会创建新的作用域，因此变量应该被定义在函数的头部，而不是在代码块中。</p><p>下列值当做假：</p><ul><li><code>false</code></li><li><code>null</code></li><li><code>undefined</code></li><li><code>&#39;&#39;</code></li><li><code>0</code></li><li><code>NaN</code></li></ul><p>其他所有值都当做真</p><p><code>for in</code>语句枚举对象的所有属性名（键名），使用<code>object.hasOwnProperty(variable)</code>来确定这个属性名是该对象成员，还是来自原型链。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (myvar <span class="keyword">in</span> obj) &#123;</span><br><span class="line">    <span class="keyword">if</span> (obj.hasOwnProperty(myvar)) &#123;</span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="表达式"><a href="#表达式" class="headerlink" title="表达式"></a>表达式</h3><p>运算符优先级</p><table><thead><tr><th>运算符</th><th>说明</th></tr></thead><tbody><tr><td><code>.</code> <code>[]</code> <code>()</code></td><td>提取属性与调用函数</td></tr><tr><td><code>delete</code> <code>new</code> <code>typeof</code> <code>+</code> <code>-</code> <code>!</code></td><td>一元运算符</td></tr><tr><td><code>*</code> <code>/</code> <code>%</code></td><td></td></tr><tr><td><code>+</code> <code>-</code></td><td></td></tr><tr><td><code>&gt;=</code> <code>&lt;=</code> <code>&gt;</code> <code>&lt;</code></td><td></td></tr><tr><td><code>===</code> <code>!==</code></td><td></td></tr><tr><td><code>&amp;&amp;</code></td><td>逻辑与</td></tr><tr><td>`</td><td></td><td>`</td><td>逻辑或</td></tr><tr><td><code>?:</code></td><td>三目</td></tr></tbody></table><h3 id="字面量"><a href="#字面量" class="headerlink" title="字面量"></a>字面量</h3><p>对象字面量是一种可以方便地按指定规格创建新对象的表示法。</p><p>数组字面量是一种可以方便地按指定规格创建新数组的表示法。</p><h3 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h3><p>函数字面量定义了函数值。后续章节详谈。</p><h2 id="对象"><a href="#对象" class="headerlink" title="对象"></a>对象</h2><p>对象是属性的容器，每一个属性都拥有名字和值。属性的名字可以是包含空字符串在内的任意字符串。属性的值可以是除<code>undefined</code>值之外的任何值。</p><p>JavaScript 包含一种原型链的特性，允许对象继承另一个对象的属性。正确地使用它能减少对象初始化时消耗的时间和内存。</p><h3 id="对象字面量"><a href="#对象字面量" class="headerlink" title="对象字面量"></a>对象字面量</h3><p>一个对象字面量就是包围在一对花括号中的零或多个“名/值”对。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> empty_object = &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> stooge = &#123;</span><br><span class="line">    firstName: <span class="string">'Haoyang'</span>,</span><br><span class="line">    lastName: <span class="string">'Gao'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="检索"><a href="#检索" class="headerlink" title="检索"></a>检索</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(stooge.firstName); <span class="comment">// Haoyang</span></span><br><span class="line"><span class="built_in">console</span>.log(stooge[<span class="string">'firstName'</span>]); <span class="comment">// Haoyang</span></span><br></pre></td></tr></table></figure><p>不存在的属性返回<code>undefined</code>。</p><p>使用<code>||</code>来填充默认值。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(stooge.firstName || <span class="string">'Joe'</span>); <span class="comment">// Haoyang</span></span><br><span class="line"><span class="built_in">console</span>.log(stooge.age || <span class="number">25</span>); <span class="comment">// 25</span></span><br></pre></td></tr></table></figure><h3 id="更新"><a href="#更新" class="headerlink" title="更新"></a>更新</h3><p>直接使用赋值语句更新，若不存在这个属性，则作为扩充操作。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">stooge.firstName = <span class="string">'aaa'</span></span><br><span class="line">stooge.nickName = <span class="string">'peip'</span></span><br><span class="line"><span class="built_in">console</span>.log(stooge) <span class="comment">//Object &#123;firstName: "aaa", lastName: "Gao", nickName: "peip"&#125;</span></span><br></pre></td></tr></table></figure><h3 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h3><p>对象通过引用来传递他们永远不会被复制。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> x = stooge</span><br><span class="line">x.hair = <span class="string">'black'</span></span><br><span class="line">stooge.hair <span class="comment">//"black"</span></span><br></pre></td></tr></table></figure><h3 id="原型"><a href="#原型" class="headerlink" title="原型"></a>原型</h3><p>每一个对象都连接到一个原型对象，并且它可以从中继承属性。所有通过字面量创建的对象都连接到<code>Object.prototype</code>，它是JavaScript中的标配对象。</p><p>可以使用<code>Object.create()</code>方法创建一个使用原对象作为其原型的新对象。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> anotherStooge = <span class="built_in">Object</span>.create(stooge)</span><br><span class="line">anotherStooge.firstName <span class="comment">//"aaa"</span></span><br><span class="line">anotherStooge.firstName = <span class="string">'bbb'</span></span><br><span class="line">anotherStooge.firstName <span class="comment">//"bbb"</span></span><br><span class="line">anotherStooge.hair <span class="comment">//"black"</span></span><br></pre></td></tr></table></figure><p>新对象先查找自己的属性，若不存在则会向原型方向查找。</p><p><img src="http://ww1.sinaimg.cn/large/7011d6cfjw1f4ieu7focqj207h05caaf.jpg" alt=""></p><p>当我们对某个对象作出改变时，不会触及该对象的原型。</p><p>原型关系是一种动态关系。如果我们添加一个新的属性到原型中，该属性会立即对所有基于该原型创建的对象可见。</p><h3 id="反射"><a href="#反射" class="headerlink" title="反射"></a>反射</h3><p>在计算机科学中，反射是指计算机程序在运行时（Run time）可以访问、检测和修改它本身状态或行为的一种能力。</p><p>检查对象并确定对象有什么属性是很容易的事情，只要试着去检索该属性并验证取得的值。</p><p><code>typeof</code>用来确定对象属性的类型。</p><p><code>hasOwnProperty</code>，若对象拥有独有的属性，它将返回<code>true</code>。不会检查原型链。</p><h3 id="枚举"><a href="#枚举" class="headerlink" title="枚举"></a>枚举</h3><p>使用<code>for in</code>可以遍历一个对象中的所有属性名，包括原型链上的属性名。可以使用<code>hasOwnProperty</code>过滤原型链上的属性，使用<code>typeof</code>来排除函数。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> name <span class="keyword">in</span> anotherStooge) &#123;</span><br><span class="line">    <span class="keyword">if</span> (anotherStooge.hasOwnProperty(name) &amp;&amp; <span class="keyword">typeof</span> anotherStooge[name] !== <span class="string">'function'</span>) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(name + <span class="string">'---&gt;'</span> + anotherStooge[name])</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// firstName---&gt;bbb</span></span><br></pre></td></tr></table></figure><p>属性名是无序的，若想保持顺序应使用数组和<code>for</code>循环。</p><h3 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h3><p><code>delete</code>可以用来删除对象的属性。若对象包含该属性，则会被移除。它不会触及原型链中的任何对象。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">anotherStooge.firstName <span class="comment">//"bbb"</span></span><br><span class="line"><span class="keyword">delete</span> anotherStooge.firstName</span><br><span class="line">anotherStooge.firstName <span class="comment">//"aaa"</span></span><br></pre></td></tr></table></figure><h3 id="减少全局变量污染"><a href="#减少全局变量污染" class="headerlink" title="减少全局变量污染"></a>减少全局变量污染</h3><p>JavaScript 可以随意的定义全局变量来容纳应用的所有资源。但这会削弱程序的灵活性，应避免使用全局变量。</p><p>最小化使用全局变量的方法之一是为应用只创建一个唯一的全局变量。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> MYAPP = &#123;&#125;</span><br><span class="line"></span><br><span class="line">MYAPP.stooge = &#123;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">MYAPP.flight = &#123;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>下一章将使用闭包来进行信息隐藏，是另一种有效减少全局污染的方法。</p><h2 id="函数-1"><a href="#函数-1" class="headerlink" title="函数"></a>函数</h2><h3 id="函数对象"><a href="#函数对象" class="headerlink" title="函数对象"></a>函数对象</h3><p>JavaScript 中的函数就是对象。函数对象连接到<code>Function.prototype</code>（该原型对象本身连接到<code>Object.prototype</code>）。每个函数对象在创建时会附加两个隐藏属性：函数的上下文和实现函数行为的代码。</p><p>函数对象在创建时也随配有一个<code>prototype</code>属性。它的值是一个拥有<code>constructor</code>属性且值即为该函数对象。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a + b</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="http://ww1.sinaimg.cn/large/7011d6cfjw1f4lrei2b3pj208f06et95.jpg" alt=""></p><p>因为函数是对象，所以可以像任何其他的值一样被使用。函数可以保存在变量、对象和数组中。函数可以被当做参数传递给其他函数，函数也可以再返回函数。函数也可以拥有方法。</p><p>函数的与众不同之处在于可以被调用。</p><h3 id="函数字面量"><a href="#函数字面量" class="headerlink" title="函数字面量"></a>函数字面量</h3><p>函数对象通过函数字面量来创建。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> add = <span class="function"><span class="keyword">function</span>(<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a + b</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>函数字面量包含4部分，分别是：保留字 function、函数名、参数、花括号中的语句。</p><h3 id="调用"><a href="#调用" class="headerlink" title="调用"></a>调用</h3><p>调用一个函数会暂停当前函数的执行，传递控制权和参数给新函数。除了声明时定义的形式参数，还有两个附加参数：<code>this</code>和<code>arguments</code>。参数<code>this</code>在面向对象编程中非常重要，它的值取决于调用的模式。JavaScript中一共有4中调用模式：方法调用模式、函数调用模式、构造器调用模式、apply调用模式。</p><p>实参和形参个数不匹配时，不会有运行时错误。实参过多时，超出的实参被忽略。形参过多时，缺失的值被替换为<code>undefined</code>。</p><h4 id="方法调用模式"><a href="#方法调用模式" class="headerlink" title="方法调用模式"></a>方法调用模式</h4><p>当一个函数被保存为对象的一个属性时，我们称它为一个方法。当一个方法被调用时，<code>this</code>被绑定到该对象。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> myObject = &#123;</span><br><span class="line">    value: <span class="number">0</span>,</span><br><span class="line">    increment: <span class="function"><span class="keyword">function</span>(<span class="params">inc</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.value += <span class="keyword">typeof</span> inc === <span class="string">'number'</span> ? inc : <span class="number">1</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">myObject.increment()</span><br><span class="line"><span class="built_in">console</span>.log(myObject.value) <span class="comment">//1</span></span><br><span class="line"></span><br><span class="line">myObject.increment(<span class="number">3</span>)</span><br><span class="line"><span class="built_in">console</span>.log(myObject.value) <span class="comment">//4</span></span><br></pre></td></tr></table></figure><h4 id="函数调用模式"><a href="#函数调用模式" class="headerlink" title="函数调用模式"></a>函数调用模式</h4><p>当一个函数并非一个对象的属性时，那么它就是被当做一个函数来调用的。</p><p>此时<code>this</code>被绑定到全局对象。即时是内部函数也会将<code>this</code>绑定到全局对象。</p><p>可以在函数内创建一个属性并赋值为<code>this</code>来解决这个问题。如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> add = <span class="function"><span class="keyword">function</span>(<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a + b</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">myObject.double = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> that = <span class="keyword">this</span></span><br><span class="line">    <span class="keyword">var</span> helper = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        that.value = add(that.value, that.value)</span><br><span class="line">    &#125;</span><br><span class="line">    helper()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">myObject.double()</span><br><span class="line"><span class="built_in">console</span>.log(myObject.value) <span class="comment">//8</span></span><br></pre></td></tr></table></figure><h4 id="构造器调用模式"><a href="#构造器调用模式" class="headerlink" title="构造器调用模式"></a>构造器调用模式</h4><p>JavaScript是一门基于原型继承的语言。对象可以直接从其他对象继承属性。该语言是无类型的。</p><p>如果在一个函数前面带上<code>new</code>来调用，那么背地里将会创建一个连接到该函数的<code>prototype</code>成员的新对象，同时<code>this</code>会被绑定到那个新对象上。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//创建构造器函数</span></span><br><span class="line"><span class="keyword">var</span> Quo = <span class="function"><span class="keyword">function</span>(<span class="params">string</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.status = string</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//给Que的所有实例提供一个公共方法</span></span><br><span class="line">Quo.prototype.getStatus = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.status</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//实例化</span></span><br><span class="line"><span class="keyword">var</span> myQuo = <span class="keyword">new</span> Quo(<span class="string">'confused'</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(myQuo.getStatus()) <span class="comment">//confused</span></span><br></pre></td></tr></table></figure><p>书中不推荐这种形式的构造器函数，下一章有更好的解决方案。</p><h4 id="Apply-调用模式"><a href="#Apply-调用模式" class="headerlink" title="Apply 调用模式"></a>Apply 调用模式</h4><p><code>apply</code>方法让我们构建一个参数数组传递给调用函数。他也允许我们选择<code>this</code>的值。<code>apply</code>方法接受两个参数，第一个是要绑定给<code>this</code>的值，第二个是参数数组。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">3</span>, <span class="number">4</span>]</span><br><span class="line"><span class="keyword">var</span> sum = add.apply(<span class="literal">null</span>, arr)</span><br><span class="line"><span class="built_in">console</span>.log(sum) <span class="comment">//7</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> statusObject = &#123;</span><br><span class="line">    status: <span class="string">'hello'</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> status = Quo.prototype.getStatus.apply(statusObject)</span><br><span class="line"><span class="built_in">console</span>.log(status) <span class="comment">//hello</span></span><br></pre></td></tr></table></figure><h3 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h3><p>当函数被调用时，会得到一个<code>arguments</code>数组。通过此参数可以访问所有它被调用时传递给它的参数列表，包括那些没有被分配给函数声明时定义的形参的多余参数。这使得编写一个无须指定参数个数的函数成为可能。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> sum = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> i, sum = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="built_in">arguments</span>.length; i++) &#123;</span><br><span class="line">        sum += <span class="built_in">arguments</span>[i]</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> sum</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(sum(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>)) <span class="comment">//45</span></span><br></pre></td></tr></table></figure><p>因语言的设计错误，<code>arguments</code>并不是一个真正的数组。是一个“类似数组”的对象。有<code>length</code>属性，但没有任何数组的方法。</p><h3 id="返回"><a href="#返回" class="headerlink" title="返回"></a>返回</h3><p>函数执行时遇到关闭函数体的<code>}</code>时结束。然后把控制权交还给调用该函数的程序。</p><p><code>return</code>可以使函数提前返回，不在执行余下的语句。</p><p>函数总是会返回一个值，若没有指定，则返回<code>undefined</code>。</p><p>若函数调用时在前面加上了<code>new</code>前缀，且返回值不是一个对象的时候，则返回<code>this</code>（该新对象）。</p><h3 id="异常"><a href="#异常" class="headerlink" title="异常"></a>异常</h3><p>异常是干扰程序的正常流畅的不寻常的事故。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> add2 = <span class="function"><span class="keyword">function</span>(<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> a !== <span class="string">'number'</span> || <span class="keyword">typeof</span> b !== <span class="string">'number'</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> &#123;</span><br><span class="line">            name: <span class="string">'TypeError'</span>,</span><br><span class="line">            message: <span class="string">'add needs numbers'</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> a + b</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(add2(<span class="number">2</span>, <span class="number">3</span>)) <span class="comment">//5</span></span><br><span class="line"><span class="built_in">console</span>.log(add2(<span class="string">'a'</span>, <span class="number">6</span>))</span><br></pre></td></tr></table></figure><p><img src="http://ww1.sinaimg.cn/large/7011d6cfjw1f4mprafcvhj20ml00xjrj.jpg" alt=""></p><p><code>throw</code>语句中断函数的执行。抛出一个<code>exception</code>对象，该对象包含一个用来识别异常类型的<code>name</code>属性和一个描述性的<code>message</code>属性。也可以自定义其他属性。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> try_it = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        add2(<span class="string">'a'</span>)</span><br><span class="line">    &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(e.name + <span class="string">': '</span> + e.message)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">try_it() <span class="comment">//TypeError: add needs numbers</span></span><br></pre></td></tr></table></figure><p>如果在<code>try</code>代码块内抛出一个异常，控制权就会跳转到它的<code>catch</code>语句中。</p><h3 id="扩充类型的功能"><a href="#扩充类型的功能" class="headerlink" title="扩充类型的功能"></a>扩充类型的功能</h3><p>JavaScript 允许给语言的基本类型扩充功能。通过<code>Object.prototype</code>添加方法，可以让该方法对所有对象都适用。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 先添加方法使得该方法对所有函数可用</span></span><br><span class="line"><span class="built_in">Function</span>.prototype.method = <span class="function"><span class="keyword">function</span>(<span class="params">name, func</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.prototype[name] = func</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//添加一个取整方法</span></span><br><span class="line"><span class="built_in">Number</span>.method(<span class="string">'integer'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Math</span>[<span class="keyword">this</span> &lt; <span class="number">0</span> ? <span class="string">'ceil'</span> : <span class="string">'floor'</span>](<span class="keyword">this</span>)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="built_in">console</span>.log((<span class="number">-10</span> / <span class="number">3</span>).integer()) <span class="comment">//-3</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//添加 trim()</span></span><br><span class="line"><span class="built_in">String</span>.method(<span class="string">'trim'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.replace(<span class="regexp">/^\s+|\s+$/g</span>, <span class="string">''</span>)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'  hello alibaba  '</span>.trim()) <span class="comment">//hello alibaba</span></span><br></pre></td></tr></table></figure><p>JavaScript 原型继承是动态的，因此新的方法立刻被赋予到所有的对象实例上，即使对象实例是在方法被增加之前就创建好了。</p><h3 id="递归"><a href="#递归" class="headerlink" title="递归"></a>递归</h3><p>递归函数就是会直接或者间接地调用自身的一种函数。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> walkTheDom = <span class="function"><span class="keyword">function</span> <span class="title">walk</span>(<span class="params">node, func</span>) </span>&#123;</span><br><span class="line">    func(node)</span><br><span class="line">    node = node.firstChild</span><br><span class="line">    <span class="keyword">while</span> (node) &#123;</span><br><span class="line">        walk(node, func)</span><br><span class="line">        node = node.nextSibling</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> getElementsByAttribute = <span class="function"><span class="keyword">function</span>(<span class="params">att, value</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> results = []</span><br><span class="line">    walkTheDom(<span class="built_in">document</span>.body, <span class="function"><span class="keyword">function</span>(<span class="params">node</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> actual = node.nodeType === <span class="number">1</span> &amp;&amp; node.getAttribute(att)</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">typeof</span> actual === <span class="string">'string'</span> &amp;&amp; (actual === value || <span class="keyword">typeof</span> value !== <span class="string">'string'</span>)) &#123;</span><br><span class="line">            results.push(node)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">return</span> results</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//在知乎主页上操作</span></span><br><span class="line"><span class="built_in">console</span>.log(getElementsByAttribute(<span class="string">'data-za-module'</span>, <span class="string">'AnswerItem'</span>))</span><br><span class="line"><span class="comment">//得到下列数据</span></span><br><span class="line"><span class="comment">//[div.feed-content, div.feed-content, div.feed-content, div.feed-content, div.feed-content, div.feed-content, div.feed-content]</span></span><br></pre></td></tr></table></figure><h3 id="作用域"><a href="#作用域" class="headerlink" title="作用域"></a>作用域</h3><p>作用域控制着变量与参数的可见性及生命周期。它减少了名称冲突，并提供了自动内存管理。</p><p>无块级作用域。</p><p>有函数作用域。</p><p>建议在函数体的顶部声明函数中可能用到的所有变量。</p><h3 id="闭包"><a href="#闭包" class="headerlink" title="闭包"></a>闭包</h3><p>作用域的好处是内部函数可以访问定义他们的外部函数的参数和变量（除了<code>this</code>和<code>arguments</code>）。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> quo = <span class="function"><span class="keyword">function</span>(<span class="params">status</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        get_status: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> status</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> myQuo = quo(<span class="string">'amazed'</span>)</span><br><span class="line"><span class="built_in">console</span>.log(myQuo.get_status()) <span class="comment">//amazed</span></span><br></pre></td></tr></table></figure><p>狭义的说，返回的那个对象即闭包，它里面的方法可以访问它被创建时所处的上下文环境。</p><p>避免在循环中创建函数，容易引起混淆。可以现在循环之外创建一个辅助函数，让辅助函数在返回一个绑定了当前<code>i</code>值的函数，这样就不会导致混淆了。</p><h3 id="回调"><a href="#回调" class="headerlink" title="回调"></a>回调</h3><p>将一个函数作为参数，一旦接收到响应，再调用这个函数。</p><h3 id="模块"><a href="#模块" class="headerlink" title="模块"></a>模块</h3><p>可以用函数和闭包构造模块。</p><p>模块模式的一般形式是：一个定义了私有变量和函数的函数；利用闭包创建可以访问私有变量和函数的特权函数；最后返回这个特权函数，或者把他们保存到一个可访问到的地方。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> numberCal = (<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> half = <span class="function"><span class="keyword">function</span>(<span class="params">n</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> n / <span class="number">2</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> double = <span class="function"><span class="keyword">function</span>(<span class="params">n</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> n * <span class="number">2</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> tribble = <span class="function"><span class="keyword">function</span>(<span class="params">n</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> n * <span class="number">3</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        half: half,</span><br><span class="line">        double: double,</span><br><span class="line">        tribble: tribble</span><br><span class="line">    &#125;</span><br><span class="line">&#125;())</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(numberCal.half(<span class="number">5</span>)) <span class="comment">//2.5</span></span><br><span class="line"><span class="built_in">console</span>.log(numberCal.half(<span class="number">6</span>)) <span class="comment">//3</span></span><br><span class="line"><span class="built_in">console</span>.log(numberCal.double(<span class="number">7</span>)) <span class="comment">//14</span></span><br><span class="line"><span class="built_in">console</span>.log(numberCal.tribble(<span class="number">7</span>)) <span class="comment">//21</span></span><br></pre></td></tr></table></figure><h3 id="级联"><a href="#级联" class="headerlink" title="级联"></a>级联</h3><p>如果让方法返回<code>this</code>而不是默认的<code>undefined</code>，就可以启用级联，即连续调用。</p><h3 id="柯里化"><a href="#柯里化" class="headerlink" title="柯里化"></a>柯里化</h3><p>柯里化允许我们把函数与传递给它的参数相结合，产生出一个新的函数。</p><h3 id="记忆"><a href="#记忆" class="headerlink" title="记忆"></a>记忆</h3><p>函数可以将先前操作的结果记录在某个对象里，从而避免无谓的重复运算。这种优化被称为记忆（memoization）。</p>]]></content>
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 面向对象 </tag>
            
            <tag> 函数 </tag>
            
            <tag> 闭包 </tag>
            
            <tag> 对象 </tag>
            
            <tag> this </tag>
            
            <tag> 作用域 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Markdown 语法和 MWeb 写作使用说明</title>
      <link href="//2018/Markdown%20%E8%AF%AD%E6%B3%95%E5%92%8C%20MWeb%20%E5%86%99%E4%BD%9C%E4%BD%BF%E7%94%A8%E8%AF%B4%E6%98%8E.html"/>
      <url>//2018/Markdown%20%E8%AF%AD%E6%B3%95%E5%92%8C%20MWeb%20%E5%86%99%E4%BD%9C%E4%BD%BF%E7%94%A8%E8%AF%B4%E6%98%8E.html</url>
      <content type="html"><![CDATA[<h2 id="Markdown-的设计哲学"><a href="#Markdown-的设计哲学" class="headerlink" title="Markdown 的设计哲学"></a>Markdown 的设计哲学</h2><blockquote><p>Markdown 的目標是實現「易讀易寫」。<br>不過最需要強調的便是它的可讀性。一份使用 Markdown 格式撰寫的文件應該可以直接以純文字發佈，並且看起來不會像是由許多標籤或是格式指令所構成。<br>Markdown 的語法有個主要的==目的==：用來作為一種網路內容的<em>寫作</em>用語言。</p></blockquote><h2 id="换行"><a href="#换行" class="headerlink" title="换行"></a>换行</h2><p>四个及以上空格加回车。<br>如果不想打这么多空格，只要回车就为换行，请勾<code>Preferences</code>- <code>Themes</code> - <code>Translate newlines to &lt;br&gt; tags</code></p><h2 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h2><h3 id="无序列表"><a href="#无序列表" class="headerlink" title="无序列表"></a>无序列表</h3><p>Markdown 语法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">* 项目一 无序列表 `* + 空格键`</span><br><span class="line">* 项目二</span><br><span class="line">* 项目二的子项目一 无序列表 `TAB + * + 空格键`</span><br><span class="line">* 项目二的子项目二</span><br></pre></td></tr></table></figure> <a id="more"></a><p>在 MWeb 中的快捷键为： <code>Option + U</code><br>效果如下：</p><ul><li>项目一 无序列表 <code>* + 空格键</code></li><li>项目二<ul><li>项目二的子项目一 无序列表 <code>TAB + * + 空格键</code></li><li>项目二的子项目二</li></ul></li></ul><h3 id="有序列表"><a href="#有序列表" class="headerlink" title="有序列表"></a>有序列表</h3><p>Markdown 语法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">1. 项目一 有序列表 `数字 + . + 空格键`</span><br><span class="line">2. 项目二 </span><br><span class="line">3. 项目三</span><br><span class="line">1. 项目三的子项目一 有序列表 `TAB + 数字 + . + 空格键`</span><br><span class="line">2. 项目三的子项目二</span><br></pre></td></tr></table></figure><p>效果如下：</p><ol><li>项目一 有序列表 <code>数字 + . + 空格键</code></li><li>项目二 </li><li>项目三<ol><li>项目三的子项目一 有序列表 <code>TAB + 数字 + . + 空格键</code></li><li>项目三的子项目二</li></ol></li></ol><h3 id="列表中嵌入代码块语法"><a href="#列表中嵌入代码块语法" class="headerlink" title="列表中嵌入代码块语法"></a>列表中嵌入代码块语法</h3><pre><code>1. 项目一 有序列表 `数字 + . + 空格键`    列表中嵌入代码块必须前后空一行，如这个写法    <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fancyAlert</span>(<span class="params">arg</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(arg) &#123;</span><br><span class="line">    $.facebox(&#123;<span class="attr">div</span>:<span class="string">'#foo'</span>&#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>    其他文本。2. 项目二</code></pre><h3 id="任务列表（Task-lists）"><a href="#任务列表（Task-lists）" class="headerlink" title="任务列表（Task lists）"></a>任务列表（Task lists）</h3><p>Markdown 语法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">- [ ] 任务一 未做任务 `- + 空格 + [ ]`</span><br><span class="line">- [x] 任务二 已做任务 `- + 空格 + [x]`</span><br></pre></td></tr></table></figure><p>效果如下：</p><ul><li style="list-style: none"><input type="checkbox"> 任务一 未做任务 <code>- + 空格 + [ ]</code></li><li style="list-style: none"><input type="checkbox" checked> 任务二 已做任务 <code>- + 空格 + [x]</code></li></ul><h2 id="图片"><a href="#图片" class="headerlink" title="图片"></a>图片</h2><p>Markdown 语法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">![GitHub set up](http://zh.mweb.im/asset/img/set-up-git.gif)</span><br><span class="line">格式: ![Alt Text](url)</span><br></pre></td></tr></table></figure><p><code>Control + Shift + I</code> 可插入Markdown语法。<br>如果是 MWeb 的文档库中的文档，还可以用拖放图片、<code>CMD + V</code> 粘贴、<code>CMD + Option + I</code> 导入这三种方式来增加图片。<br>效果如下：</p><p><img src="http://zh.mweb.im/asset/img/set-up-git.gif" alt="GitHub set up"></p><p>MWeb 引入的特别的语法来设置图片宽度，方法是在图片描述后加 <code>-w + 图片宽度</code> 即可，比如说要设置上面的图片的宽度为 140，语法如为 <code>![GitHub-w140](set-up-git.gif)</code>：</p><p><img src="http://zh.mweb.im/asset/img/set-up-git.gif" alt="GitHub set up-w140"></p><h2 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h2><p>Markdown 语法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">email &lt;example@example.com&gt;</span><br><span class="line">[GitHub](http://github.com)</span><br><span class="line">自动生成连接  &lt;http://www.github.com/&gt;</span><br></pre></td></tr></table></figure><p><code>Control + Shift + L</code> 可插入Markdown语法。<br>如果是 MWeb 的文档库中的文档，拖放或<code>CMD + Option + I</code> 导入非图片时，会生成连接。<br>效果如下：</p><p>Email 连接： <a href="mailto:&#101;&#120;&#x61;&#x6d;&#112;&#x6c;&#101;&#64;&#101;&#120;&#x61;&#109;&#112;&#x6c;&#101;&#x2e;&#99;&#111;&#x6d;" target="_blank" rel="noopener">&#101;&#120;&#x61;&#x6d;&#112;&#x6c;&#101;&#64;&#101;&#120;&#x61;&#109;&#112;&#x6c;&#101;&#x2e;&#99;&#111;&#x6d;</a><br><a href="http://github.com" target="_blank" rel="noopener">连接标题Github网站</a><br>自动生成连接像： <a href="http://www.github.com/" target="_blank" rel="noopener">http://www.github.com/</a> 这样</p><h2 id="区块引用"><a href="#区块引用" class="headerlink" title="区块引用"></a>区块引用</h2><p>Markdown 语法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">某某说:</span><br><span class="line">&gt; 第一行引用</span><br><span class="line">&gt; 第二行费用文字</span><br></pre></td></tr></table></figure><p><code>CMD + Shift + B</code> 可插入Markdown语法。<br>效果如下：</p><p>某某说:</p><blockquote><p>第一行引用<br>第二行费用文字</p></blockquote><h2 id="行内代码"><a href="#行内代码" class="headerlink" title="行内代码"></a>行内代码</h2><p>Markdown 语法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">像这样即可：`&lt;addr&gt;` `code`</span><br></pre></td></tr></table></figure><p><code>CMD + K</code> 可插入Markdown语法。<br>效果如下：</p><p>像这样即可：<code>&lt;addr&gt;</code> <code>code</code></p><h2 id="多行或者一段代码"><a href="#多行或者一段代码" class="headerlink" title="多行或者一段代码"></a>多行或者一段代码</h2><p>Markdown 语法：</p><pre><code><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fancyAlert</span>(<span class="params">arg</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(arg) &#123;</span><br><span class="line">    $.facebox(&#123;<span class="attr">div</span>:<span class="string">'#foo'</span>&#125;)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></code></pre><p><code>CMD + Shift + K</code> 可插入Markdown语法。<br>效果如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fancyAlert</span>(<span class="params">arg</span>) </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(arg) &#123;</span><br><span class="line">$.facebox(&#123;<span class="attr">div</span>:<span class="string">'#foo'</span>&#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="顺序图或流程图"><a href="#顺序图或流程图" class="headerlink" title="顺序图或流程图"></a>顺序图或流程图</h2><p>Markdown 语法：</p><pre><code><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">张三-&gt;李四: 嘿，小四儿, 写博客了没?</span><br><span class="line">Note right of 李四: 李四愣了一下，说：</span><br><span class="line">李四--&gt;张三: 忙得吐血，哪有时间写。</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">st=&gt;start: 开始</span><br><span class="line">e=&gt;end: 结束</span><br><span class="line">op=&gt;operation: 我的操作</span><br><span class="line">cond=&gt;condition: 确认？</span><br><span class="line"></span><br><span class="line">st-&gt;op-&gt;cond</span><br><span class="line">cond(yes)-&gt;e</span><br><span class="line">cond(no)-&gt;op</span><br></pre></td></tr></table></figure></code></pre><p>效果如下（ <code>Preferences</code> - <code>Themes</code> - <code>Enable sequence &amp; flow chart</code> 才会看到效果 ）：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">张三-&gt;李四: 嘿，小四儿, 写博客了没?</span><br><span class="line">Note right of 李四: 李四愣了一下，说：</span><br><span class="line">李四--&gt;张三: 忙得吐血，哪有时间写。</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">st=&gt;start: 开始</span><br><span class="line">e=&gt;end: 结束</span><br><span class="line">op=&gt;operation: 我的操作</span><br><span class="line">cond=&gt;condition: 确认？</span><br><span class="line"></span><br><span class="line">st-&gt;op-&gt;cond</span><br><span class="line">cond(yes)-&gt;e</span><br><span class="line">cond(no)-&gt;op</span><br></pre></td></tr></table></figure><p>更多请参考：<a href="http://bramp.github.io/js-sequence-diagrams/" target="_blank" rel="noopener">http://bramp.github.io/js-sequence-diagrams/</a>, <a href="http://adrai.github.io/flowchart.js/" target="_blank" rel="noopener">http://adrai.github.io/flowchart.js/</a></p><h2 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h2><p>Markdown 语法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">第一格表头 | 第二格表头</span><br><span class="line">--------- | -------------</span><br><span class="line">内容单元格 第一列第一格 | 内容单元格第二列第一格</span><br><span class="line">内容单元格 第一列第二格 多加文字 | 内容单元格第二列第二格</span><br></pre></td></tr></table></figure><p>效果如下：</p><table><thead><tr><th>第一格表头</th><th>第二格表头</th></tr></thead><tbody><tr><td>内容单元格 第一列第一格</td><td>内容单元格第二列第一格</td></tr><tr><td>内容单元格 第一列第二格 多加文字</td><td>内容单元格第二列第二格</td></tr></tbody></table><h2 id="删除线"><a href="#删除线" class="headerlink" title="删除线"></a>删除线</h2><p>Markdown 语法：</p><pre><code>加删除线像这样用： ~~删除这些~~</code></pre><p>效果如下：</p><p>加删除线像这样用： <del>删除这些</del></p><h2 id="分隔线"><a href="#分隔线" class="headerlink" title="分隔线"></a>分隔线</h2><p>以下三种方式都可以生成分隔线：</p><pre><code>********- - -</code></pre><p>效果如下：</p><hr><hr><hr><h2 id="MathJax"><a href="#MathJax" class="headerlink" title="MathJax"></a>MathJax</h2><p>Markdown 语法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">块级公式：</span><br><span class="line">$$x = \dfrac&#123;-b \pm \sqrt&#123;b^2 - 4ac&#125;&#125;&#123;2a&#125; $$</span><br><span class="line"></span><br><span class="line">\\[ \frac&#123;1&#125;&#123;\Bigl(\sqrt&#123;\phi \sqrt&#123;5&#125;&#125;-\phi\Bigr) e^&#123;\frac25 \pi&#125;&#125; =</span><br><span class="line">1+\frac&#123;e^&#123;-2\pi&#125;&#125; &#123;1+\frac&#123;e^&#123;-4\pi&#125;&#125; &#123;1+\frac&#123;e^&#123;-6\pi&#125;&#125;</span><br><span class="line">&#123;1+\frac&#123;e^&#123;-8\pi&#125;&#125; &#123;1+\ldots&#125; &#125; &#125; &#125; \\]</span><br><span class="line"></span><br><span class="line">行内公式： $\Gamma(n) = (n-1)!\quad\forall n\in\mathbb N$</span><br></pre></td></tr></table></figure><p>效果如下（<code>Preferences</code> - <code>Themes</code> - <code>Enable MathJax</code> 才会看到效果）：</p><p>块级公式：<br>$$    x = \dfrac{-b \pm \sqrt{b^2 - 4ac}}{2a} $$</p><p>$$<br>\frac{1}{\Bigl(\sqrt{\phi \sqrt{5}}-\phi\Bigr) e^{\frac25 \pi}} =</p><p>1+\frac{e^{-2\pi}} {1+\frac{e^{-4\pi}} {1+\frac{e^{-6\pi}}</p><p>{1+\frac{e^{-8\pi}} {1+\ldots} } } } \<br>$$<br>行内公式： $\Gamma(n) = (n-1)!\quad\forall n\in\mathbb N$</p><h2 id="脚注（Footnote）"><a href="#脚注（Footnote）" class="headerlink" title="脚注（Footnote）"></a>脚注（Footnote）</h2><p>Markdown 语法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">这是一个脚注：[^sample_footnote]</span><br></pre></td></tr></table></figure><p>效果如下：</p><p>这是一个脚注：[^s]</p><h2 id="注释和阅读更多"><a href="#注释和阅读更多" class="headerlink" title="注释和阅读更多"></a>注释和阅读更多</h2><!-- comment --><!-- more --><p>Actions-&gt;Insert Read More Comment <em>或者</em> <code>Command + .</code><br><strong>注</strong> 阅读更多的功能只用在生成网站或博客时，插入时注意要后空一行。</p><h2 id="TOC"><a href="#TOC" class="headerlink" title="TOC"></a>TOC</h2><p>Markdown 语法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[TOC]</span><br></pre></td></tr></table></figure><p>效果如下：</p><p>[TOC]</p><h2 id="本文约定"><a href="#本文约定" class="headerlink" title="本文约定"></a>本文约定</h2><p>如果有写 <code>效果如下：</code>， 在 MWeb 编辑状态下只有用 <code>CMD + 4</code> 或 <code>CMD + R</code> 预览才可以看效果。</p><h2 id="标题"><a href="#标题" class="headerlink" title="标题"></a>标题</h2><p>Markdown 语法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># 第一级标题 `&lt;h1&gt;` </span><br><span class="line">## 第二级标题 `&lt;h2&gt;` </span><br><span class="line">### 第三级标题 `&lt;h3&gt;` </span><br><span class="line">#### 第四级标题 `&lt;h4&gt;` </span><br><span class="line">##### 第五级标题 `&lt;h5&gt;` </span><br><span class="line">###### 第六级标题 `&lt;h6&gt;`</span><br></pre></td></tr></table></figure><p>效果如下：</p><h1 id="第一级标题-lt-h1-gt"><a href="#第一级标题-lt-h1-gt" class="headerlink" title="第一级标题 &lt;h1&gt;"></a>第一级标题 <code>&lt;h1&gt;</code></h1><h2 id="第二级标题-lt-h2-gt"><a href="#第二级标题-lt-h2-gt" class="headerlink" title="第二级标题 &lt;h2&gt;"></a>第二级标题 <code>&lt;h2&gt;</code></h2><h3 id="第三级标题-lt-h3-gt"><a href="#第三级标题-lt-h3-gt" class="headerlink" title="第三级标题 &lt;h3&gt;"></a>第三级标题 <code>&lt;h3&gt;</code></h3><h4 id="第四级标题-lt-h4-gt"><a href="#第四级标题-lt-h4-gt" class="headerlink" title="第四级标题 &lt;h4&gt;"></a>第四级标题 <code>&lt;h4&gt;</code></h4><h5 id="第五级标题-lt-h5-gt"><a href="#第五级标题-lt-h5-gt" class="headerlink" title="第五级标题 &lt;h5&gt;"></a>第五级标题 <code>&lt;h5&gt;</code></h5><h6 id="第六级标题-lt-h6-gt"><a href="#第六级标题-lt-h6-gt" class="headerlink" title="第六级标题 &lt;h6&gt;"></a>第六级标题 <code>&lt;h6&gt;</code></h6><h2 id="强调"><a href="#强调" class="headerlink" title="强调"></a>强调</h2><p>Markdown 语法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">*这些文字会生成`&lt;em&gt;`*</span><br><span class="line">_这些文字会生成`&lt;u&gt;`_</span><br><span class="line"></span><br><span class="line">**这些文字会生成`&lt;strong&gt;`**</span><br><span class="line">__这些文字会生成`&lt;strong&gt;`__</span><br></pre></td></tr></table></figure><p>在 MWeb 中的快捷键为： <code>CMD + U</code>、<code>CMD + I</code>、<code>CMD + B</code><br>效果如下：</p><p><em>这些文字会生成<code>&lt;em&gt;</code></em><br><em>这些文字会生成<code>&lt;u&gt;</code></em></p><p><strong>这些文字会生成<code>&lt;strong&gt;</code></strong><br><strong>这些文字会生成<code>&lt;strong&gt;</code></strong></p><p>[^s]: </p>]]></content>
      
      <categories>
          
          <category> Markdown </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Markdown </tag>
            
            <tag> MWeb </tag>
            
            <tag> 语法 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>工具</title>
      <link href="//2018/%E5%B7%A5%E5%85%B7.html"/>
      <url>//2018/%E5%B7%A5%E5%85%B7.html</url>
      <content type="html"><![CDATA[<h2 id="编程语言"><a href="#编程语言" class="headerlink" title="编程语言"></a>编程语言</h2><h3 id="JavaScript"><a href="#JavaScript" class="headerlink" title="JavaScript"></a>JavaScript</h3><ul><li><p><a href="http://javascript.ruanyifeng.com/" target="_blank" rel="noopener">JavaScript 标准参考教程（alpha） -阮一峰</a></p></li><li><p><a href="http://liubin.org/promises-book/" target="_blank" rel="noopener">JavaScript Promise迷你书 -azu</a></p></li><li><p><a href="https://github.com/getify/You-Dont-Know-JS" target="_blank" rel="noopener">You Don’t Know JS (book series)</a></p></li><li><p><a href="https://github.com/oneuijs/You-Dont-Need-jQuery/blob/master/README.zh-CN.md" target="_blank" rel="noopener">You Don’t Need jQuery</a></p><p>  前端发展很快，现代浏览器原生 API 已经足够好用。我们并不需要为了操作 DOM、Event 等再学习一下 jQuery 的 API。同时由于 React、Angular、Vue 等框架的流行，直接操作 DOM 不再是好的模式，jQuery 使用场景大大减少。本项目总结了大部分 jQuery API 替代的方法，暂时只支持 IE10+ 以上浏览器。</p></li></ul><ul><li><a href="http://youmightnotneedjqueryplugins.com/" target="_blank" rel="noopener">YOU MIGHT NOT NEED JQUERY PLUGINS</a></li></ul><ul><li><p><a href="http://bonsaiden.github.io/JavaScript-Garden/zh/" target="_blank" rel="noopener">JavaScript 秘密花园</a></p></li><li><p><a href="http://www.alloyteam.com/2012/10/common-javascript-design-patterns/" target="_blank" rel="noopener">JavaScript 设计模式 系列 AlloyTeam</a></p><a id="more"></a><h3 id="ES2015"><a href="#ES2015" class="headerlink" title="ES2015"></a>ES2015</h3></li></ul><ul><li><a href="https://tc39.github.io/ecma262/" target="_blank" rel="noopener">https://tc39.github.io/ecma262/</a></li></ul><ul><li><p><a href="http://www.ecma-international.org/ecma-262/6.0/" target="_blank" rel="noopener">http://www.ecma-international.org/ecma-262/6.0/</a></p><p>  ES2015规范</p></li></ul><ul><li><p><a href="http://es6katas.org/" target="_blank" rel="noopener">http://es6katas.org/</a></p><p>  Learn ES6 by doing it. Fix failing tests. Keep all learnings.</p></li></ul><ul><li><p><a href="http://segmentfault.com/a/1190000004365693" target="_blank" rel="noopener">30分钟掌握ES6/ES2015核心内容（上）</a></p></li><li><p><a href="http://segmentfault.com/a/1190000004368132" target="_blank" rel="noopener">30分钟掌握ES6/ES2015核心内容（下）</a></p></li><li><p><a href="https://github.com/ruanyf/es6tutorial" target="_blank" rel="noopener">《ECMAScript 6入门》 -阮一峰</a></p></li><li><p><a href="https://github.com/ouvens/es6-code-style-guide" target="_blank" rel="noopener">EcmaScript6 全规范（含node） -ouvens</a></p></li></ul><h3 id="NodeJS"><a href="#NodeJS" class="headerlink" title="NodeJS"></a>NodeJS</h3><ul><li><a href="https://nqdeng.github.io/7-days-nodejs" target="_blank" rel="noopener">七天学会NodeJS -Nanqiao Deng</a></li></ul><h2 id="框架-amp-脚手架"><a href="#框架-amp-脚手架" class="headerlink" title="框架&amp;脚手架"></a>框架&amp;脚手架</h2><h3 id="webpack"><a href="#webpack" class="headerlink" title="webpack"></a>webpack</h3><ul><li><p><a href="https://www.gitbook.com/book/zhaoda/webpack/details" target="_blank" rel="noopener">Webpack 中文指南 -赵达</a></p></li><li><p><a href="http://zhuanlan.zhihu.com/FrontendMagazine/20367175" target="_blank" rel="noopener">Webpack傻瓜式指南（一） -前端外刊评论 知乎专栏</a></p></li><li><p><a href="http://zhuanlan.zhihu.com/FrontendMagazine/20397902" target="_blank" rel="noopener">Webpack傻瓜指南（二）开发和部署技巧 -前端外刊评论 知乎专栏</a></p></li><li><p><a href="http://zhuanlan.zhihu.com/FrontendMagazine/20522487" target="_blank" rel="noopener">Webpack傻瓜指南（三）和React配合开发 -前端外刊评论 知乎专栏</a></p><p>  上述傻瓜指南的原始出处 <a href="https://github.com/vikingmute/webpack-for-fools" target="_blank" rel="noopener">https://github.com/vikingmute/webpack-for-fools</a> Webpack傻瓜式指南</p></li><li><p><a href="http://www.html-js.com/article/3009" target="_blank" rel="noopener">Webpack，101入门体验 -Yika</a></p></li><li><p><a href="https://segmentfault.com/a/1190000002551952" target="_blank" rel="noopener">Webpack 入门指迷 -题叶</a></p></li><li><p><a href="https://webpack.github.io/" target="_blank" rel="noopener">https://webpack.github.io/ Webpack 官网</a></p></li></ul><h3 id="Vue"><a href="#Vue" class="headerlink" title="Vue"></a>Vue</h3><ul><li><a href="https://github.com/vuejs/awesome-vue" target="_blank" rel="noopener">awesome-vue</a></li><li><a href="http://djyde.github.io/2015/08/29/vuejs-and-webpack-1/" target="_blank" rel="noopener">Vue.js 和 Webpack（一） -Randy Lu</a></li><li><a href="http://djyde.github.io/2015/08/30/vuejs-and-webpack-2/" target="_blank" rel="noopener">Vue.js 和 Webpack（二） -Randy Lu</a></li><li><a href="http://djyde.github.io/2015/08/31/vuejs-and-webpack-3/" target="_blank" rel="noopener">Vue.js 和 Webpack（三） -Randy Lu</a></li><li><a href="https://laravist.com/series/vue-js-1-0-in-action-series" target="_blank" rel="noopener">Vuejs 1.0 中文系列视频教程 -Laravist</a></li><li><a href="https://github.com/jsfront/src/blob/master/vuejs.md" target="_blank" rel="noopener">Vuejs-QQ群 相关资料</a> 来自豪情</li></ul><h3 id="React"><a href="#React" class="headerlink" title="React"></a>React</h3><ul><li><a href="http://reactjs.cn/react/docs/thinking-in-react.html" target="_blank" rel="noopener">深入理解 React -Thinking in React 中文版</a></li><li><a href="http://facebook.github.io/react/docs/thinking-in-react.html" target="_blank" rel="noopener">Thinking in React</a></li></ul><h3 id="AngularJS"><a href="#AngularJS" class="headerlink" title="AngularJS"></a>AngularJS</h3><ul><li><p><a href="https://hairui219.gitbooks.io/learning_angular/content/zh/index.html" target="_blank" rel="noopener">学习AngularJS 1.x -Harry<a href="mailto:&#x68;&#97;&#114;&#x72;&#x79;&#x40;&#97;&#x6e;&#x64;&#116;&#111;&#x6f;&#x2e;&#x6e;&#x65;&#116;" target="_blank" rel="noopener">&#x68;&#97;&#114;&#x72;&#x79;&#x40;&#97;&#x6e;&#x64;&#116;&#111;&#x6f;&#x2e;&#x6e;&#x65;&#116;</a></a></p><p>  本书是作者 <a href="https://github.com/hairui219" target="_blank" rel="noopener">Harry</a> 在学习和应用AngularJS 1.x 的过程中的资料梳理。希望能对大家学习AngularJS有一定帮助……</p></li></ul><ul><li><p><a href="https://docs.angularjs.org/api" target="_blank" rel="noopener">AngularJS api 官网</a></p></li><li><p><a href="https://github.com/zensh/AngularjsTutorial_cn" target="_blank" rel="noopener">AngularJS入门教程——AngularJS中文社区提供</a></p></li><li><p><a href="http://www.runoob.com/angularjs/angularjs-tutorial.html" target="_blank" rel="noopener">AngularJS 教程 | 菜鸟教程</a></p><p>  类似 w3school 的入门 AngularJS 教程。</p></li></ul><h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><ul><li><a href="http://www.ruanyifeng.com/blog/2015/12/a-mocha-tutorial-of-examples.html" target="_blank" rel="noopener">测试框架 Mocha 实例教程 阮一峰</a></li></ul><h2 id="类库与插件"><a href="#类库与插件" class="headerlink" title="类库与插件"></a>类库与插件</h2><ul><li><p><a href="http://masonry.desandro.com/" target="_blank" rel="noopener">Masonry</a></p><p>  瀑布流布局库。</p></li><li><p><a href="http://www.jssor.com/" target="_blank" rel="noopener">jssor</a></p><p>  图片轮播图其 GitHub 地址 <a href="https://github.com/jssor/slider" target="_blank" rel="noopener">jssor/slider</a></p></li><li><p><a href="http://cssslider.com/" target="_blank" rel="noopener">cssslider</a></p><p>  纯 CSS 的图片轮播图。</p></li></ul><ul><li><p><a href="https://github.com/cferdinandi/gumshoe" target="_blank" rel="noopener">gumshoe</a></p><p>  A simple, framework-agnostic scrollspy script.</p></li><li><p><a href="https://github.com/cferdinandi/smooth-scroll" target="_blank" rel="noopener">smooth-scroll</a></p><p>A simple vanilla JS script to animate scrolling to anchor links.</p></li></ul><h2 id="模块化"><a href="#模块化" class="headerlink" title="模块化"></a>模块化</h2><ul><li><a href="http://lishaopeng.com/2016/02/05/js-module/" target="_blank" rel="noopener">后端程序员的 JavaScript 之旅 - 模块化（一）</a></li><li><a href="http://lishaopeng.com/2016/02/11/js-module2/" target="_blank" rel="noopener">后端程序员的 JavaScript 之旅 - 模块化（二）</a></li><li><p><a href="http://lishaopeng.com/2016/02/19/js-module3/" target="_blank" rel="noopener">后端程序员的 JavaScript 之旅 - 模块化（三）</a></p></li><li><p><a href="http://javascript.ruanyifeng.com/nodejs/module.html" target="_blank" rel="noopener">CommonJS 规范 -来自 阮一峰 JavaScript 标准参考教程(alpha)</a></p></li></ul><h2 id="other-articles"><a href="#other-articles" class="headerlink" title="other articles"></a>other articles</h2><ul><li><a href="http://gethead.info/" target="_blank" rel="noopener"><head> Cheat Sheet</head></a></li></ul><ul><li><a href="https://segmentfault.com/a/1190000004453249" target="_blank" rel="noopener">将footer固定在页面底部的实现方法</a></li></ul><ul><li><a href="https://www.html5rocks.com/zh/tutorials/video/basics/" target="_blank" rel="noopener">HTML5 视频 By Pete LePage</a></li></ul><h2 id="编辑器"><a href="#编辑器" class="headerlink" title="编辑器"></a>编辑器</h2><h3 id="Atom-中常用插件"><a href="#Atom-中常用插件" class="headerlink" title="Atom 中常用插件"></a>Atom 中常用插件</h3><ul><li>auto-beautify</li><li>autoprefixer</li><li>block-comment</li><li>color-picker</li><li>docblockr</li><li>emmet</li><li>jquery-snippets</li><li>jshint</li><li>linter</li><li>linter-csslint</li><li>linter-htmlhint</li><li>minimap</li><li>minimap-git-diff</li><li>minimap-codeglance 滑过 minimap 显示代码</li><li>minimap-find-and-replace 在 minimap 中显示 <code>ctrl+D</code> 选中的内容</li><li>open-in-browser</li><li>uglify</li><li>active-power-mode</li><li>atom-terminal-panel</li><li>linter-scss-linter</li><li>atom-ternjs</li><li>file-icons 将图标变成彩色</li><li>autocomplete-paths 自动补充路径</li><li>symbols-tree-view A symbol treeview like taglist</li></ul><p>常用的主题：</p><p>UI Theme: One Dark</p><p>Syntax Theme: Atom Dark or One Dark</p><h2 id="GitBook-及其插件"><a href="#GitBook-及其插件" class="headerlink" title="GitBook 及其插件"></a>GitBook 及其插件</h2><ul><li><a href="http://zhaoda.net/2015/11/09/gitbook-plugins/" target="_blank" rel="noopener">Gitbook 的使用和常用插件 -赵达</a></li><li><p><a href="https://plugins.gitbook.com/plugin/expandable-chapters" target="_blank" rel="noopener">gitbook-plugin-expandable-chapters</a></p><p>  折叠左侧目录章节。</p>  <!-- ![](http://ww4.sinaimg.cn/large/7011d6cfjw1f08kmplbj1j20gn05l0tk.jpg) --></li></ul><h2 id="Chrome-插件"><a href="#Chrome-插件" class="headerlink" title="Chrome 插件"></a>Chrome 插件</h2><ul><li><p><a href="https://chrome.google.com/webstore/detail/octotree/bkhaagjahfmjljalopjnoealnfndnagc" target="_blank" rel="noopener">Octotree</a></p><ul><li>Code tree for GitHub and GitLab</li></ul></li></ul><ul><li><p><a href="http://www.ituring.com.cn/minibook/950" target="_blank" rel="noopener">Chrome扩展及应用开发 -图灵电子书</a></p></li><li><p><a href="https://www.zhihu.com/question/23228162#answer-28057391" target="_blank" rel="noopener">有哪些鲜为人知却非常有意思、好用的 Chrome 扩展？ -知乎</a></p></li><li><p><a href="https://chrome.google.com/webstore/detail/dribbble-new-tab/hmhjbefkpednjogghoibpejdmemkinbn" target="_blank" rel="noopener">Dribbble New Tab</a></p><p>  新建 tab 时，显示 dribbble 上的精选作品。</p></li></ul><h2 id="Other-blogs"><a href="#Other-blogs" class="headerlink" title="Other blogs"></a>Other blogs</h2><ul><li><a href="http://www.xiaoa.name/" target="_blank" rel="noopener">COLORFUL xiaoa</a></li></ul><ul><li><p><a href="http://pinkyjie.com/" target="_blank" rel="noopener">进击的马斯特 http://pinkyjie.com/</a></p><p>  马斯特，87年生人，爱溜冰的码农。技术： Javascript、Python、Mac、iOS</p></li><li><p><a href="https://imququ.com/" target="_blank" rel="noopener">Jerry Qu</a></p><p>  JerryQu，奇虎 360，前端开发，前百度前端。</p></li><li><p><a href="https://mazhuang.org/" target="_blank" rel="noopener">码志 https://mazhuang.org/</a></p><p>  我是马壮，码而生，码而立。就职sogou。</p></li><li><p><a href="http://www.barretlee.com/" target="_blank" rel="noopener">小胡子哥 http://www.barretlee.com/</a></p><p>  李靖，阿里巴巴。</p></li><li><p><a href="http://blog.xcatliu.com/" target="_blank" rel="noopener">Xcat Liu http://blog.xcatliu.com/</a></p><p>  Microsoft Software Engineer II, Meituan Senior Front-End Engineer</p></li><li><p><a href="http://ouvens.github.io/" target="_blank" rel="noopener">极限前端 http://ouvens.github.io/</a></p><p>  Ouvenzhang, 前端工程师，对前端领域的技术知识具有较高的职业能力和探究精神。对响应式页面设计、工程构建组件化、mv*设计实现、前端优化、ES6开发体系等有深入的研究与项目实践。来自腾讯科技。</p></li><li><p><a href="http://www.dengzhr.com/" target="_blank" rel="noopener">凳子_Joinery 邓智容  http://www.dengzhr.com/</a></p></li><li><p><a href="http://zhaoda.net/" target="_blank" rel="noopener">赵达的个人网站 腾讯高级前端开发工程师</a></p></li><li><p><a href="http://djyde.github.io/" target="_blank" rel="noopener">Randy</a></p><p>  95年出生的全栈。卢涛南，英文名 Randy，用 djyde 这个ID混迹于网络。</p></li><li><p><a href="http://www.kancloud.cn/jsfront/month/82796" target="_blank" rel="noopener">JS前端开发群月报 -豪情等人维护</a></p></li></ul><h2 id="交互设计相关"><a href="#交互设计相关" class="headerlink" title="交互设计相关"></a>交互设计相关</h2><ul><li><p><a href="https://framerjs.com/" target="_blank" rel="noopener">Framer</a></p><p>  Design the impossible with Framer</p></li><li><p><a href="https://www.flinto.com/" target="_blank" rel="noopener">FLINTO</a></p><p>  App Prototyping Tools for Designers</p></li><li><p><a href="http://principleformac.com/" target="_blank" rel="noopener">Principle</a></p><p>  Animate Your Ideas, Design Better Apps</p></li><li><p><a href="https://gyrosco.pe/" target="_blank" rel="noopener">https://gyrosco.pe/</a></p><p>  首页的卡片翻动效果非常赞。</p></li></ul><h2 id="网站工具类"><a href="#网站工具类" class="headerlink" title="网站工具类"></a>网站工具类</h2><ul><li><p><a href="https://math.meta.stackexchange.com/questions/5020/mathjax-basic-tutorial-and-quick-reference" target="_blank" rel="noopener">MathJax</a></p><p>  数学公式语法(of MathJax)</p></li><li><p><a href="http://www.runoob.com/tags/html-colorpicker.html" target="_blank" rel="noopener">Runoob.com</a></p><p>  HTML 拾色器</p></li><li><p><a href="http://fontawesome.dashgame.com" target="_blank" rel="noopener">Font Awesome </a></p><p>  适合 Web 应用的图标</p></li><li><p><a href="http://www.colorzilla.com/gradient-editor/" target="_blank" rel="noopener">Ultimate CSS Gradient Generator</a></p><p>  也是渐变生成器</p></li><li><p><a href="http://www.cssreflex.com/css-generators/" target="_blank" rel="noopener">CSS Generators -CSSREFLEX</a></p><p>  CSS3 生成器</p></li></ul><ul><li><p><a href="https://tinypng.com/" target="_blank" rel="noopener">tiny png</a></p><p>  用于压缩 png 或 jpg 的在线工具</p></li></ul><ul><li><p><a href="https://sm.ms/" target="_blank" rel="noopener">图床 https://sm.ms/</a></p><p>  有 API 可用。</p></li><li><p><a href="https://github.com/Suxiaogang/WeiboPicBed" target="_blank" rel="noopener">新浪微博图床 Chrome扩展</a></p></li><li><p><a href="http://tool.chinaz.com/Tools/unixtime.aspx" target="_blank" rel="noopener">Unix 时间戳 Unix timestamp</a></p></li></ul><ul><li><a href="https://regex101.com/" target="_blank" rel="noopener">在线正则表达式匹配</a><ul><li>这个功能更强大一点，能清楚的区分出贪婪和懒惰正则。</li></ul></li><li><a href="http://regexr.com/" target="_blank" rel="noopener">http://regexr.com/</a></li><li><a href="https://fonts.google.com/" target="_blank" rel="noopener">google fonts</a><ul><li><a href="https://fengmk2.com/blog/2016/google-fonts-mirror" target="_blank" rel="noopener">Google Fonts 加速代理</a></li></ul></li></ul>]]></content>
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>听她的声音，会上瘾</title>
      <link href="//2017/%E5%90%AC%E5%A5%B9%E7%9A%84%E5%A3%B0%E9%9F%B3%EF%BC%8C%E4%BC%9A%E4%B8%8A%E7%98%BE.html"/>
      <url>//2017/%E5%90%AC%E5%A5%B9%E7%9A%84%E5%A3%B0%E9%9F%B3%EF%BC%8C%E4%BC%9A%E4%B8%8A%E7%98%BE.html</url>
      <content type="html"><![CDATA[<iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="450" src="//music.163.com/outchain/player?type=0&id=2172719702&auto=1&height=430"></iframe><hr><blockquote><p>Should auld acquaintance be forgot,<br>And never brought to mind?<br>Should auld acquaintance be forgot<br>And days of auld lang syne?<br>And days of auld lang syne, my dear,<br>And days of auld lang syne,<br>We’ll take a cup of kindness yet,<br>For auld lang syne.<br>We twa ha’e run aboot the braes<br>And pu’d the gowansfine,<br>We’ve wander’d mony a weary foot,<br>Sin auld lang syne.<br>Sin auld lang syne, my dear,<br>Sin auld lang syne,<br>We’ll take a cup of kindness yet,<br>For auld lang syne.<br>We twa ha’e sportedi’ the burn,<br>From morning sun till dine,<br>But seas between us braid ha’eroar’d<br>Sin’ auld lang syne.<br>Sin auld lang syne, my dear,<br>Sin auld lang syne,<br>But seas between us braid ha’eroar’d<br>Sin auld lang syne?<br>And here’s a hand,my trusty frien’,<br>And gie’s a hand o’ thine;<br>We’ll take a cup of kindness yet,<br>For auld lang syne.<br>For auld lang syne, my dear,<br>For auld lang syne,<br>We’ll take a cup of kindness yet,<br>For auld lang syne.</p><hr></blockquote>]]></content>
      
      <categories>
          
          <category> 音乐 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 音乐 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>贝雷参数与均匀性在沥青路面施工质量过程控制中应用</title>
      <link href="//2016/%E8%B4%9D%E9%9B%B7%E5%8F%82%E6%95%B0%E4%B8%8E%E5%9D%87%E5%8C%80%E6%80%A7%E5%9C%A8%E6%B2%A5%E9%9D%92%E8%B7%AF%E9%9D%A2%E6%96%BD%E5%B7%A5%E8%B4%A8%E9%87%8F%E8%BF%87%E7%A8%8B%E6%8E%A7%E5%88%B6%E4%B8%AD%E5%BA%94%E7%94%A8.html"/>
      <url>//2016/%E8%B4%9D%E9%9B%B7%E5%8F%82%E6%95%B0%E4%B8%8E%E5%9D%87%E5%8C%80%E6%80%A7%E5%9C%A8%E6%B2%A5%E9%9D%92%E8%B7%AF%E9%9D%A2%E6%96%BD%E5%B7%A5%E8%B4%A8%E9%87%8F%E8%BF%87%E7%A8%8B%E6%8E%A7%E5%88%B6%E4%B8%AD%E5%BA%94%E7%94%A8.html</url>
      <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>我省高速公路建设发展至2105年已突破5000公里，并实现县县通高速的目标，在高速公路建设领域中，怎样建设出高品质的高速公路是个系统工程，只有建设施工过程中控制好质量才能建设出一条经久耐用的高速公路。伴随社会经济不断发展，交通量猛增，造成早期路面损坏较为严重，在病害的原因分析过程中，有不少因级配设计的不合理或施工过程中控制缺乏经验不够严谨所造成的。本文通过介绍施工过程中沥青混合料级配，应用贝雷参数与级配均匀度等指标在施工过程中进行精细化管理从而提高施工质量，通过在福建湄渝高速公路三明ATb-25柔性基层施工过程中的应用，并取得显著效果。</p><h2 id="我国现行级配设计与控制优缺点"><a href="#我国现行级配设计与控制优缺点" class="headerlink" title="我国现行级配设计与控制优缺点"></a>我国现行级配设计与控制优缺点</h2><p>级配是指沥青混合料中矿料不同粒径的分布，采用各个筛孔的通过率表示。它是沥青混合料中矿料的最重要特性，直接影响着沥青混合料的所有重要指标，例如高温稳定性、耐久性、渗水性、施工和易性及抗疲劳、抗滑能力。美国沥青路面协会NAPA研究表明，一个稳定的混合料，高温抗车辙的能力80％是由集料骨架结构提供的。根据《沥青路面施工技术规范》要求，混合料级配的设计应通过规范给予的矿料级配范围内进行选定，这种方法很简单操作性也强，因此有些技术人员在矿料级配的选定中按照级配范围的中值为基准进行设计，这就存在很大的误区，我国地幅宽广，南北气候及运输条件等都不一样，我们应该因地制宜结合项目实际情况在规范及设计要求范围内进行优选，不然容易为后期施工埋下质量隐患。</p><p>沥青混合料生产过程中应随时对级配进行自检，按照《<strong>沥青路面施工技术规范</strong>》表11.4.4（热拌沥青混合料的频度和质量要求）要求，每台拌和机每天进行l～2次级配抽检，通过筛分试验按照规定允许误差进行结果评定，见表1：</p><table><thead><tr><th>筛孔尺寸</th><th>高速公路、一级公路允许偏差</th><th>其他等级公路允许偏差</th><th>试验方法</th></tr></thead><tbody><tr><td>0.075mm</td><td>±2％(2％)</td><td>±2％(2％)</td><td>T 0725抽提筛分与标准级配比较的差</td></tr><tr><td>小于2.36mm</td><td>±5％(3％)</td><td>±6％</td><td>同上</td></tr><tr><td>小于4.75mm</td><td>±6％(4％)</td><td>±7％</td><td>同上</td></tr></tbody></table><p>通过表1可以看出技术规范对级配的控制要求并不是很高，级配只要在允许偏差范围内均属合格，在生产过程中无明显指导意义，以此同时施工生产过程中部分检测人员因缺乏经验，无法对级配数据结果进行有效分析。例如，在图1中1号与2号级配均在上下限范围内，能够符合技术规范允许偏差要求，除此之外无法体现更多信息，但实际过程中两条级配线的施工效果完全不一样。1号线配线骨架嵌挤效果差，细集料填充不够，沥青混合料空隙率（VV）与矿料间隙率（VMA）偏大；2号级配线容易离析，高温稳定性与水稳定均差。因此我们应该考虑施工过程中如何对级配进行精细化控制，笔者想通过引入贝雷参数与级配均匀性对生产过程的级配进行检验分析，希望能抛砖引玉给大家提供一些新思路。</p><p><img src="http://p5mgr4bgm.bkt.clouddn.com/屏幕快照 2018-04-06 下午3.28.50.png" alt="屏幕快照 2018-04-06 下午3.28.50-w600"></p><a id="more"></a><h2 id="贝雷参数与级配均匀性的检验分析"><a href="#贝雷参数与级配均匀性的检验分析" class="headerlink" title="贝雷参数与级配均匀性的检验分析"></a>贝雷参数与级配均匀性的检验分析</h2><p>热拌沥青配合比设计过程可分为集料的级配组成设计与最佳沥青用量的选定这两方面，在集料的级配组成设计中，传统的级配设计理论通常引用堆积理论，基于两个基本假设：一、基本颗粒为规则球体；二、各分级颗粒粒径都相等。本文重点介绍另一个级配设计理论与方法，该理论由美国的Robert D. Bailey先生提出，其核心思想是级配设计中由粗集料颗粒形成嵌挤，细集料进行空隙填充，细集料的捣实体积相当于粗集料所构成的空隙体积，该方法直译为“贝雷法” 沥青混合料级配设计，在贝雷法中对粗细集料关键筛孔的划分按公称最大粒径（NMPS）的0.22倍的接近值来确定（注：因标准筛孔尺寸与美国略有区别，我国有些学者提出0.24倍更符合我国实际情况），因此，关键筛孔（PCS）是随着NMPS的变化而变化（见表2）, 我们也将关键筛孔称为第一控制筛孔，PCS ≈ 0.22×NMPS。</p><p><img src="http://p5mgr4bgm.bkt.clouddn.com/15229997787736.jpg" alt="1-w600"></p><table><thead><tr><th>最大公称粒径</th><th>PCS</th><th>关键筛孔</th></tr></thead><tbody><tr><td>26.5</td><td>5.830</td><td>4.75</td></tr><tr><td>19</td><td>4.180</td><td>4.75</td></tr><tr><td>16</td><td>3.520</td><td>2.36</td></tr><tr><td>13.2</td><td>2.904</td><td>2.36</td></tr><tr><td>9.5</td><td>2.090</td><td>2.36</td></tr></tbody></table><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">贝雷法对填充空隙的细集料进一步划分为较粗的细集料（SCS）作为第二控制筛孔与较细的细集料（TSC）作为第三控制筛孔。筛孔尺寸分别为SCS≈0.22×PCS，TCS≈0.22×SCS。</span><br></pre></td></tr></table></figure><p><img src="http://p5mgr4bgm.bkt.clouddn.com/15229997883758.jpg" alt="3-w600"></p><p>级配选定后，贝雷法通过3个参数对级配的骨架性是否良好进行检验：一、粗集料比（CA比）主要目的是对粗集粗的级配进行约束，CA比过大则不能形成骨架结构，若太小则容易出现离析；二、细集料中粗比（FAC比）来反映级配中细集料部份粗颗粒与细颗粒嵌挤填充情况；三、细集料中细比（FAf比）与FAC比类似，反映级配中最细一级的嵌挤情况。</p><h3 id="CA比"><a href="#CA比" class="headerlink" title="CA比"></a>CA比</h3><p>用于评价矿料中粗集料的含量和分析空隙特征。</p><p>$$<br>  CA=\frac{P_{NMPS/2}-P_{PCS}}{100-P_{NMPS/2}}<br>$$</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">式中：为是粒径等于NMPS/2(NMPS是公称最大粒径)的通过率,%；为第一控制筛孔的通过率,%。</span><br></pre></td></tr></table></figure><h3 id="FAc比"><a href="#FAc比" class="headerlink" title="FAc比"></a>FAc比</h3><p>反映细集料中粗料部分与细料部分的嵌挤、填充情况,计算公式为：</p><p>$$<br>  F_{ac}=\frac{P_{Scs}}{P_{Pcs}}<br>$$</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">式中：为第二控制筛孔的通过率，%。</span><br></pre></td></tr></table></figure><h3 id="FAf比"><a href="#FAf比" class="headerlink" title="FAf比"></a>FAf比</h3><p>比体现了合成集料中最细一级的嵌挤状况，计算公式为：</p><p>$$<br>F_{af}=\frac{P_{Tcs}}{P_{Scs}}<br>$$</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">式中：为第三控制筛孔的通过率，%。</span><br></pre></td></tr></table></figure><p>笔者选择福建省高速公路6个项目ATb-25配合比设计级配线，通过公式计算出贝雷参数进行分析。</p><table><thead><tr><th>筛孔</th><th>最大公称粒径（NMPS）</th><th>NMPS/2</th><th>PCS</th><th>SCS</th><th>TCS</th></tr></thead><tbody><tr><td>计算筛孔，mm</td><td>26.5</td><td>13.25</td><td>5.83</td><td>1.04</td><td>0.26</td></tr><tr><td>套用筛孔，mm</td><td>26.5</td><td>13.2</td><td>4.75</td><td>1.18</td><td>0.3</td></tr></tbody></table><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">表3， ATb-25关键控制筛孔参照表</span><br></pre></td></tr></table></figure><table><thead><tr><th>高整公路</th><th>31.5</th><th>26.5</th><th>19</th><th>16</th><th>13.2</th><th>9.5</th><th>4.75</th><th>2.36</th><th>1.18</th><th>0.6</th><th>0.3</th><th>0.15</th><th>0.075</th></tr></thead><tbody><tr><td>龙长高速</td><td>100</td><td>97.8</td><td>70.3</td><td>60.8</td><td>53.7</td><td>44.7</td><td>30.9</td><td>23.9</td><td>18.8</td><td>14.6</td><td>9.7</td><td>6.1</td><td>4.3</td></tr><tr><td>宁武高速</td><td>100</td><td>95.5</td><td>70.1</td><td>60.3</td><td>52.6</td><td>41.8</td><td>29.9</td><td>20.9</td><td>15.3</td><td>11.9</td><td>7.7</td><td>6.1</td><td>4.6</td></tr><tr><td>泉三高速</td><td>100</td><td>94.2</td><td>70.5</td><td>61.2</td><td>52.7</td><td>43.1</td><td>29.7</td><td>19.4</td><td>15</td><td>10.7</td><td>6.7</td><td>5.3</td><td>4</td></tr><tr><td>泉夏高速</td><td>100</td><td>97.6</td><td>68.1</td><td>58.3</td><td>48.5</td><td>41.1</td><td>28.9</td><td>20.6</td><td>15.5</td><td>11.9</td><td>8</td><td>5.9</td><td>4.3</td></tr><tr><td>绕城高速</td><td>100</td><td>93.7</td><td>69.5</td><td>60.6</td><td>52.6</td><td>40.8</td><td>29.2</td><td>21.9</td><td>17.3</td><td>12.6</td><td>8.8</td><td>6.5</td><td>4.6</td></tr><tr><td>永宁高速</td><td>100</td><td>93.5</td><td>71</td><td>63.7</td><td>53.9</td><td>41.6</td><td>31.1</td><td>19.7</td><td>14.6</td><td>10.5</td><td>7.4</td><td>6.2</td><td>4.9</td></tr></tbody></table><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">表4，6条高速公路ATb-25目标级配表</span><br></pre></td></tr></table></figure><table><thead><tr><th>参数</th><th>龙长高速</th><th>宁武高速</th><th>泉三高速</th><th>泉夏高速</th><th>绕城高速</th><th>永宁高速</th></tr></thead><tbody><tr><td>CA</td><td>0.492</td><td>0.479</td><td>0.486</td><td>0.381</td><td>0.497</td><td>0.495</td></tr><tr><td>FAc</td><td>0.608</td><td>0.512</td><td>0.505</td><td>0.536</td><td>0.593</td><td>0.47</td></tr><tr><td>Faf</td><td>0.516</td><td>0.503</td><td>0.447</td><td>0.516</td><td>0.509</td><td>0.507</td></tr><tr><td>VMA</td><td>13.1</td><td>13.2</td><td>13.8</td><td>13.4</td><td>13</td><td>12.9</td></tr><tr><td>稳定度(KN)</td><td>15</td><td>17.4</td><td>17.4</td><td>16.4</td><td>13.2</td><td>15.3</td></tr><tr><td>流值（0.1mm）</td><td>33</td><td>24.5</td><td>26.3</td><td>37.5</td><td>27.5</td><td>27.5</td></tr><tr><td>残留稳定度（%）</td><td>87.3</td><td>96.3</td><td>93.5</td><td>93.4</td><td>85.2</td><td>93</td></tr></tbody></table><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">表5，ATb-25贝雷参数计算表</span><br></pre></td></tr></table></figure><p>通过计算，结果见表4、表5，其中泉夏高速最小CA比=0.381， CA比过小，意味着矿料合成级配中粗料比例增大，施工容易产生离析且不易压实，反之CA比过大，矿料合成级配中细集料部份含量增多，难于形成骨架嵌挤结构，同时细集料部份过多将增加施工碾压难度，结合施工经验建议CA比控制在0.4-0.6之间具有较好的骨架稳定性； FAc比主要反应VV及VMA的体积特征，FAc比过高时填充细集含量增大，在0.45次方级配曲线图形成“驼峰”曲线，级配容易敏感，高温稳定性与水稳定性均差，反之，FAc比过低，细集料中粗颗粒间隙体积无法足够填充，VMA与VV过大将导致级配不均衡，容易渗水出现水损害，从表5中得到龙长高速与绕城高速的FAc分别为0.608与0.593相对比较小，残留稳定度（%）分别为87.3%与85.2%，这结果以上述基本一致，建议FAc比控制范围为0.4-0.6间； FAf比与FAc比类似，主要影响混合料的体积特征，通常VMA随其减小而增大，一般FAf比控制在0.3-0.6之间。贝雷法经过Heritage Research Group近十年的内部使用和普渡大学进一步研究、实践和验证，认为采用该方法设计的沥青混合料具有良好的骨架结构，同时可以达到密实的效果。</p><p>在实际工程中,级配的任意颗粒群都是由多种不同大小的颗粒所组成，分布在一定的颗粒区域中，分布区域越宽，其颗粒均匀性越低，颗粒均匀性直接影响混合料的填充特性，单一粒径组成的混合料是不能达到很好的填充特性同时无法形成嵌挤结构，导致孔隙率大，路用性能差等结果。在级配中采用质量为基准对级配颗粒群的均匀性进行推导，假设颗粒为球体，其粒度分布在n组粒径中，某粒径占总质量的百分比用wi表示,平均粒径用di表示, 推导公式如下：</p><p><img src="http://p5mgr4bgm.bkt.clouddn.com/15229998611142.jpg" alt="4-w200"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">式中，Up为级配均匀性, 当颗粒为单一粒径时，d为常数其均匀性为100 ，因此混合料的级配均匀性范围为0&lt;Up≤100。</span><br></pre></td></tr></table></figure><p>我们通过三条不同结构层的级配对均匀性进行计算，将级配均匀性引用到日常施工质量过程控制中，作为生产过程中级配颗粒稳定性的参考指标之一。</p><table><thead><tr><th>筛孔尺寸</th><th>平均粒度</th><th>ATb-25通过率</th><th>ATb-25质量比</th><th>AC-20C通过率</th><th>AC-20C质量比</th><th>AC-16C通过率</th><th>AC-16C质量比</th></tr></thead><tbody><tr><td>31.5</td><td>34.5</td><td>100</td><td>0</td><td>-</td><td>-</td><td>-</td><td>-</td></tr><tr><td>26.5</td><td>29</td><td>97.6</td><td>2.4</td><td>100</td><td>0</td><td>-</td><td>-</td></tr><tr><td>19</td><td>22.75</td><td>68.3</td><td>29.3</td><td>97</td><td>3</td><td>100</td><td>-</td></tr><tr><td>16</td><td>17.5</td><td>58.8</td><td>9.5</td><td>80.7</td><td>16.2</td><td>96.2</td><td>3.8</td></tr><tr><td>13.2</td><td>14.6</td><td>51.7</td><td>7.1</td><td>68.9</td><td>11.8</td><td>81.1</td><td>15.1</td></tr><tr><td>9.5</td><td>11.35</td><td>43.2</td><td>8.5</td><td>56.8</td><td>12.1</td><td>62.7</td><td>18.4</td></tr><tr><td>4.75</td><td>7.125</td><td>28.9</td><td>14.3</td><td>30.7</td><td>26.1</td><td>42.5</td><td>20.2</td></tr><tr><td>2.36</td><td>3.555</td><td>20.5</td><td>8.4</td><td>20.6</td><td>10.1</td><td>27.5</td><td>15</td></tr><tr><td>1.18</td><td>1.77</td><td>14.8</td><td>5.7</td><td>15.2</td><td>5.3</td><td>20.6</td><td>6.9</td></tr><tr><td>0.6</td><td>0.89</td><td>10.6</td><td>4.2</td><td>11.5</td><td>3.7</td><td>14.7</td><td>5.9</td></tr><tr><td>0.3</td><td>0.45</td><td>7.3</td><td>3.3</td><td>8.6</td><td>2.9</td><td>10.5</td><td>4.2</td></tr><tr><td>0.15</td><td>0.225</td><td>5.4</td><td>1.9</td><td>6.8</td><td>1.8</td><td>7.2</td><td>3.3</td></tr><tr><td>0.075</td><td>0.1125</td><td>3.9</td><td>1.5</td><td>5.1</td><td>1.7</td><td>4.7</td><td>2.5</td></tr><tr><td>0</td><td>0.0375</td><td>-</td><td>3.9</td><td>-</td><td>5.1</td><td>-</td><td>4.7</td></tr></tbody></table><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">表6，三条不同结构层配合比设计级配线</span><br></pre></td></tr></table></figure><table><thead><tr><th>合成级配</th><th>∑wi/di2</th><th>∑wi/di3</th><th>∑wi</th><th>∑wi*di</th><th>Up</th></tr></thead><tbody><tr><td>ATb-25</td><td>2953.56</td><td>75218.33</td><td>100</td><td>1250.43</td><td>0.314</td></tr><tr><td>AC-20C</td><td>3845.85</td><td>98850.97</td><td>100</td><td>900.21</td><td>0.432</td></tr><tr><td>AC-16C</td><td>4484.06</td><td>115286.18</td><td>100</td><td>712.57</td><td>0.546</td></tr></tbody></table><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">表7，级配均匀性计算表</span><br></pre></td></tr></table></figure><p>对于表6，表7，可得到最大公称粒径为26.5mm的ATb-25级配均匀性为0.314，最大公称粒径为16mm的CA-16C级配均匀性为0.546,而AC-20C基于两者之间。因此，Up值越大时颗粒分布区域越小，级配颗粒趋向单一，根据这一特征可作为判断施工过程级配粗细变化及稳定性的参考指标。建议施工中Up的范围为生产配合比级配Up±0.03进行控制。</p><p>我们将之前图1施工级配曲线图的筛分数据经过处理，计算出CA、FAc、FAf及Up,见表8，很直观得出上述结论，同进还可以判定出1号线相对于2号线级配偏粗。</p><table><thead><tr><th>级配</th><th>NMPS</th><th>NMPS/2</th><th>PCS</th><th>SCS</th><th>TCS</th><th>CA比</th><th>FAc比</th><th>FAf比</th><th>Up</th></tr></thead><tbody><tr><td>生产控制级配</td><td>97.6</td><td>51.7</td><td>28.9</td><td>14.8</td><td>7.3</td><td>0.47</td><td>0.51</td><td>0.49</td><td>0.314</td></tr><tr><td>1号级配</td><td>93.6</td><td>55</td><td>27</td><td>13</td><td>5</td><td>0.62</td><td>0.48</td><td>0.38</td><td>0.298</td></tr><tr><td>2号级配</td><td>100</td><td>47</td><td>31</td><td>16</td><td>9</td><td>0.3</td><td>0.52</td><td>0.56</td><td>0.312</td></tr></tbody></table><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">表8，贝雷参数与均匀性计算表</span><br></pre></td></tr></table></figure><h2 id="贝雷参数、均匀性进行施工过程动态管理"><a href="#贝雷参数、均匀性进行施工过程动态管理" class="headerlink" title="贝雷参数、均匀性进行施工过程动态管理"></a>贝雷参数、均匀性进行施工过程动态管理</h2><p>福建湄渝高速公路三明段路面B1合同段ATb-25沥青碎石上基层应用贝雷参数及Up作为混合料级配的施工监控参数，并要求在施工过程级配指标除了满足规范及设计要求外，还应满足CA、FAc、FAf及Up参考范围，通过建立施工动态控制图监测生产过程参数是否处于控制状态。表9为ATb-25日常施工级配检测数据。</p><table><thead><tr><th>台班</th><th>施工日期</th><th>26.5</th><th>13.2</th><th>4.75</th><th>1.18</th><th>0.075</th><th>CA比</th><th>FAc比</th><th>FAf比</th><th>Up</th></tr></thead><tbody><tr><td>1</td><td>2014/1/18</td><td>98.2</td><td>51.1</td><td>28.8</td><td>14.6</td><td>3.8</td><td>0.46</td><td>0.51</td><td>0.47</td><td>0.29</td></tr><tr><td>2</td><td>2015/3/13</td><td>98.8</td><td>51</td><td>27.5</td><td>15.3</td><td>4.5</td><td>0.48</td><td>0.56</td><td>0.56</td><td>0.3</td></tr><tr><td>3</td><td>2015/3/17</td><td>95.9</td><td>50.2</td><td>28.1</td><td>14</td><td>4.7</td><td>0.44</td><td>0.5</td><td>0.61</td><td>0.28</td></tr><tr><td>4</td><td>2015/3/18</td><td>96.5</td><td>53.8</td><td>27.3</td><td>16.4</td><td>4.3</td><td>0.57</td><td>0.6</td><td>0.51</td><td>0.29</td></tr><tr><td>5</td><td>2015/3/19</td><td>95.8</td><td>52</td><td>29.5</td><td>16</td><td>4.5</td><td>0.47</td><td>0.54</td><td>0.55</td><td>0.32</td></tr><tr><td>6</td><td>2015/3/21</td><td>97.2</td><td>56.4</td><td>30.8</td><td>13.8</td><td>4</td><td>0.59</td><td>0.45</td><td>0.55</td><td>0.32</td></tr><tr><td>7</td><td>2015/3/24</td><td>95.8</td><td>50.7</td><td>27.4</td><td>13.9</td><td>4.6</td><td>0.47</td><td>0.51</td><td>0.58</td><td>0.29</td></tr><tr><td>8</td><td>2015/3/25</td><td>96.4</td><td>52.5</td><td>28.8</td><td>13.8</td><td>4.1</td><td>0.5</td><td>0.48</td><td>0.55</td><td>0.3</td></tr><tr><td>9</td><td>2015/3/28</td><td>98.7</td><td>51.9</td><td>28.4</td><td>15.6</td><td>4.1</td><td>0.49</td><td>0.55</td><td>0.48</td><td>0.3</td></tr><tr><td>10</td><td>2015/3/29</td><td>95.4</td><td>49.4</td><td>28.6</td><td>14.2</td><td>3.8</td><td>0.41</td><td>0.5</td><td>0.52</td><td>0.29</td></tr><tr><td>11</td><td>2015/3/30</td><td>96.3</td><td>51.5</td><td>29.9</td><td>15</td><td>4.1</td><td>0.45</td><td>0.5</td><td>0.57</td><td>0.3</td></tr><tr><td>12</td><td>2015/3/31</td><td>94.1</td><td>53.1</td><td>31.4</td><td>14.2</td><td>3.8</td><td>0.46</td><td>0.45</td><td>0.54</td><td>0.3</td></tr><tr><td>13</td><td>2015/4/1</td><td>97.2</td><td>54.7</td><td>35</td><td>15.4</td><td>4.3</td><td>0.43</td><td>0.44</td><td>0.53</td><td>0.32</td></tr><tr><td>14</td><td>2015/4/2</td><td>97.4</td><td>49.6</td><td>28.4</td><td>15</td><td>4.6</td><td>0.42</td><td>0.53</td><td>0.57</td><td>0.29</td></tr><tr><td>15</td><td>2015/4/7</td><td>96.3</td><td>53.2</td><td>28.2</td><td>12.8</td><td>3.8</td><td>0.53</td><td>0.45</td><td>0.55</td><td>0.28</td></tr><tr><td>16</td><td>2015/4/12</td><td>98.2</td><td>52.6</td><td>29.9</td><td>15.2</td><td>4.4</td><td>0.48</td><td>0.51</td><td>0.55</td><td>0.3</td></tr><tr><td>17</td><td>2015/4/13</td><td>97.2</td><td>50.5</td><td>28.6</td><td>14.6</td><td>4.6</td><td>0.44</td><td>0.51</td><td>0.55</td><td>0.29</td></tr><tr><td>18</td><td>2015/4/14</td><td>98.4</td><td>53.3</td><td>27.8</td><td>15.4</td><td>4</td><td>0.55</td><td>0.55</td><td>0.55</td><td>0.32</td></tr><tr><td>19</td><td>2015/4/16</td><td>96.2</td><td>54.9</td><td>28.9</td><td>15</td><td>4.2</td><td>0.58</td><td>0.52</td><td>0.51</td><td>0.32</td></tr><tr><td>20</td><td>2015/4/17</td><td>97.9</td><td>52.1</td><td>29.1</td><td>15.7</td><td>3.5</td><td>0.48</td><td>0.54</td><td>0.41</td><td>0.29</td></tr><tr><td>21</td><td>2015/4/18</td><td>98.2</td><td>51</td><td>28.7</td><td>14.2</td><td>4.1</td><td>0.46</td><td>0.49</td><td>0.51</td><td>0.29</td></tr></tbody></table><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">表8，ATb-25日常施工级配检测数据</span><br></pre></td></tr></table></figure><p>利用数据分析软件SPSS建立动态控制图，以Up为例，其他同理，设定规则限制以及控制指标上下限及目标值，此次动态图设置目标值为生产级配的Up值为0.30，上下限为Up±0.03，规则限制±3sigma进行警报，通过对21次台班沥青混合料级配筛分结果的跟踪，均符合规范及设计要求。但从图3得到的是Up施工中稳定性并不好，这里排除样品取样误差，但整体指标无违返规则，上控制线（UCL）=0.336，下控制线（LCL）=0.262。利用动态控制图，可以得到3月17日施工Up=0.28， CA比=0.44两指标同时反应出粗集料偏多，而在施工过程中混合料容易产生离易， 同天FAf比=0.61说明细集料细颗粒偏多，级配很敏感，高温稳定性差，0.075mm筛孔通过率（%）=4.7和FAf比反应结果一致。该台班虽然筛分结果符合要求，我们也应该进行复测，同时对细集料各指标进行试验，再通过拌和站热筛级配进行复核。在图6中4月17日，FAf比发生违反控制点警报提示（-3sigma超界）。通过查找原因为除尘效能提高引起，施工前一晚拌和站进行布袋除。因此动态控制图很容易找出生产过程中问题。</p><p><img src="http://p5mgr4bgm.bkt.clouddn.com/屏幕快照 2018-04-06 下午3.33.20.png" alt="屏幕快照 2018-04-06 下午3.33.20-w600"></p><p>通过建立施工动态管理图对级配进行生产过程监测，很直观的发现问题，做到试验数据指导施工的宗旨，进一步提高质量过程控制精细化科学化。在试验过程中我们应该尽可能消除样品取样误差，特别是大粒径混合料取样时更加重视。贝雷法提供给我们很好的结构设计理念，但它只是确定混合料级配的过程，应该结合马歇尔法才能进行完整的沥青混合料配合比设计。</p><h2 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h2><p>贝雷法在配合比设计过程能够更加系统评价级配骨架的嵌挤情况，并且可以应用到日常施工过程质量控制中，在ATb-25沥青碎石上基层配合比设计中建议贝雷参数控制范围：CA（0.4-0.6）之间具有很好的骨架嵌挤效果，良好的高温稳定与耐外性； FAC（0.4-0.6）与FAf（0.3-0.6）之间具有适合的VV与VMA沥青混合料体积特征,施工过程中混合料稳定且容易碾压。</p><blockquote><ol><li>引用级配均匀性对级配粗细可以更加直观进行判断，建议ATb-25施工中Up的范围为配合比选定级配Up±3进行控制。</li><li>在保证样品具有代表性的前提下，施工过程中纯粹使用上下限范围对级配进行控制是不够的完善，在生产过程中应该制作级配动态控制图进行实时监测，在管理图制作中建议添加CA、FAc、FAf、Up、关键筛孔与0.075mm筛孔通过率等指标。</li><li>试验过程中我们应该尽可能消除样品取样误差，特别是大粒径混合料取样时更加重视，马歇尔配合比设计法结合贝雷法可以更加科学设计出优良的沥青混合料配合比。</li></ol></blockquote><hr>]]></content>
      
      <categories>
          
          <category> 沥青混合料 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 级配 </tag>
            
            <tag> 沥青混合料 </tag>
            
            <tag> 论文 </tag>
            
            <tag> 沥青路面 </tag>
            
            <tag> 贝雷参数 </tag>
            
            <tag> 压实度 </tag>
            
            <tag> 工程质量 </tag>
            
            <tag> 动态管理 </tag>
            
            <tag> SPSS </tag>
            
            <tag> 均匀性 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>浅谈正则表达式中的分组和引用</title>
      <link href="//2016/regular-expression-group.html"/>
      <url>//2016/regular-expression-group.html</url>
      <content type="html"><![CDATA[<p>由正则表达式如何匹配相同字符出发，讲讲正则表达式中的选择、分组和引用。</p><h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>在外刊君读者群中看到有人提出这样的一个需求：</p><blockquote><p>把字符串切成连续相同字符的正则怎么写？比如<code>abbcccdddd</code>切成<code>a,bb,ccc,dddd</code></p></blockquote><p>之前我对正则表达式也是略有研究，想尝试一下。其实我对正则表达式的学习基本完全来源于犀牛书的第10章，真正看懂这一章，我觉得操作正则表达式应该不在话下。</p><a id="more"></a><h2 id="我的答案"><a href="#我的答案" class="headerlink" title="我的答案"></a>我的答案</h2><p>先给出我的答案吧：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'abbccddd'</span>.match(<span class="regexp">/(\w)\1*/g</span>) <span class="comment">// ["a", "bb", "cc", "ddd"]</span></span><br></pre></td></tr></table></figure><h2 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h2><p>拿到这个问题，首先要匹配字符<code>[a-zA-Z0-9]</code>，这里直接使用<code>\w</code>。然后是全局匹配，在最后加上<code>g</code>。难点在于怎么判断重复。</p><p>翻看了犀牛书后，又读了一遍分组和引用的部分。使用小括号<code>()</code>将字符作为一个最小单元，同时小括号还能记忆这个组合相匹配的字符串。再使用反斜杠<code>\</code>引用前面分组的表达式，数字1表示第一个小括号。这时完成了2个字符重复的要求。最后再使用<code>*</code>来匹配出现0次或n次。这个正则表达式就写完了。</p><p>下面详细说说分组和引用。</p><p><strong>正则表达式的选择、分组和引用字符表</strong></p><table><thead><tr><th>字符</th><th>含义</th></tr></thead><tbody><tr><td>`</td><td>`</td><td>选择，匹配的是该符号左边的子表达式或右边的子表达式</td></tr><tr><td><code>(...)</code></td><td>组合，将几个项组合为一个单元，这个单元可通过<code>*</code> <code>+</code> <code>?</code> `</td><td>` 等符号加以修饰，<strong>而且可以记住和这个组合相匹配的字符串以提供伺候的引用使用</strong></td></tr><tr><td><code>(?:...)</code></td><td>只组合，把项组合到一个段元，但不记忆与该组相匹配的字符</td></tr><tr><td><code>\n</code></td><td>和第n个分组第一次匹配的字符相匹配，组是圆括号中的子表达式（也有可能是嵌套的），组索引是从左到右的左括号数，<code>(?:</code>形式的分组不编码</td></tr></tbody></table>]]></content>
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 正则 </tag>
            
            <tag> Regular </tag>
            
            <tag> 分组 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>应用SPSS进行沥青路面压实度的动态控制</title>
      <link href="//2015/%E5%BA%94%E7%94%A8SPSS%E8%BF%9B%E8%A1%8C%E6%B2%A5%E9%9D%92%E8%B7%AF%E9%9D%A2%E5%8E%8B%E5%AE%9E%E5%BA%A6%E7%9A%84%E5%8A%A8%E6%80%81%E6%8E%A7%E5%88%B6.html"/>
      <url>//2015/%E5%BA%94%E7%94%A8SPSS%E8%BF%9B%E8%A1%8C%E6%B2%A5%E9%9D%92%E8%B7%AF%E9%9D%A2%E5%8E%8B%E5%AE%9E%E5%BA%A6%E7%9A%84%E5%8A%A8%E6%80%81%E6%8E%A7%E5%88%B6.html</url>
      <content type="html"><![CDATA[<h2 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h2><blockquote><p>本文主要通过介绍应用“贝雷法”对级配进行系统设计与检验，在生产管理过程应用SPSS对贝雷参数进行动态跟踪管理，并通过矿料间隙率（VMA）与贝雷参数的回归方程的模型建立，在沥青碎石混合料（ATb-25）中的应用，从别一个角度介绍沥青混凝土路面施工过程中对混合料级配的质量管理与控制措施，从而保障沥青路面施工质量。</p></blockquote><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>我国在沥青路面配合设计过程中的级配选定主要通过规范与设计图给予的上下限范围，在范围内进行选定，同时要求配合比设计人员具有一定的工作经验才能选择出一条合理具有实施性的级配线，所以在选定级配时具有很强的主观性，而同时，这十几年高速公路大建设过程中，伴随社会经济不断发展，交通量猛增，造成早期路面损坏较为严重，在病害的原因分析过程中，有不少因级配设计的不合理所造成的。本文主要通过介绍贝雷法及贝雷参数在湄渝高速公路三明段ATb-25柔性基层配合比级配上选定与施工过程中的应用，并取得很好效果。</p><h2 id="贝雷法级配检验分析"><a href="#贝雷法级配检验分析" class="headerlink" title="贝雷法级配检验分析"></a>贝雷法级配检验分析</h2><p>“贝雷法”级配设计法是美国伊利诺州交通局Robert D. Bailey先生研究的一套系统的设计和检验沥青混合料级配的方法，该级配被称为嵌挤密实结构级配设计法。适用于多类沥青混合料配合比设计,如Superpave方法、马歇尔设计法等结合使用，在我国与马歇尔设计法配合使用，能够很好设计出良好的嵌挤结构，进一步提高沥青混合料的高温稳定性与耐久性。</p><p>贝雷法主要特征是通过控制粗细集料关键筛孔尺寸的通过率比例关系，让矿料级配获得良好的骨架结构。利用平面圆作为数学模型，以干涉理论作为理论设计依据，考虑了不同集料性状组合和组合后的空隙。粗颗粒间空隙尺寸的大小取决于颗粒形状和尺寸，<code>如图1</code>所示。</p><p><img src="http://p5mgr4bgm.bkt.clouddn.com/15229074398272.jpg" alt="图一-w600"><br><a id="more"></a></p><p>当颗粒全为圆形时<code>如图1</code> (a) ，空隙尺寸为颗粒直径d的0.15倍,即0.15d;当组成颗粒中有两个圆面和一个平面时,<code>如图1</code> (b)，空隙尺寸为0.22d;当一个圆面的和两个平面的颗粒组合时，如图 1(c)，空隙尺寸为0.24d;当颗粒全为平面时,<code>如图1</code>(d) ,则空隙尺寸为0.28d。系数0.22是这4种情形的平均值。并并将最大公称粒径(NMPS)尺寸0.22倍对应的标准筛网尺寸作级配粗细集料的分界点，高于其的集料为粗集料，反之为细集料，并与计算值最靠近的标准筛孔尺寸当作组成集料的第一控制筛孔（PCS）。细集料亦依照该原理划分为细集料里的粗集料以及细集料里的细集料，且产生依次的填充状态，作为第二控制筛（SCS）,SCS=PCS×0.22,第三控制筛孔（TCS）则是,TCS=SCS×0.22。合成级配比例确定之后，贝雷法提出3个参数对其展开分析，分别为：矿料中粗集料比（CA）, 矿料中细集料的粗料比（FAc）及矿料中细集料的细料比（FAf）。</p><h3 id="CA比"><a href="#CA比" class="headerlink" title="CA比"></a>CA比</h3><p>用于评价矿料中粗集料的含量和分析空隙特征。</p><p>$$<br>  CA=\frac{P_{D/2}-P_{PCS}}{100-P_{D/2}}<br>$$</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">式中：为是粒径等于Ｄ/2(Ｄ是公称最大粒径)的通过率,%；为第一控制筛孔的通过率,%。</span><br></pre></td></tr></table></figure><p>我国在使用贝雷法展开级配设计的时候,大体均是应用CA来检验挑选的级配,觉得在CA处于0.4到0.8的区间范围时,粗集料则可以出现嵌挤亦或是骨架。以ATb-25沥青碎石混合料为例，如果CA较小,通常低于0. 4时,沥青混合料非常易于出现离析,而伴随CA增长, 沥青混合料则愈加难以压实。如果CA趋近于1.0时,粗集料里的任一部分均无法构成粗集料骨架。虽然此类混合料很难离析,然而因为其包括许多干涉料,导致粗集料部分没办法获得较好填充,而且沥青混合料很难压实,出现推挤的可能性较大。如果CA 比高于1.0时,粗集料里的细料部分对于粗集料骨架的构成具有主导性效用，粗料部分开始作为填塞料,导致粗集料骨架的间隙封闭。因此考虑最佳压实特性的CA范围是0.4-0.6间，依据不一样的最大公称尺寸得到CA比范围也存在一定差异。</p><h3 id="FAc比"><a href="#FAc比" class="headerlink" title="FAc比"></a>FAc比</h3><p>反映细集料中粗料部分与细料部分的嵌挤、填充情况,计算公式为：</p><p>$$<br>F_{ac}=\frac{P_{Scs}}{P_{Pcs}}<br>$$</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">式中：为第二控制筛孔的通过率，%。</span><br></pre></td></tr></table></figure><p>FAc变大,细料成分占比变大让细集料变成更密集的结构。可是比值大,说明细料太多,在0.45次级配图里就有“驼峰”曲线形成。产生以下不良后果:1)减少混合料的强度与抵御永久变形的能力;2)集料VMA不合格,不可以确保足够的沥青膜厚;3)混合料对沥青比例很敏锐,沥青的细小变化均会让混合料变得十分不稳定;4)也许导致压实不稳定,形成重大的推移、开裂。假如FAc比值低,细集料里的粗料空隙用很少的细料填充,则会提升VAM与混合料的空隙率。在 0.45次方级配图里曲线会出现凹状,会形成难压实状况。在3个参数里 FAc 值对混合料VAM作用最明显。通过以上可知细集料构成非常重要,在展开级配设计时 ,不可以只是采取0~5mm的一种规格材料,通常0.3~2.36mm之间的材料没办法符合级配规定,粉尘又多让比值太大亦或者太小,导致不良级配,对混合料的施工特性与路用性能产生不好作用。用ATb-25沥青碎石混合料当做案例，提议掌控在0.4-0.6间。</p><h3 id="FAf"><a href="#FAf" class="headerlink" title="FAf"></a>FAf</h3><p>比体现了合成集料中最细一级的嵌挤状况,计算公式为：</p><p>$$<br>  F_{af}=\frac{P_{Tcs}}{P_{Scs}}<br>$$</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">式中：为第三控制筛孔的通过率，%。</span><br></pre></td></tr></table></figure><p>细集料中的 FAf 能够评价细集料中的细料成分的填充特性。和FAc一样,其值影响混合料的体积特性。FAf增加混合料的空隙减少；FAf减小VMA值增大。以ATb-25沥青碎石混合料为例，建议ATb-25的FAf在范围0.4-0.6间。</p><h2 id="贝雷参数在配合比设计中的应用"><a href="#贝雷参数在配合比设计中的应用" class="headerlink" title="贝雷参数在配合比设计中的应用"></a>贝雷参数在配合比设计中的应用</h2><p>以三明湄渝高速公路莘口-明溪路面B1合同段ATb-25沥青碎石，密级配混合料为例，粗细集料分档分别为(19-26.5)mm：(9.5-19)mm：(4.75-9.5)mm：(0-4.75)mm：矿粉=23.5%：32%：12%：31.5%：1%，如表1所示。</p><table><thead><tr><th>规格(mm)</th><th>比例</th><th>31.5</th><th>26.5</th><th>19</th><th>16</th><th>13.2</th><th>9.5</th><th>4.75</th><th>2.36</th><th>1.18</th><th>0.6</th><th>0.3</th><th>0.15</th><th>0.075</th></tr></thead><tbody><tr><td>泰勒线</td><td>横坐标</td><td>4.723</td><td>4.37</td><td>3.762</td><td>3.482</td><td>3.193</td><td>2.754</td><td>2.016</td><td>1.472</td><td>1.077</td><td>0.795</td><td>0.582</td><td>0.426</td><td>0.312</td></tr><tr><td>(19-26.5)</td><td>23.5</td><td>100</td><td>89.6</td><td>1.2</td><td>0.8</td><td>0.7</td><td>0.6</td><td>0.6</td><td>0.6</td><td>0.6</td><td>0.6</td><td>0.6</td><td>0.5</td><td>0.5</td></tr><tr><td>(9.5-19)</td><td>32</td><td>100</td><td>100</td><td>73.5</td><td>44.2</td><td>22</td><td>2.1</td><td>0.5</td><td>0.5</td><td>0.5</td><td>0.5</td><td>0.4</td><td>0.2</td><td>0.2</td></tr><tr><td>(4.75-9.5)</td><td>12</td><td>100</td><td>100</td><td>100</td><td>100</td><td>100</td><td>82.3</td><td>1.5</td><td>1</td><td>0.9</td><td>0.8</td><td>0.7</td><td>0.6</td><td>0.5</td></tr><tr><td>(0-4.75)</td><td>31.5</td><td>100</td><td>100</td><td>100</td><td>100</td><td>100</td><td>100</td><td>87.2</td><td>60.5</td><td>42.6</td><td>29.3</td><td>18.8</td><td>13.4</td><td>9.2</td></tr><tr><td>矿粉</td><td>1</td><td>100</td><td>100</td><td>100</td><td>100</td><td>100</td><td>100</td><td>100</td><td>100</td><td>100</td><td>100</td><td>100</td><td>95</td><td>80</td></tr><tr><td>合成级配</td><td>/</td><td>100</td><td>97.6</td><td>68.3</td><td>58.8</td><td>51.7</td><td>43.2</td><td>28.9</td><td>20.5</td><td>14.8</td><td>10.6</td><td>7.3</td><td>5.4</td><td>3.9</td></tr></tbody></table><p><img src="http://p5mgr4bgm.bkt.clouddn.com/屏幕快照 2018-04-05 下午1.58.03.png" alt="屏幕快照 2018-04-05 下午1.58.03-w600"></p><table><thead><tr><th>级配控制点</th><th>计算筛孔（mm）</th><th>套用筛孔（mm）</th><th>通过率（%）</th></tr></thead><tbody><tr><td>公称最大粒径（NMPS）</td><td>26.5</td><td>26.5</td><td>97.6</td></tr><tr><td>1/2的公称最大粒径（D/2）</td><td>13.2</td><td>13.2</td><td>51.7</td></tr><tr><td>第一控制筛孔（PCS）</td><td>5.83</td><td>4.75</td><td>28.9</td></tr><tr><td>第二控制筛孔（SCS）</td><td>1.05</td><td>1.18</td><td>14.8</td></tr><tr><td>第三控制筛孔（TCS）</td><td>0.26</td><td>0.3</td><td>7.3</td></tr></tbody></table><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">表3 级配控制点汇总</span><br></pre></td></tr></table></figure><p>因为贝雷法对集料颗粒假设是近似圆或立方体,认为直径d从0.15～0.28均不会对级配形成影响,因此为了使选用的PCS控制计算筛孔与级配中的固定筛孔一致,可以采用近似筛孔。</p><p><img src="http://p5mgr4bgm.bkt.clouddn.com/屏幕快照 2018-04-05 下午2.00.43.png" alt="屏幕快照 2018-04-05 下午2.00.43-w600"></p><p>笔者通过骨架接触度 (SSC,stone-on-stone contact)对级配进行评价，如表5计算所得SSC=91.8％,该级配属于紧排骨架密实结构。根据美国NCHRP第386号项目的研究成果,沥青混合料的级配优选可以采用混合料中的集料嵌挤状况来进行评估。本次研究借鉴了这一研究成果,主要考察了表征ATb-25混合料中粗集料嵌挤状况的参数SSC, 对于当骨架接触度SSC&gt;90％时，混合料是紧排骨架密实结构；85％≤骨架接触度SSC≤90％时，混合料是松排骨架密实结构骨架接触度SSC≤85％，混合料是悬浮密实结构。</p><table><thead><tr><th>参数</th><th>指标</th></tr></thead><tbody><tr><td>13.2mm以上集料的捣实密度(Dca),g/cm3</td><td>1.31</td></tr><tr><td>混合料沥青用量(pb),%</td><td>3.88</td></tr><tr><td>混合料试件毛体积密度(rf),g/cm3</td><td>2.42</td></tr><tr><td>粗集料通过率，%</td><td>51.7</td></tr><tr><td>混合料13.2mm以上颗粒密度(Dcm),g/cm3</td><td>1.203</td></tr><tr><td>骨架接触度(SSC),%</td><td>91.8</td></tr></tbody></table><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">表5 SSC计算评估</span><br></pre></td></tr></table></figure><p>应用体积法预估最佳沥青用量，根据沥青设计比设计方法，最终选定ATb-25的最佳沥青用量为3.8%，并进行混合料路用性能检测，结果显示：残留强度比（%）:90.3&gt;75；旋转压实反算125次压实空隙率：5.4。同时在配合比验证阶段的试验路试辅中，现场混合合料均匀整体无离析，压实度与芯样空隙率均满足设计要求，以上指标均验证该级配具有良好高温稳定性与施工和易性。</p><h2 id="贝雷参数在施工过程中的动态管理"><a href="#贝雷参数在施工过程中的动态管理" class="headerlink" title="贝雷参数在施工过程中的动态管理"></a>贝雷参数在施工过程中的动态管理</h2><p>在高速公路的项目管理过程中应用SPSS软件提供的数值统计分析功能可以对一些质量指标进行统计分析，有效提高数据统计分析的工作效率与精确度，为工程质量管理提供科学依据。本文通过例举三明湄渝高速公路莘口-明溪路面B1合同段ATb-25上基层施工，施工管理过程中对沥青混合料级配的贝雷参数进行动态跟踪与分析，判断混合料级配的稳定性。采集数值见表6。</p><table><thead><tr><th>序号</th><th>施工日期</th><th>26.5</th><th>13.2</th><th>4.75</th><th>1.18</th><th>0.3</th><th>CA比</th><th>FAc比</th><th>FAf比</th><th>VMA</th></tr></thead><tbody><tr><td>1</td><td>2014/1/18</td><td>98.2</td><td>51.1</td><td>28.8</td><td>14.6</td><td>6.8</td><td>0.456</td><td>0.507</td><td>0.466</td><td>13.25</td></tr><tr><td>2</td><td>2015/3/13</td><td>98.8</td><td>51</td><td>27.5</td><td>15.3</td><td>8.6</td><td>0.48</td><td>0.556</td><td>0.562</td><td>13.06</td></tr><tr><td>3</td><td>2015/3/17</td><td>95.9</td><td>50.2</td><td>28.1</td><td>14</td><td>8.5</td><td>0.444</td><td>0.498</td><td>0.607</td><td>12.88</td></tr><tr><td>4</td><td>2015/3/18</td><td>96.5</td><td>53.8</td><td>27.3</td><td>16.4</td><td>8.3</td><td>0.574</td><td>0.601</td><td>0.506</td><td>13.36</td></tr><tr><td>5</td><td>2015/3/19</td><td>95.8</td><td>52</td><td>29.5</td><td>16</td><td>8.8</td><td>0.469</td><td>0.542</td><td>0.55</td><td>13.6</td></tr><tr><td>6</td><td>2015/3/21</td><td>97.2</td><td>56.4</td><td>30.8</td><td>13.8</td><td>7.6</td><td>0.587</td><td>0.448</td><td>0.551</td><td>13.75</td></tr><tr><td>7</td><td>2015/3/24</td><td>95.8</td><td>50.7</td><td>27.4</td><td>13.9</td><td>8</td><td>0.473</td><td>0.507</td><td>0.576</td><td>13.4</td></tr><tr><td>8</td><td>2015/3/25</td><td>96.4</td><td>52.5</td><td>28.8</td><td>13.8</td><td>7.6</td><td>0.499</td><td>0.479</td><td>0.551</td><td>13.32</td></tr><tr><td>9</td><td>2015/3/28</td><td>98.7</td><td>51.9</td><td>28.4</td><td>15.6</td><td>7.5</td><td>0.489</td><td>0.549</td><td>0.481</td><td>13.51</td></tr><tr><td>10</td><td>2015/4/17</td><td>97.9</td><td>52.1</td><td>29.1</td><td>15.7</td><td>6.5</td><td>0.48</td><td>0.54</td><td>0.414</td><td>13.56</td></tr><tr><td>11</td><td>2015/4/18</td><td>98.2</td><td>51</td><td>28.7</td><td>15.2</td><td>8.2</td><td>0.455</td><td>0.53</td><td>0.539</td><td>13.31</td></tr><tr><td>12</td><td>2015/4/23</td><td>97.1</td><td>52</td><td>29.4</td><td>15.8</td><td>8.5</td><td>0.471</td><td>0.537</td><td>0.538</td><td>13.28</td></tr><tr><td>13</td><td>2015/5/9</td><td>97.3</td><td>50.1</td><td>27</td><td>14.6</td><td>8</td><td>0.463</td><td>0.541</td><td>0.548</td><td>13.38</td></tr><tr><td>14</td><td>2015/5/12</td><td>98.4</td><td>52.8</td><td>28.8</td><td>14.5</td><td>7.7</td><td>0.508</td><td>0.503</td><td>0.531</td><td>13.12</td></tr><tr><td>15</td><td>2015/5/13</td><td>95.8</td><td>51.5</td><td>29.4</td><td>14.6</td><td>8.6</td><td>0.456</td><td>0.497</td><td>0.589</td><td>13.23</td></tr><tr><td>16</td><td>2015/5/14</td><td>96.2</td><td>53.1</td><td>30.9</td><td>15.3</td><td>8.2</td><td>0.473</td><td>0.495</td><td>0.536</td><td>13.25</td></tr><tr><td>17</td><td>2015/5/15</td><td>98.1</td><td>50.7</td><td>28.1</td><td>14.9</td><td>7.9</td><td>0.458</td><td>0.53</td><td>0.53</td><td>13.3</td></tr><tr><td>18</td><td>2015/5/17</td><td>97.6</td><td>51.8</td><td>28.9</td><td>14.3</td><td>8.3</td><td>0.475</td><td>0.495</td><td>0.58</td><td>13.28</td></tr></tbody></table><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">表6 施工贝雷参数采集表</span><br></pre></td></tr></table></figure><p>采用质量控制图，个体与移动全距的办法，对CA、FAc、FAf进行动态跟踪，主要参数（主要为：a）在±3sigma范围；b）正负中线8个百分点；c）最后3项中的2项±2sigma）进行范围监控，并设置CA范围上限：0.6，下限：0.4，目标值为设计级配CA值：0.47。FAc与FAf同理设置。</p><p>图2对CA进行动态跟踪，其中控制中心线为0.484；控制上限线（UCL）=μ+3σ=0.604；控制下限线（LCL）=μ-3σ=0.364。动态走势图对3月21日指标进行红色报警，虽然，该日CA=0.587在CA范围内（CA设置范围值：0.4-0.6）,但超出范围监控c项（最后3项中的2项±2sigma），我们应通过结合其他指标与现场施工情况分析原因。</p><p>如图3分析出CA在整体生产过程中处于稳定状态，各项指标均正常，其中控制中心线为0.536；控制上限线（UCL）=μ+3σ=0.660；控制下限线（LCL）=μ-3σ=0.412,容量指见表7。</p><p><img src="http://p5mgr4bgm.bkt.clouddn.com/15229083852538.jpg" alt="1-w600"></p><p><img src="http://p5mgr4bgm.bkt.clouddn.com/15229084410809.jpg" alt="2-w600"></p><h2 id="贝雷参数与VMA建立模型"><a href="#贝雷参数与VMA建立模型" class="headerlink" title="贝雷参数与VMA建立模型"></a>贝雷参数与VMA建立模型</h2><p>贝雷参数在沥青混合料中的应用，可以使配合比设计中对级配的选定有了更深了解，从而更好的优化级配线，同时，矿料间隙率（VMA）在沥青混合料体积参数指标中非常重要，我们可以通过贝雷参数与VMA建立模型，推导出经验公式，能够服务工程项目，积累工程经验与提高工程管理水平。</p><p>笔者以ATb-25柔性基层施工的前9个工作日的矿料间隙率（VMA）实测指标（见表8），采用非线性回归分析进行模型拟合，ＶＭＡ为因变。</p><p>模型公式：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ＶＭＡ＝a+b*FAC+c*CA*CA+d*FAc*FAc+e*FAf*FAf+f*CA*FAc+g*CA*FAf+h*FAc*FAf</span><br></pre></td></tr></table></figure></p><table><thead><tr><th>工作日</th><th>1</th><th>2</th><th>3</th><th>4</th><th>5</th><th>6</th><th>7</th><th>8</th><th>9</th></tr></thead><tbody><tr><td>VMA</td><td>13.25</td><td>13.06</td><td>12.88</td><td>13.36</td><td>13.6</td><td>13.75</td><td>13.4</td><td>13.32</td><td>13.51</td></tr></tbody></table><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">表8   马歇尔试验VMA结果</span><br></pre></td></tr></table></figure><p>采用列文伯格-马夸尔特法（Levenverg-Marquardt），设置平方和收敛性和参数收敛性为1e-8，计算出迭代数为5.1时连续残差平方和之间的相对减少量(SSCON)最多为 1E-8时停止运算，如表9所示。</p><table><thead><tr><th>迭代数a</th><th>残差平方和</th><th>a</th><th>b</th><th>c</th><th>d</th><th>e</th><th>f</th><th>g</th><th>h</th></tr></thead><tbody><tr><td>1</td><td>1604.282</td><td>0</td><td>0</td><td>0</td><td>0</td><td>0</td><td>0</td><td>0</td><td>0</td></tr><tr><td>1.1</td><td>0.181</td><td>-2.169</td><td>56.043</td><td>-6.747</td><td>-37.257</td><td>-14.588</td><td>-21.962</td><td>41.488</td><td>-10.567</td></tr><tr><td>2</td><td>0.181</td><td>-2.169</td><td>56.043</td><td>-6.747</td><td>-37.257</td><td>-14.588</td><td>-21.962</td><td>41.488</td><td>-10.567</td></tr><tr><td>2.1</td><td>0.139</td><td>-29.782</td><td>158.718</td><td>7.594</td><td>-149.253</td><td>-11.244</td><td>-12.979</td><td>14.9</td><td>7.155</td></tr><tr><td>3</td><td>0.139</td><td>-29.782</td><td>158.718</td><td>7.594</td><td>-149.253</td><td>-11.244</td><td>-12.979</td><td>14.9</td><td>7.155</td></tr><tr><td>3.1</td><td>0.093</td><td>-81.579</td><td>352.641</td><td>51.898</td><td>-392.32</td><td>-12.612</td><td>13.463</td><td>-74.509</td><td>91.483</td></tr><tr><td>4</td><td>0.093</td><td>-81.579</td><td>352.641</td><td>51.898</td><td>-392.32</td><td>-12.612</td><td>13.463</td><td>-74.509</td><td>91.483</td></tr><tr><td>4.1</td><td>0.086</td><td>-111.212</td><td>463.673</td><td>78.402</td><td>-533.648</td><td>-13.982</td><td>29.22</td><td>-128.276</td><td>143.277</td></tr><tr><td>5</td><td>0.086</td><td>-111.212</td><td>463.673</td><td>78.402</td><td>-533.648</td><td>-13.982</td><td>29.22</td><td>-128.276</td><td>143.277</td></tr><tr><td>5.1</td><td>0.086</td><td>-111.212</td><td>463.671</td><td>78.402</td><td>-533.645</td><td>-13.982</td><td>29.22</td><td>-128.275</td><td>143.275</td></tr></tbody></table><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">表9迭代历史记录b</span><br></pre></td></tr></table></figure><p>通过参数评估值可以分析模型影响显著的变量有d、b和h，分别为FAf、CA、CAFAc，而影响相对不显著的变量有e,f分别为CACA和FAc*FAc（见表10未调整前参数估计值表），模型的拟合优度检验结果显示Ｒ2为0.846，使用德宾-沃森统计量 (Durbin-Watson)检验残差是否存在自相关，其取值范围介于0~4之间，其值越接近2，说明变量之间是相互不依存的, 本文拟合优度检验结果为1.605. 可以基本确定残差是不依存的。<br><img src="http://p5mgr4bgm.bkt.clouddn.com/屏幕快照 2018-04-05 下午2.48.22.png" alt="屏幕快照 2018-04-05 下午2.48.22-w600"></p><p><img src="http://p5mgr4bgm.bkt.clouddn.com/屏幕快照 2018-04-05 下午2.28.59.png" alt="屏幕快照 2018-04-05 下午2.28.59-w600"></p><blockquote><p>笔者决定取消e、f变量，重新建模，调整模型公式为VMA= a+b<em>FAc+c</em>CA<em>CA+d</em>FAc<em>FAc +g</em>CA<em>FAc+h</em>FAc*FAc。拟合优度检验结果显示Ｒ2为0.822，拟合优度检验结果Durbin-Watson为1.605。</p></blockquote><p><img src="http://p5mgr4bgm.bkt.clouddn.com/屏幕快照 2018-04-05 下午2.29.21.png" alt="屏幕快照 2018-04-05 下午2.29.21-w600"></p><p>通过线性回归置性区间采用95%水平值进行方差分析(Anova)，回归模型F值为32.351, 显著性(Sig.)值为0.001 &lt;0.05, 可以判断采用的这个回归模型是有统计学意义的, 系数检验值（见表13）。</p><p><img src="http://p5mgr4bgm.bkt.clouddn.com/屏幕快照 2018-04-05 下午2.29.34.png" alt="屏幕快照 2018-04-05 下午2.29.34-w600"></p><p><strong>最终得出回归方程</strong>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">VMA=-93.935+397.918FAc+52.759CA2-409.426FAc2-62.117CA*FAf+54.764FAc*FAf。</span><br></pre></td></tr></table></figure><p><img src="http://p5mgr4bgm.bkt.clouddn.com/屏幕快照 2018-04-05 下午2.29.51.png" alt="屏幕快照 2018-04-05 下午2.29.51-w600"></p><p>我们对矿料间隙率（VMA）-贝雷参数回归方程进行验证数据（见表14），前9个工作日为回归数据值，后9个工作日为验证值，并采用独立样本T检验，置信区间设置为95%，分析判断18个工作日的VMA预测值与VMA实际值两个不同总体均值之间的差异性进行检验，分析结果（见表15，表16）为显著值为0.974&gt;0.05，所有确定两总体均值之间不存在显著差异，也就是回归方程在湄渝高速公路ATB-25施工中具有指导意义。</p><p><img src="http://p5mgr4bgm.bkt.clouddn.com/屏幕快照 2018-04-05 下午2.30.15.png" alt="屏幕快照 2018-04-05 下午2.30.15-w600"><br><img src="http://p5mgr4bgm.bkt.clouddn.com/屏幕快照 2018-04-05 下午2.30.29.png" alt="屏幕快照 2018-04-05 下午2.30.29-w600"></p><h2 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h2><p>贝雷法使广大建设者在优化级配中，从单一的0.45次方级配曲线试配的经验法中解放出来，,通过贝雷法三参数可以更系统的评价混合料级配骨架嵌挤的情况。以保证混合料优良的体积特性(合适的VMA 和空隙率)和施工性能(良好的压实性能和施工和易性),从而使设计出来的混合料达到骨架密实,兼具良好的高温抗车辙能力和耐久性。</p><ul><li>应用SSC(stone-on-stone contact) 骨架接触度对贝雷法设计的级配进行评价。</li><li>项目管理过程中应用统计软件在生产过程中对贝雷参数进行动态跟踪与分析，有效提高统计分析的工作效率与精确度，为工程质量管理提供科学依据。</li><li>建立贝雷参数-VMA回归方程，项目管理人员可以在已知级配通过率情况下，预测VMA值是否合格，同时可以验证和反算马歇尔试验体积参数是否正常，为工程管理多一种管理手段与思路。</li></ul><h2 id="参与文献"><a href="#参与文献" class="headerlink" title="参与文献"></a>参与文献</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[1] William R V , William J P, Samuel H C.Bailey method for gradation selection in HMA mixture design[R] Transportation Research Circular Number E-C044,2002</span><br><span class="line">[2] 曹卫东 吕伟民 李晓军 《集料级配评估的贝雷法》1671-2579</span><br><span class="line">[3] 《spss统计分析》时立文著，清华大学出版社</span><br><span class="line">[4] 谢志华. 谈谈 Durbin-Watson检验[J].预测，1987,(06)</span><br></pre></td></tr></table></figure><hr>]]></content>
      
      <categories>
          
          <category> 沥青混合料 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 沥青混合料 </tag>
            
            <tag> 论文 </tag>
            
            <tag> 沥青路面 </tag>
            
            <tag> 贝雷参数 </tag>
            
            <tag> 压实度 </tag>
            
            <tag> 工程质量 </tag>
            
            <tag> 动态管理 </tag>
            
            <tag> VMA </tag>
            
            <tag> 模型 </tag>
            
            <tag> SPSS </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>在低版本 IE 中点击空 block 元素的问题</title>
      <link href="//2015/low-IE-click-empty-block-bug.html"/>
      <url>//2015/low-IE-click-empty-block-bug.html</url>
      <content type="html"><![CDATA[<h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h2><p>当我们点击一个空的、没有任何内容的 div 或者其他块级元素时。在 IE11 以下，是没有反应的。</p><h2 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h2><p>这类问题使用场景还是很普遍的。比如 UI 给了一张大图，要点击图上的某一块位置的时候。可以用一个空的 div 定位到相应的位置，然后对它进行绑定事件。</p><a id="more"></a><hr><h2 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h2><p>解决方法很简单，即给这个块级元素填充任意颜色，然后将其透明度设置为0。代码如下：</p><pre><code>background-color: #fff;opacity: 0;filter:alpha(opacity=0);</code></pre>]]></content>
      
      <categories>
          
          <category> CSS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HTML </tag>
            
            <tag> CSS </tag>
            
            <tag> IE </tag>
            
            <tag> 兼容性 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>JavaScript 阶段总结</title>
      <link href="//2015/JavaScript-Net.html"/>
      <url>//2015/JavaScript-Net.html</url>
      <content type="html"><![CDATA[<p>做了一张思维导图。总结这几个月对 JavaScript 的学习吧，也是一个复习。也是我目前的技能树。</p><a id="more"></a><p><img src="http://7q5cdt.com1.z0.glb.clouddn.com/blog-JavaScriptNet2.png" alt="JavaScriptNet"></p>]]></content>
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> HTML </tag>
            
            <tag> CSS </tag>
            
            <tag> 思维导图 </tag>
            
            <tag> 技能树 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Excel VBA数值随机不重复函数</title>
      <link href="//2015/%E9%9A%8F%E6%9C%BA%E4%B8%8D%E9%87%8D%E5%A4%8D%E6%95%B0%E5%80%BC.html"/>
      <url>//2015/%E9%9A%8F%E6%9C%BA%E4%B8%8D%E9%87%8D%E5%A4%8D%E6%95%B0%E5%80%BC.html</url>
      <content type="html"><![CDATA[ <a id="more"></a><p>代码如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">sub a()</span><br><span class="line"></span><br><span class="line">  Const bb As Integer = <span class="number">1000</span> - <span class="number">1</span></span><br><span class="line"></span><br><span class="line">  Dim RndNumber, TempArray(bb), kk(bb), i As Integer</span><br><span class="line"></span><br><span class="line">  Randomize (Timer)</span><br><span class="line"></span><br><span class="line">For i = <span class="number">0</span> To bb</span><br><span class="line"></span><br><span class="line">      TempArray(i) = i</span><br><span class="line"></span><br><span class="line">  Next i</span><br><span class="line"></span><br><span class="line">  j = <span class="number">1</span></span><br><span class="line"></span><br><span class="line">  For i = bb To <span class="number">1</span> Step <span class="number">-1</span></span><br><span class="line"></span><br><span class="line">     RndNumber = Int(i * Rnd)</span><br><span class="line"></span><br><span class="line">     kk(i) = TempArray(RndNumber) + <span class="number">1</span> <span class="string">' 随机不重复数值</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">     TempArray(RndNumber) = TempArray(i)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">     j = j + 1</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">  Next i</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">end sub</span></span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> VBA </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Excel </tag>
            
            <tag> VBA </tag>
            
            <tag> 代码 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>EXCEL VBA连接ACCESS数据库</title>
      <link href="//2015/EXCEL%20VBA%E8%BF%9E%E6%8E%A5ACCESS%E6%95%B0%E6%8D%AE.html"/>
      <url>//2015/EXCEL%20VBA%E8%BF%9E%E6%8E%A5ACCESS%E6%95%B0%E6%8D%AE.html</url>
      <content type="html"><![CDATA[<h2 id="添加数据"><a href="#添加数据" class="headerlink" title="添加数据"></a>添加数据</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line">Sub a()</span><br><span class="line"></span><br><span class="line"><span class="string">'Option Explicit</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Public myData As String, myTable As String, SQL As String</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Public cnn As ADODB.Connection</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Public rs As ADODB.Recordset</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">On Error GoTo hhh</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">myData = ThisWorkbook.Path &amp; "\SWDB.mdb"</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Set cnn = New ADODB.Connection</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    With cnn</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        .Provider = "Microsoft.Ace.OleDB.12.0"</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        .Open myData</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    End With</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">myTable = "SW01"</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">SQL = "select * from " &amp; myTable</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">for i=1 to 4 '</span>可添加<span class="number">4</span>次</span><br><span class="line"></span><br><span class="line">rs.Fields(<span class="string">"a"</span>) = Cells(<span class="number">5</span> + i, <span class="number">15</span>)</span><br><span class="line"></span><br><span class="line">next i</span><br><span class="line"></span><br><span class="line">rs.Update</span><br><span class="line"></span><br><span class="line">MsgBox <span class="string">"添加成功！"</span>, vbOKOnly + vbInformation, <span class="string">"创建数据"</span></span><br><span class="line"></span><br><span class="line">rs.Close</span><br><span class="line"></span><br><span class="line">cnn.Close</span><br><span class="line"></span><br><span class="line"><span class="built_in">Set</span> rs = Nothing</span><br><span class="line"></span><br><span class="line"><span class="built_in">Set</span> cnn = Nothing</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">hhh:</span><br><span class="line"></span><br><span class="line">MsgBox <span class="string">"添加数据时出现错误!"</span> &amp; vbCrLf &amp; <span class="string">"原因:该编号重复或数据类型不对，请查找原因."</span>, vbCritical, <span class="string">"提示！！！！"</span></span><br><span class="line"></span><br><span class="line">end sub</span><br></pre></td></tr></table></figure><a id="more"></a><h2 id="修改数据"><a href="#修改数据" class="headerlink" title="修改数据"></a>修改数据</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'Option Explicit</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Public myData As String, myTable As String, SQL As String</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Public cnn As ADODB.Connection</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Public rs As ADODB.Recordset</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">myData = ThisWorkbook.Path &amp; "\SWDB.mdb"</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Set cnn = New ADODB.Connection</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    With cnn</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        .Provider = "Microsoft.Ace.OleDB.12.0"</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        .Open myData</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    End With</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">myTable = "SWHH"</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">On Error GoTo hhh</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">SQL1 = "update " &amp; myTable &amp; " set "</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">SQL = SQL1 &amp; "盒号='</span><span class="string">" &amp; [a2] &amp; "</span><span class="string">'  , 盒质量=" &amp; [b2] &amp; " , 保存时间= " &amp; da &amp; " where 盒号='</span><span class="string">" &amp; [a2] &amp; "</span><span class="string">'"</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Set rs = cnn.Execute(SQL)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Set rs = New ADODB.Recordset</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">rs.Open SQL, cnn, adOpenKeyset, adLockOptimistic</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">rs.Close</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">cnn.Close</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Set rs = Nothing</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Set cnn = Nothing</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">hhh:</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    MsgBox "保存数据出现错误!" &amp; vbCrLf &amp; "原因:该编号重复或数据类型不对.", vbCritical, "保存数据"</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">end sub</span></span><br></pre></td></tr></table></figure><h2 id="查询数据"><a href="#查询数据" class="headerlink" title="查询数据"></a>查询数据</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'Option Explicit</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Public myData As String, myTable As String, SQL As String</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Public cnn As ADODB.Connection</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Public rs As ADODB.Recordset</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">myData = ThisWorkbook.Path &amp; "\SWDB.mdb"</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Set cnn = New ADODB.Connection</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    With cnn</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        .Provider = "Microsoft.Ace.OleDB.12.0"</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        .Open myData</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    End With</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">SQL = "select * from " &amp; myTable &amp; " where KID=" &amp; [s2] &amp; " order by ID DESC"</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Set rs = cnn.Execute(SQL)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Set rs = New ADODB.Recordset</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">rs.Open SQL, cnn, adOpenKeyset, adLockOptimistic</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">If rs.RecordCount &gt; 0 Then    </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    For i = 1 To rs.RecordCount</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">       Cells(5 + i, 2) = rs.Fields("a")</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">       rs.MoveNext</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Next i</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Else</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">       MsgBox "没有查询到相关数据", vbCritical</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">End If</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">rs.Close</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">cnn.Close</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Set rs = Nothing</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Set cnn = Nothing</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">end sub</span></span><br></pre></td></tr></table></figure><h2 id="删除数据"><a href="#删除数据" class="headerlink" title="删除数据"></a>删除数据</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">sub a()</span><br><span class="line"></span><br><span class="line"><span class="string">'Option Explicit</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Public myData As String, myTable As String, SQL As String</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Public cnn As ADODB.Connection</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Public rs As ADODB.Recordset</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">myData = ThisWorkbook.Path &amp; "\SWDB.mdb"</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Set cnn = New ADODB.Connection</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    With cnn</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        .Provider = "Microsoft.Ace.OleDB.12.0"</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        .Open myData</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    End With</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">if MsgBox("本数据删除后,将无法恢复!" &amp; vbCrLf &amp; "是否要删除?", vbQuestion + vbYesNo, "删除数据") = vbNo Then Exit Sub</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">myTable = "SW01"</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">SQL = "delete from " &amp; myTable &amp; " where  KID= " &amp; [s2]</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Set rs = cnn.Execute(SQL)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Set rs = New ADODB.Recordset</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">rs.Open SQL, cnn, adOpenKeyset, adLockOptimistic</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">MsgBox "已经成功将序号为： " &amp; [s2] &amp; "    数据删除！", vbInformation</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">rs.Close</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">cnn.Close</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Set rs = Nothing</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Set cnn = Nothing</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">end sub</span></span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> VBA </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Excel </tag>
            
            <tag> VBA </tag>
            
            <tag> ACCESS </tag>
            
            <tag> 数据库 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Weinre --WebApp 调试工具</title>
      <link href="//2015/weinre.html"/>
      <url>//2015/weinre.html</url>
      <content type="html"><![CDATA[<h2 id="什么是-weinre？"><a href="#什么是-weinre？" class="headerlink" title="什么是 weinre？"></a>什么是 weinre？</h2><p><a href="http://people.apache.org/~pmuellr/weinre/docs/latest/Home.html" target="_blank" rel="noopener">weinre官网</a> 上有两句有意思的介绍：</p><blockquote><p><strong>weinre</strong> is <strong>WE</strong>b <strong>IN</strong>spector <strong>RE</strong>mote. Pronounced like the word “winery”. Or maybe like the word “weiner”. Who knows, really.</p><p><strong>weinre</strong> is a debugger for web pages, like FireBug (for FireFox) and Web Inspector (for WebKit-based browsers), except it’s designed to work remotely, and in particular, to allow you debug web pages on a mobile device such as a phone.</p></blockquote><p>上面说 weinre 是一个远程 web 调试器。说到了它的发音，还挺幽默，哈哈。</p><p>远程 web 调试器。先说调试器，就像火狐中的 FireBug，Chrome 中的调试器一样。就是在浏览器中按下 <code>F12</code> 出现的那个工具。但是在手机上，你没办法按 <code>F12</code>，而这个 weinre 就是在手机上的 <code>F12</code>，与传统的不同的是，它是在手机上浏览你的 web 页面，在 PC 上查看调试工具，非常方便，这就是所谓的远程。</p><a id="more"></a><hr><h2 id="为什么用-weinre？"><a href="#为什么用-weinre？" class="headerlink" title="为什么用 weinre？"></a>为什么用 weinre？</h2><p>现代浏览器中调试工具都非常强大了，可以直接模拟手机设备，为什么还要用 weinre 这么麻烦的东西呢？</p><p>我觉得 PC 端的浏览器虽说可以模拟，但模拟毕竟还是模拟，还只是鼠标长按滑来滑去。在开发过程中，使用手机或平板直接来感受是多么的酷，指尖在移动设备的屏幕上摩擦摩擦！给人的直观感受绝对秒杀浏览器的模拟。</p><hr><h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><p>使用一种工具之前，了解它的原理和结构是很有帮助的。weinre 作为一种远程调试工具，在结构上分为三层：</p><ul><li>目标页面（target）：被调试的页面，页面已嵌入 weinre 的远程 js，下文会介绍；</li><li>Debug客户端（client）：本地的 Web Inspector 调试客户端；</li><li>Debug服务端（agent）：一个 HTTP Server，为目标页面与 Debug 客户端建立通信。</li></ul><p>三层结构如下图所示：</p><p><img src="http://muellerware.org/papers/weinre/images/http-flow.png" alt="http-flow"></p><p>weinre 的 debug 客户端是基于 Web Inspector 开发，而 Web Inspector 只与以 WebKit 为核心的浏览器兼容，所以 Weinre 的客户端只能用 Chrome 或者 Safari 打开。</p><p><a href="http://people.apache.org/~pmuellr/weinre/docs/latest/Home.html" target="_blank" rel="noopener">官网</a>上也有相应的平台支持说明：</p><ul><li><p>Platforms supported - debug server 服务端</p><p>  任何支持 node.js 的平台。</p></li><li><p>Platforms supported - debug client 客户端（跑 debugger 界面的浏览器）</p><ul><li>Google Chrome</li><li>Apple Safari</li><li>Other recent-ish WebKit-based browsers 其他基于 webkit 内核的现代浏览器</li></ul></li><li><p>Platforms supported - debug target 目标页面（在移动设备中调试运行的目标页面）</p><ul><li>Android Browser application</li><li>iOS Mobile Safari application</li><li>PhoneGap/Cordova</li><li>other</li></ul></li></ul><hr><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><ol><li>weinre 是 nodeJS 的一个应用，首先要 <a href="https://nodejs.org/" target="_blank" rel="noopener">安装 nodeJS 运行环境</a></li><li><p>使用 npm 命令，安装 weinre</p><pre><code>npm -g install weinre</code></pre><p> 安装成功后会有类似的信息：</p><pre><code>C:\Users\haoyang\AppData\Roaming\npm\weinre -&gt; C:\Users\haoyang\AppData\Roaming\npm\node_modules\weinre\weinreweinre@2.0.0-pre-I0Z7U9OV C:\Users\haoyang\AppData\Roaming\npm\node_modules\weinre├── underscore@1.7.0├── nopt@3.0.2 (abbrev@1.0.7)└── express@2.5.11 (mime@1.2.4, qs@0.4.2, mkdirp@0.3.0, connect@1.9.2)</code></pre></li></ol><hr><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><ol><li><p>启动服务</p><pre><code>weinre --boundHost -all- --httpPort 8081</code></pre><ul><li><p>–boundHost [hostname | ip address | -all-]</p><p>  The ip address to bind the server to.</p></li><li><p>–httpPort [portNumber]</p><p>  The port to run the HTTP server on.</p><p>更多配置项参考 <a href="http://people.apache.org/~pmuellr/weinre/docs/latest/Running.html" target="_blank" rel="noopener">官网的说明</a>。</p></li></ul></li><li><p>启动成功后看到如下界面：</p><p> <img src="http://7q5cdt.com1.z0.glb.clouddn.com/blog-weinre.png" alt="weinre"></p></li><li><p>给目标页面添加一行脚本</p><p> 可以看到 2.中的 Target Script 说要添加一行脚本到要调试的 web 页面中。</p><p> Target Script</p><p> You can use this script to inject the weinre target code into your web page.</p><p> <a href="http://localhost:8081/target/target-script-min.js#anonymous" target="_blank" rel="noopener">http://localhost:8081/target/target-script-min.js#anonymous</a></p><p> Example:</p><pre><code>&lt;script src=&quot;http://localhost:8081/target/target-script-min.js#anonymous&quot;&gt;&lt;/script&gt;</code></pre><p> 这里要说明一下，要把上面的 localhost 换为本机的 ip 地址。</p><p> 我们可以在命令行中 使用 <code>ipconfig</code> 得到 ip 地址，如下（当然你的可能和我的不一样）：</p><pre><code>IPv4 地址 . . . . . . . . . . . . : 192.168.1.107</code></pre><p> 即插入如下代码：</p><pre><code>&lt;script src=&quot;http://192.168.1.107:8081/target/target-script-min.js#anonymous&quot;&gt;&lt;/script&gt;</code></pre></li><li><p>进入调试页面</p><p> PC 端访问这个地址：</p><p> debug client user interface:    <a href="http://localhost:8081/client/#anonymous" target="_blank" rel="noopener">http://localhost:8081/client/#anonymous</a></p><p> 此时 target 为 none，如下图：</p><p> <img src="http://7q5cdt.com1.z0.glb.clouddn.com/blog-target-none.png" alt="target-none"></p><p> 现在我们要用手机访问同一个局域网下的这个目标页面。我们可以把要调试的页面放到这个路径下：</p><pre><code>C:\Users\haoyang\AppData\Roaming\npm\node_modules\weinre\web</code></pre><p> 通过 <a href="http://192.168.1.107:8081/FILE_NAME" target="_blank" rel="noopener">http://192.168.1.107:8081/FILE_NAME</a> 在手机上访问，就可以看到了。当然前提是同一个局域网。</p><p> 但是这样可能不太灵活，每次都要把目标页面放到指定的目录下。所以我们可以另外开一个服务器。</p><p> 我使用了基于 node.js 的 http-server 工具。将要调试的页面发布。这样我就能通过 ip 地址加端口号在手机上访问到了。</p><p> 我在手机上访问 <a href="http://192.168.1.107:8080" target="_blank" rel="noopener">http://192.168.1.107:8080</a> 打开要调试的页面，此时 debug client user interface 中自动检测到 target。就可以进行调试了！</p><p> 如下图：</p><p> <img src="http://7q5cdt.com1.z0.glb.clouddn.com/blog-target.png" alt="target"></p><p> <img src="http://7q5cdt.com1.z0.glb.clouddn.com/blog-1954958440_meitu_2.jpg" alt="phone"></p></li></ol><hr><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="http://blog.csdn.net/dojotoolkit/article/details/6280924" target="_blank" rel="noopener">Web移动应用调试工具——Weinre</a></li><li><a href="http://muellerware.org/papers/weinre/manual.html" target="_blank" rel="noopener">weinre - WEb INspector REmote</a></li><li><a href="http://blog.csdn.net/smy_yu/article/details/38922315" target="_blank" rel="noopener">webapp开发调试环境–weinre配置</a></li></ul>]]></content>
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> HTML </tag>
            
            <tag> CSS </tag>
            
            <tag> Weinre </tag>
            
            <tag> WebApp </tag>
            
            <tag> 调试工具 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>JavaScript 面向对象</title>
      <link href="//2015/JavaScript-Object-Oriented.html"/>
      <url>//2015/JavaScript-Object-Oriented.html</url>
      <content type="html"><![CDATA[<p>本文为慕课网 <a href="http://www.imooc.com/learn/277" target="_blank" rel="noopener">JavaScript深入浅出</a>  JavaScript 面向对象笔记。</p><h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><blockquote><p>面向对象程序设计（Object-oriented programming，OOP）是一种程序设计范型，同时也是一种程序开发的方法。对象指的是类的实例。它将对象作为程序的基本单元，将程序和数据封装其中，以提高软件的重用性、灵活性和扩展性。</p><p>——维基百科</p></blockquote><p>一般面向对象包含：继承，封装，多态，抽象</p><a id="more"></a><hr><h2 id="基于原型的继承"><a href="#基于原型的继承" class="headerlink" title="基于原型的继承"></a>基于原型的继承</h2><pre><code>function Foo() {    this.y = 2;}console.log(typeof Foo.prototype); //objectFoo.prototype.x = 1;var obj3 = new Foo();console.log(obj3.y); //2console.log(obj3.x); //1</code></pre><p>创建函数 <code>Foo</code> 的时候，就会有一个内置的 <code>Foo.prototype</code> 属性，并且这个属性是对象。</p><p>在使用 <code>new Foo();</code> 创建对象实例时。<code>this</code> 会指向一个对象，并且这个对象的原型会指向 <code>Foo.prototype</code> 属性。<code>this.y = 2</code> 给这个对象赋值，并把这个对象返回。把这个对象赋值给 <code>obj3</code>。</p><p><code>y</code> 是 <code>obj3</code> 上的，<code>x</code> 是 <code>obj3</code> 的原型 <code>Foo.prototype</code> 上的。</p><p><img src="http://7q5cdt.com1.z0.glb.clouddn.com/blog-prototype.png" alt="prototype"></p><hr><h3 id="prototype-属性与原型"><a href="#prototype-属性与原型" class="headerlink" title="prototype 属性与原型"></a>prototype 属性与原型</h3><p>prototype 是函数对象上预设的对象属性。</p><p>原型是对象上的原型，通常是构造器的 prototype 属性。</p><hr><h4 id="例"><a href="#例" class="headerlink" title="例"></a>例</h4><pre><code>function Person(name, age) {    this.name = name;    this.age = age;}Person.prototype.LEGS_NUM = 2;Person.prototype.ARMS_NUM = 2;Person.prototype.hi = function() {    console.log(&apos;Hi, my name is &apos; + this.name + &quot;. I&apos;m &quot; + this.age + &apos; years old now&apos;);};Person.prototype.walking = function() {    console.log(this.name + &apos; is walking...&apos;);};function Student(name, age, className) {    Person.call(this, name, age); //使 Person 中的 this 指向 Student    this.className = className;}Student.prototype = Object.create(Person.prototype);Student.prototype.constructor = Student;Student.prototype.hi = function() {    console.log(&apos;Hi, my name is &apos; + this.name + &quot;. I&apos;m &quot; + this.age + &apos; years old now, and from &apos; + this.className + &quot;.&quot;);};Student.prototype.learn = function(subject) {    console.log(this.name + &apos; is learning &apos; + subject + &apos; at &apos; + this.className + &apos;.&apos;);}//testvar gao = new Student(&apos;Gao&apos;, &apos;24&apos;, &apos;Class 3123&apos;);console.log(gao); // 这个对象的具体内容见下图gao.hi(); //Hi, my name is Gao. I&apos;m 24 years old now, and from Class 3123.gao.LEGS_NUM; //2gao.walking(); //Gao is walking...gao.learn(&apos;JavaScript&apos;); //Gao is learning JavaScript at Class 3123.</code></pre><ul><li><code>Object.create(arg)</code> 创建一个空对象，并且这个对象的原型指向参数 <code>arg</code>。</li><li><code>Student.prototype.constructor = Student</code> 为了保证一致性，否则 constructor 指向 Person。</li></ul><hr><h3 id="原型链"><a href="#原型链" class="headerlink" title="原型链"></a>原型链</h3><p>gao 对象的原型链：</p><p><img src="http://7q5cdt.com1.z0.glb.clouddn.com/blog-oop-gao.png" alt="Object"></p><p>下面通过图形展示原型链：</p><p><img src="http://7q5cdt.com1.z0.glb.clouddn.com/blog-原型链.png" alt="原型链"></p><hr><h4 id="Object-create-null-amp-bind-null"><a href="#Object-create-null-amp-bind-null" class="headerlink" title="Object.create(null) &amp; .bind(null)"></a><code>Object.create(null)</code> &amp; <code>.bind(null)</code></h4><p>这两种算是特例。</p><p><code>Object.create(null)</code> 和 <code>.bind(null)</code> 这两种方式创建出来的对象是没有 <code>prototype</code> 属性的，为 <code>undefined</code>。</p><hr><h2 id="prototype-属性"><a href="#prototype-属性" class="headerlink" title="prototype 属性"></a>prototype 属性</h2><h3 id="改变-prototype"><a href="#改变-prototype" class="headerlink" title="改变 prototype"></a>改变 prototype</h3><p>JavaScript 中的 prototype 是对象，在运行的时候可以修改。</p><p>给 prototype 添加或删除一些属性，是会影响到已经创建好的实例对象的。</p><p>但是，直接修改 prototype 属性，是不会影响到已经创建好的实例对象的。但是会影响到新的实例对象。如下代码：</p><pre><code>// 上接上面的代码// 给 prototype 添加或删除一些属性Student.prototype.x = 101;console.log(gao.x); //101// 直接修改 prototype 属性Student.prototype = {    y: 2};// 不会影响到已创建好的实例对象console.log(gao.x); //101console.log(gao.y); //undefined// 会影响到新创建的实例对象var ying = new Student(&apos;Ying&apos;, 24, &apos;UI&apos;);console.log(ying.x); //undefinedconsole.log(ying.y); //2</code></pre><hr><h3 id="内置构造器的-prototype-属性"><a href="#内置构造器的-prototype-属性" class="headerlink" title="内置构造器的 prototype 属性"></a>内置构造器的 <code>prototype</code> 属性</h3><p>修改内置构造器的 <code>prototype</code> 属性后，在实例化这个对象后，枚举其属性时，会把修改的内置构造器的 <code>prototype</code> 属性也枚举出来，有时候这是要避免的。可用 <code>defineProperty</code> 方法解决。如下代码：</p><pre><code>Object.prototype.x = 1;var obj = {};console.log(obj.x); //1console.log(obj);for (var k in obj) {    console.log(&apos;result---&gt;&apos; + k);}// result---&gt;x</code></pre><p>使用 <code>defineProperty</code> 后：</p><pre><code>Object.defineProperty(Object.prototype, &apos;x&apos;, {    writable: true,    value: 1});var obj = {};console.log(obj.x);//1console.log(obj);for (var k in obj) {    console.log(&apos;result---&gt;&apos; + k);}// nothing output here</code></pre><p>其实也可以这样枚举，使用 <code>hasOwnProperty</code> 方法：</p><pre><code>for (var key in obj) {    if (obj.hasOwnProperty(key)) {        console.log(&quot;result---&gt;&quot; + key);    }}</code></pre><hr><h3 id="创建对象-new-原型链"><a href="#创建对象-new-原型链" class="headerlink" title="创建对象-new/原型链"></a>创建对象-new/原型链</h3><p><img src="http://7q5cdt.com1.z0.glb.clouddn.com/blog-new prototype.png" alt="prototype"></p><hr><h2 id="instanceof"><a href="#instanceof" class="headerlink" title="instanceof"></a>instanceof</h2><pre><code>console.log([1, 2] instanceof Array); //trueconsole.log([1, 2] instanceof Object); //trueconsole.log(new Object() instanceof Array); //false</code></pre><p>左边要求是对象，右边要求是构造器或函数。它会判断：<strong>右边的构造器中的 <code>prototype</code> 属性是否出现在左边的对象的原型链上。</strong></p><ul><li><strong>注意：</strong>不同的 window 或 iframe 间的对象类型检测<strong>不能</strong>使用 <code>instanceof</code>！</li></ul><hr><h2 id="实现继承的方式"><a href="#实现继承的方式" class="headerlink" title="实现继承的方式"></a>实现继承的方式</h2><pre><code>function Person() {}function Student() {}Student.prototype = Person.prototype; //1Student.prototype = new Person(); //2Student.prototype = Object.create(Person.prototype); //3Student.prototype.constructor = Student;</code></pre><p>注释中：</p><p>1 是错误的。如果改变了 Student 就会改变 Person</p><p>2 可以实现继承，但是其调用了构造函数，若父类构造函数中有形参，那么传值就会比较奇怪。</p><p>3 是最好的方法。创建了一个空对象，并且对象的原型指向参数 Person.prototype。这样便实现了继承。同时原型链写，不向上查找。但是 <code>Object.create</code> 是ES5 中的方法，所以可以使用下列代码做兼容：</p><pre><code>if (!Object.create) {    Object.create = function(proto) {        function F() {}        F.prototype = proto;        return new F;    };}</code></pre><hr><h2 id="模拟重载"><a href="#模拟重载" class="headerlink" title="模拟重载"></a>模拟重载</h2><pre><code>function Person() {    var args = arguments;    if (typeof args[0] === &apos;object&apos; &amp;&amp; args[0]) {        if (args[0].name) {            this.name = args[0].name;        }        if(args[0].age){            this.age = args[0].age;        }    } else {        if (args[0]) {            this.name = args[0];        }        if (args[1]) {            this.age = args[1];        }    }}//重写 toString 方法Person.prototype.toString = function() {    console.log(&apos;name=&apos;+this.name+&apos;, age=&apos;+this.age);};var gao = new Person({name:&apos;Gao&apos;,age:24});gao.toString(); // name=Gao, age=24var ying = new Person(&apos;Ying&apos;,25);ying.toString(); // name=Ying, age=25</code></pre><p>对参数进行判断，模拟实现重载。</p><hr><h2 id="调用子类方法"><a href="#调用子类方法" class="headerlink" title="调用子类方法"></a>调用子类方法</h2><pre><code>function Person(name) {    this.name = name;}function Student(name, className) {    this.className = className;    Person.call(this, name); // 调用基类的构造器}var gao = new Student(&apos;Gao&apos;, &apos;3123&apos;);console.log(gao); // Student {className: &quot;3123&quot;, name: &quot;Gao&quot;}Person.prototype.init = function() {};Student.prototype.init = function() {    // do sth...    Person.prototype.init.apply(this, arguments); // 同时也想调用父类被覆盖的方法};</code></pre><p>主要是两种：调用父类的构造器，调用原型链上父类被覆盖的方法。</p><hr><h2 id="链式调用"><a href="#链式调用" class="headerlink" title="链式调用"></a>链式调用</h2><pre><code>function ClassManager() {}ClassManager.prototype.addClass = function(str) {    console.log(&apos;Class: &apos; + str + &apos; added&apos;);    return this;};var manager = new ClassManager();manager.addClass(&apos;classA&apos;).addClass(&apos;classB&apos;).addClass(&apos;classC&apos;);// Class: classA added// Class: classB added// Class: classC added</code></pre><p>重点在于 return this。返回这个 ClassManager 的实例。这样这个实例又可以继续调用方法。</p><hr><h2 id="抽象类"><a href="#抽象类" class="headerlink" title="抽象类"></a>抽象类</h2><p>在构造器中 <code>throw new Error(&#39;&#39;);</code> 抛异常。这样防止这个类被直接调用。</p><pre><code>function DetectorBase() {    throw new Error(&apos;Abstract class can not be invoked directly!&apos;);}DetectorBase.detect = function() {    console.log(&apos;Detection starting...&apos;);}DetectorBase.stop = function() {    console.log(&apos;Detection stopped.&apos;);};DetectorBase.init = function() {    throw new Error(&apos;Error&apos;);}var d = new DetectorBase();// Uncaught Error: Abstract class can not be invoked directly!function LinkDetector() {}LinkDetector.prototype = Object.create(DetectorBase.prototype);LinkDetector.prototype.constructor = LinkDetector;var l = new LinkDetector();console.log(l); //LinkDetector {}__proto__: LinkDetectorl.detect(); //Uncaught TypeError: l.detect is not a functionl.init(); //Uncaught TypeError: l.init is not a function</code></pre><p><code>var d = new DetectorBase();</code> 是不能实例化的，会报错</p><p><code>l.detect();</code> 但是这个为什么报错我就不知道了。</p><p>已经在原课程下提问了，期待老师的讲解。 <a href="http://www.imooc.com/qadetail/82732" target="_blank" rel="noopener">抽象类中子类为什么不能调用父类的非抽象方法？</a></p><p>问题已经解决了，应该是老师当时的课件写错了，应该再基类中将这两个方法写在其原型 prototype 上。如下：</p><pre><code>function DetectorBase() {    throw new Error(&apos;Abstract class can not be invoked directly!&apos;);}DetectorBase.prototype.detect = function() {    console.log(&apos;Detection starting...&apos;);};DetectorBase.prototype.stop = function() {    console.log(&apos;Detection stopped.&apos;);};DetectorBase.prototype.init = function() {    throw new Error(&apos;Error&apos;);};// var d = new DetectorBase();// Uncaught Error: Abstract class can not be invoked directly!function LinkDetector() {}LinkDetector.prototype = Object.create(DetectorBase.prototype);LinkDetector.prototype.constructor = LinkDetector;var l = new LinkDetector();console.log(l); //LinkDetector {}__proto__: LinkDetectorl.detect(); //Detection starting...l.init(); //Uncaught Error: Error</code></pre><hr><h2 id="模块化"><a href="#模块化" class="headerlink" title="模块化"></a>模块化</h2><pre><code>var moduleA;moduleA = function() {    var prop = 1;    function func() {}    return {        func: func,        prop: prop    };}(); // 立即执行匿名函数</code></pre><p>prop，func 不会被泄露到全局作用域。</p><p>或者另一种写法，使用 new</p><pre><code>moduleA = new function() {    var prop = 1;    function func() {}    this.func = func;    this.prop = prop;}</code></pre><p>更复杂的可以使用 Sea.js Kissy Require.js 模块化工具。</p><hr><p>最后补充一点设计模式相关的资料，我还没有来得及看的：</p><ul><li><a href="http://www.oschina.net/translate/learning-javascript-design-patterns" target="_blank" rel="noopener">学用 JavaScript 设计模式</a></li><li><a href="http://blog.jobbole.com/29454/" target="_blank" rel="noopener">常用的Javascript设计模式</a></li><li><a href="http://developer.51cto.com/art/201109/288650_all.htm" target="_blank" rel="noopener">JavaScript设计模式深入分析</a></li></ul>]]></content>
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> 面向对象 </tag>
            
            <tag> 慕课网 </tag>
            
            <tag> ife </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>JavaScript 中的闭包</title>
      <link href="//2015/JavaScript-closure.html"/>
      <url>//2015/JavaScript-closure.html</url>
      <content type="html"><![CDATA[<p>本文为慕课网 <a href="http://www.imooc.com/learn/277" target="_blank" rel="noopener">JavaScript深入浅出</a> JavaScript 中的闭包笔记。</p><h2 id="闭包的例子"><a href="#闭包的例子" class="headerlink" title="闭包的例子"></a>闭包的例子</h2><pre><code>function outer() {    var localVal = 30;    return localVal;}console.log(outer()); //30function outer2() {    var localVal = 30;    return function() {        return localVal;    };}var func = outer2();console.log(func()); //30</code></pre><p>对于第一个普通的函数，在执行过之后，它的局部变量就可以被释放。</p><p>对于第二个函数，<code>localVal</code> 是不能被释放的。因为调用 <code>outer2()</code> 后，返回的是匿名函数，匿名函数可以访问外部的 <code>outer2()</code> 中的局部变量，并返回了这个局部变量 localVal。当 <code>outer2()</code> 赋值给 <code>func</code> 后，再次调用 <code>func()</code>，仍能访问到局部变量 <code>localVal</code>。这种情况就是闭包。</p><a id="more"></a><hr><h2 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h2><ul><li><p><strong>所谓闭包就是：子函数可以使用父函数中的局部变量。</strong></p><pre><code>! function() {    var localData = &quot;localData here&quot;;    document.addEventListener(&apos;click&apos;,        function() {            console.log(localData); //这里访问外部数据        });}();! function() {    var localData = &quot;localData here&quot;;    var url = &quot;http://www.baidu.com/&quot;;    $.ajax({        url: url,        success: function() {            // do sth...            console.log(localData); //这里访问外部数据        }    });}()</code></pre></li></ul><hr><h2 id="常见错误之循环闭包"><a href="#常见错误之循环闭包" class="headerlink" title="常见错误之循环闭包"></a>常见错误之循环闭包</h2><p>比如我们想循环绑定点击事件</p><pre><code>document.body.innerHTML = &quot;&lt;div id=div1&gt;aaa&lt;/div&gt;&lt;div id=div2&gt;bbb&lt;/div&gt;&lt;div id=div3&gt;ccc&lt;/div&gt;&quot;;for (var i = 1; i &lt; 4; i++) {    document.getElementById(&apos;div&apos; + i).    addEventListener(&apos;click&apos;, function() {        alert(i); // all are 4!    });}</code></pre><p>上面的代码，我们点击任何一个 div，弹出的都是 4</p><p>这是因为，for 循环中的 i 是一个全局变量。这里内函数的点击事件，访问到的是循环后的 i 值，所以是 4</p><pre><code>document.body.innerHTML = &quot;&lt;div id=div1&gt;aaa&lt;/div&gt;&lt;div id=div2&gt;bbb&lt;/div&gt;&lt;div id=div3&gt;ccc&lt;/div&gt;&quot;;for (var i = 1; i &lt; 4; i++) {    ! function(i) {        document.getElementById(&apos;div&apos; + i).        addEventListener(&apos;click&apos;, function() {            alert(i); // 1, 2, 3        });    }(i);}</code></pre><p>这里使用了立即执行函数，并给匿名函数赋值 i，这样点击事件每一次就会访问到相应的 i。</p><hr><h2 id="封装"><a href="#封装" class="headerlink" title="封装"></a>封装</h2><pre><code>(function() {    var _userId = 9527;    var _typeId = &quot;item&quot;;    var exp = {};    function converter(userId) {        return +userId;    }    exp.getUserId = function() {        return converter(_userId);    };    exp.getTypeId = function() {        return _typeId;    };    window.a = exp;})();console.log(a.getUserId()); //9527console.log(a.getTypeId()); //itemconsole.log(a._userId); //undefinedconsole.log(a._typeId); //undefinedconsole.log(converter); //Uncaught ReferenceError: converter is not defined</code></pre><p>上面的代码通过闭包实现了一个封装。</p><hr><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><blockquote><ul><li><p>在计算机科学中，闭包（也称词法闭包或函数闭包）是指一个函数或函数的引用，与一个引用环境绑定在一起。这个引用环境是一个存储该函数每个非局部变量（也叫自由变量）的表。</p></li><li><p>闭包，不同于一般的函数，它允许一个函数在立即词法作用域外调用时，仍可访问非本地变量。</p></li></ul><p>from 维基百科</p></blockquote><ul><li><p>闭包的优点</p><ul><li>灵活和方便</li><li>封装</li></ul></li><li><p>缺点</p><ul><li>空间浪费</li><li>内存泄露</li><li>性能消耗</li></ul></li></ul>]]></content>
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> 慕课网 </tag>
            
            <tag> ife </tag>
            
            <tag> 闭包 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>JavaScript 中的 this</title>
      <link href="//2015/JavaScript-this.html"/>
      <url>//2015/JavaScript-this.html</url>
      <content type="html"><![CDATA[<p>本文为慕课网 <a href="http://www.imooc.com/learn/277" target="_blank" rel="noopener">JavaScript深入浅出</a> JavaScript 中的 this笔记。</p><h2 id="全局的-this"><a href="#全局的-this" class="headerlink" title="全局的 this"></a>全局的 this</h2><p>全局 this 一般指向全局对象，浏览器中的全局对象就是 <code>window</code>。</p><p>例如：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="keyword">this</span>.document === <span class="built_in">document</span>); <span class="comment">//true</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">this</span> === <span class="built_in">window</span>); <span class="comment">//true</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">this</span>.a = <span class="number">91</span>;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">window</span>.a); <span class="comment">//91</span></span><br></pre></td></tr></table></figure><a id="more"></a><h2 id="一般函数的-this"><a href="#一般函数的-this" class="headerlink" title="一般函数的 this"></a>一般函数的 this</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f1</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(f1() === <span class="built_in">window</span>);<span class="comment">//true, global object</span></span><br></pre></td></tr></table></figure><p>可以看到一般函数的 this 也指向 window，在 nodeJS 中为 global object</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f2</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="meta">    "use strict"</span>;<span class="comment">//使用严格模式</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(f1() === <span class="literal">undefined</span>);<span class="comment">//true</span></span><br></pre></td></tr></table></figure><p>严格模式中，函数的 this 为 undefined</p><h2 id="作为对象方法的函数的-this"><a href="#作为对象方法的函数的-this" class="headerlink" title="作为对象方法的函数的 this"></a>作为对象方法的函数的 this</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> o = &#123;</span><br><span class="line">    prop: <span class="number">37</span>,</span><br><span class="line">    f: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.prop;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">console</span>.log(o.f()); <span class="comment">// 37</span></span><br></pre></td></tr></table></figure><p>上述代码通过字面量创建对象 o。</p><p>f 为对象 o 的方法。这个方法的 this 指向这个对象，在这里即对象 o。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> o = &#123;</span><br><span class="line">    prop: <span class="number">37</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">independent</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.prop;</span><br><span class="line">&#125;</span><br><span class="line">o.f = independent;</span><br><span class="line"><span class="built_in">console</span>.log(o.f()); <span class="comment">// 37</span></span><br></pre></td></tr></table></figure><p>上面的代码，创建了对象 o，但是没有给对象 o，添加方法。而是通过 <code>o.f = independent</code> 临时添加了方法属性。这样这个方法中的 this 同样也指向这个对象 o。</p><h2 id="对象原型链上的-this"><a href="#对象原型链上的-this" class="headerlink" title="对象原型链上的 this"></a>对象原型链上的 this</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> o = &#123;</span><br><span class="line">    f: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.a + <span class="keyword">this</span>.b;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> p = <span class="built_in">Object</span>.create(o);</span><br><span class="line">p.a = <span class="number">1</span>;</span><br><span class="line">p.b = <span class="number">2</span>;</span><br><span class="line"><span class="built_in">console</span>.log(p.f()); <span class="comment">//3</span></span><br></pre></td></tr></table></figure><p>通过 <code>var p = Object.create(o)</code> 创建的对象，p 是基于原型 o 创建出的对象。</p><p>p 的原型是 o，调用 f() 的时候是调用了 o 上的方法 f()，这里面的 this 是可以指向当前对象的，即对象 p。</p><h2 id="get-set-方法与-this"><a href="#get-set-方法与-this" class="headerlink" title="get/set 方法与 this"></a>get/set 方法与 this</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">modulus</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Math</span>.sqrt(<span class="keyword">this</span>.re * <span class="keyword">this</span>.re + <span class="keyword">this</span>.im * <span class="keyword">this</span>.im);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> o = &#123;</span><br><span class="line">    re: <span class="number">1</span>,</span><br><span class="line">    im: <span class="number">-1</span>,</span><br><span class="line">    get phase() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">Math</span>.atan2(<span class="keyword">this</span>.im, <span class="keyword">this</span>.re);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">Object</span>.defineProperty(o, <span class="string">'modulus'</span>, &#123;</span><br><span class="line">    get: modulus,</span><br><span class="line">    enumerable: <span class="literal">true</span>,</span><br><span class="line">    configurable: <span class="literal">true</span></span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">console</span>.log(o.phase, o.modulus); <span class="comment">// -0.78 1.4142</span></span><br></pre></td></tr></table></figure><p>get/set 方法中的 this 也会指向 get/set 方法所在的对象的。</p><h2 id="构造器中的-this"><a href="#构造器中的-this" class="headerlink" title="构造器中的 this"></a>构造器中的 this</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">MyClass</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.a = <span class="number">25</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> o = <span class="keyword">new</span> MyClass();</span><br><span class="line"><span class="built_in">console</span>.log(o.a); <span class="comment">//25</span></span><br></pre></td></tr></table></figure><p>new MyClass() 的时候，MyClass()中的 this 会指向一个空对象，这个对象的原型会指向 MyClass.prototype。MyClass()没有返回值或者返回为基本类型时，默认将 this 返回。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">C2</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.a = <span class="number">26</span>;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        a: <span class="number">24</span></span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">o = <span class="keyword">new</span> C2();</span><br><span class="line"><span class="built_in">console</span>.log(o.a); <span class="comment">//24</span></span><br></pre></td></tr></table></figure><p>因为返回了对象，将这个对象作为返回值</p><h2 id="call-apply-方法与-this"><a href="#call-apply-方法与-this" class="headerlink" title="call/apply 方法与 this"></a>call/apply 方法与 this</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">c, d</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.a + <span class="keyword">this</span>.b + c + d;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> o = &#123;</span><br><span class="line">    a: <span class="number">1</span>,</span><br><span class="line">    b: <span class="number">3</span></span><br><span class="line">&#125;;</span><br><span class="line">add.call(o, <span class="number">5</span>, <span class="number">7</span>); <span class="comment">// 1 + 3 + 5 + 7 = 16</span></span><br><span class="line">add.apply(o, [<span class="number">10</span>, <span class="number">20</span>]); <span class="comment">// 1 + 3 + 10 + 20 = 34</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">bar</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">Object</span>.prototype.toString.call(<span class="keyword">this</span>));</span><br><span class="line">&#125;</span><br><span class="line">bar.call(<span class="number">7</span>); <span class="comment">// "[object Number]"</span></span><br></pre></td></tr></table></figure><h2 id="bind-方法与-this"><a href="#bind-方法与-this" class="headerlink" title="bind 方法与 this"></a>bind 方法与 this</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.a;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> g = f.bind(&#123;</span><br><span class="line">    a: <span class="string">"test"</span></span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">console</span>.log(g()); <span class="comment">// test</span></span><br><span class="line"><span class="keyword">var</span> o = &#123;</span><br><span class="line">    a: <span class="number">37</span>,</span><br><span class="line">    f: f,</span><br><span class="line">    g: g</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">console</span>.log(o.f(), o.g()); <span class="comment">// 37, test</span></span><br></pre></td></tr></table></figure><p>绑定之后再调用时，仍然会按绑定时的内容走，所以 o.g() 结果是 test</p>]]></content>
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> 慕课网 </tag>
            
            <tag> ife </tag>
            
            <tag> this </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>JavaScript 函数</title>
      <link href="//2015/JavaScript-function.html"/>
      <url>//2015/JavaScript-function.html</url>
      <content type="html"><![CDATA[<p>本文为慕课网 <a href="http://www.imooc.com/learn/277" target="_blank" rel="noopener">JavaScript深入浅出</a> JavaScript 函数笔记。</p><h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><p>函数是一块JavaScript代码，被定义一次，但可执行和调用多次。</p><p>JS中的函数也是对象，所以JS函数可以像其它对象那样操作和传递。</p><p>所以我们也常叫JS中的函数为函数对象。</p><p>例如：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params">x, y</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> x === <span class="string">'number'</span> &amp;&amp;</span><br><span class="line">        <span class="keyword">typeof</span> y === <span class="string">'number'</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> x + y;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">foo(<span class="number">1</span>, <span class="number">2</span>); <span class="comment">// 3</span></span><br></pre></td></tr></table></figure><p>一般由3部分组成：</p><ul><li>函数名</li><li>参数列表</li><li><p>函数体</p><a id="more"></a><h3 id="调用方式"><a href="#调用方式" class="headerlink" title="调用方式"></a>调用方式</h3></li><li><p>直接调用</p></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">foo();</span><br></pre></td></tr></table></figure><ul><li>对象方法</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">o.method();</span><br></pre></td></tr></table></figure><ul><li>构造器</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> Foo();</span><br></pre></td></tr></table></figure><ul><li>call/apply/bind</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">func.call(o);</span><br></pre></td></tr></table></figure><h2 id="函数声明与函数表达式"><a href="#函数声明与函数表达式" class="headerlink" title="函数声明与函数表达式"></a>函数声明与函数表达式</h2><h3 id="函数声明"><a href="#函数声明" class="headerlink" title="函数声明"></a>函数声明</h3><p>就是对函数进行普通的声明</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="函数表达式"><a href="#函数表达式" class="headerlink" title="函数表达式"></a>函数表达式</h3><ul><li>将函数赋值给变量</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//function variable</span></span><br><span class="line"><span class="keyword">var</span> add = <span class="function"><span class="keyword">function</span>(<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// body...</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ul><li><p>立即执行函数</p><p>  把匿名函数用括号括起来，再直接调用。</p></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// IEF(Immediately Executed Function)</span></span><br><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// body...</span></span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure><ul><li>函数对象作为返回值</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// body...</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ul><li>命名式函数表达式</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//NFE(Named Function Expression)</span></span><br><span class="line"><span class="keyword">var</span> add = <span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// body...</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>这里大家肯定会好奇，这个函数怎么调用？到底用哪个名字呢？</p><p>做一个测试：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> func = <span class="function"><span class="keyword">function</span> <span class="title">nfe</span>(<span class="params"></span>) </span>&#123;&#125;;</span><br><span class="line"><span class="built_in">console</span>.log(func === nfe);</span><br><span class="line"><span class="comment">// 在 IE6~8，得到 false</span></span><br><span class="line"><span class="comment">// 在 IE9+ 及现代浏览器中 Uncaught ReferenceError: nfe is not defined</span></span><br></pre></td></tr></table></figure><p>那么命名函数表达式有什么使用场景呢？</p><ul><li>一般用于调试方便，如果使用匿名函数，执行的时候看不到函数名，命名函数表达式是可以看到函数名的。</li><li>或者在递归时，使用名字调用自己。</li></ul><p>但是这两种用法都不常见。</p><h3 id="变量-amp-函数的声明前置"><a href="#变量-amp-函数的声明前置" class="headerlink" title="变量 &amp; 函数的声明前置"></a>变量 &amp; 函数的声明前置</h3><p>举两个例子</p><p>例1，函数声明：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> num = add(<span class="number">1</span>,<span class="number">2</span>);</span><br><span class="line"><span class="built_in">console</span>.log(num);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>例2，函数表达式：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> num = add(<span class="number">1</span>, <span class="number">2</span>);</span><br><span class="line"><span class="built_in">console</span>.log(num);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> add = <span class="function"><span class="keyword">function</span>(<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>例1中得到的结果是 3，而例2中是 <code>Uncaught TypeError: add is not a function</code>。</p><p>因为函数和变量在声明的时候，会被前置到当前作用域的顶端。例1将函数声明 <code>function add(a, b)</code> 前置到作用域前端，例2将声明 <code>var add</code> 前置到其作用域的前端了，并没有赋值。<strong>赋值的过程是在函数执行到响应位置的时候才进行的</strong>。</p><h3 id="Function-构造器"><a href="#Function-构造器" class="headerlink" title="Function 构造器"></a>Function 构造器</h3><p>除了函数声明、函数表达式。还有一种创建函数对象的方式，是使用函数构造器。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> func = <span class="keyword">new</span> <span class="built_in">Function</span>(<span class="string">'a'</span>,<span class="string">'b'</span>,<span class="string">'console.log(a+b);'</span>);</span><br><span class="line">func(<span class="number">1</span>,<span class="number">2</span>);<span class="comment">//3</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> func2 = <span class="built_in">Function</span>(<span class="string">'a'</span>,<span class="string">'b'</span>,<span class="string">'console.log(a+b);'</span>);</span><br><span class="line">func2(<span class="number">1</span>,<span class="number">2</span>);<span class="comment">//3</span></span><br></pre></td></tr></table></figure><p>Function 中前面的参数为后面函数体的形参，最后一个参数为函数体。可以看到传入的都是字符串，这样的创建函数对象的方法是不安全的。</p><p>还有一点，Function 构造器的得到的函数对象，拿不到外层函数的变量，但是可以拿到全局变量。它的作用域与众不同，这也是很少使用的原因之一。</p><h3 id="对比"><a href="#对比" class="headerlink" title="对比"></a>对比</h3><p><img src="http://7q5cdt.com1.z0.glb.clouddn.com/blog-function.png" alt="函数对比"></p><hr><h2 id="函数属性-amp-arguments"><a href="#函数属性-amp-arguments" class="headerlink" title="函数属性 &amp; arguments"></a>函数属性 &amp; arguments</h2><h3 id="函数属性-amp-arguments-1"><a href="#函数属性-amp-arguments-1" class="headerlink" title="函数属性 &amp; arguments"></a>函数属性 &amp; arguments</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params">x, y, z</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">arguments</span>.length; <span class="comment">// 2</span></span><br><span class="line">    <span class="built_in">arguments</span>[<span class="number">0</span>]; <span class="comment">// 1</span></span><br><span class="line">    <span class="built_in">arguments</span>[<span class="number">0</span>] = <span class="number">10</span>;</span><br><span class="line">    x; <span class="comment">// change to 10</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">arguments</span>[<span class="number">2</span>] = <span class="number">100</span>;</span><br><span class="line">    z; <span class="comment">// still undefined!!!</span></span><br><span class="line">    <span class="built_in">arguments</span>.callee === foo; <span class="comment">// true</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">foo(<span class="number">1</span>, <span class="number">2</span>);</span><br><span class="line">foo.length; <span class="comment">// 3</span></span><br><span class="line">foo.name; <span class="comment">//"foo"</span></span><br></pre></td></tr></table></figure><ul><li><code>foo.name</code> 函数名</li><li><code>foo.length</code> 形参个数</li><li><code>arguments.length</code> 实参个数</li></ul><p>未传参数时，arguments[i] 相应的位置仍然是 undefined。</p><p>严格模式下，代码中的改变实参失效。即 x 仍为 1。同时 callee 属性失效。</p><ul><li><p>关于 <code>callee</code></p><p>  callee 属性的初始值就是正被执行的 Function 对象。</p><p>  callee 属性是 arguments 对象的一个成员，它表示对函数对象本身的引用，这有利于匿名函数的递归或者保证函数的封装性，例如下边示例的递归计算1到n的自然数之和。而该属性仅当相关函数正在执行时才可用。还有需要注意的是callee拥有length属性，这个属性有时用于验证还是比较好的。</p><p>  arguments.length是实参长度，arguments.callee.length是形参长度，由此可以判断调用时形参长度是否和实参长度一致。</p></li></ul><h3 id="apply-call-方法（浏览器）"><a href="#apply-call-方法（浏览器）" class="headerlink" title="apply/call 方法（浏览器）"></a>apply/call 方法（浏览器）</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params">x, y</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(x, y, <span class="keyword">this</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">foo.call(<span class="number">100</span>, <span class="number">1</span>, <span class="number">2</span>); <span class="comment">//1 2 Number &#123;[[PrimitiveValue]]: 100&#125;</span></span><br><span class="line">foo.apply(<span class="literal">true</span>, [<span class="number">3</span>, <span class="number">4</span>]); <span class="comment">//3 4 Boolean &#123;[[PrimitiveValue]]: true&#125;</span></span><br><span class="line">foo.apply(<span class="literal">null</span>); <span class="comment">//undefined undefined Window</span></span><br><span class="line">foo.apply(<span class="literal">undefined</span>); <span class="comment">//undefined undefined Window</span></span><br></pre></td></tr></table></figure><ul><li>call/apply 的作用：调用一个对象的一个方法，以另一个对象替换当前对象(其实就是更改对象的内部指针，即改变对象的this指向的内容)。</li><li>call/apply 的第一个参数为对象，即使不是对象，也会被包装为对象。</li><li>call 为扁平化传参，apply 后面的参数为数组</li><li>传入 null/undefined 时，实际为 Window 对象</li><li>在严格模式下：上述代码最后两行分别输出 <code>null</code>, <code>undefined</code></li></ul><h3 id="bind-方法"><a href="#bind-方法" class="headerlink" title="bind 方法"></a>bind 方法</h3><p><code>bind</code> 是 ES5 中提出的方法，所以浏览器支持为 IE9+ 及现代浏览器。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">this</span>.x = <span class="number">9</span>;</span><br><span class="line"><span class="keyword">var</span> <span class="built_in">module</span> = &#123;</span><br><span class="line">    x: <span class="number">81</span>,</span><br><span class="line">    getX: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">console</span>.log(<span class="keyword">this</span>.x);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.getX(); <span class="comment">//81</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> getX = <span class="built_in">module</span>.getX;</span><br><span class="line">getX(); <span class="comment">//9</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> boundGetX = getX.bind(<span class="built_in">module</span>);</span><br><span class="line">boundGetX(); <span class="comment">//81</span></span><br></pre></td></tr></table></figure><p><code>bind</code> 主要用于改变函数中的 <code>this</code></p><ul><li><code>module.getX();</code> 直接通过对象调用自己的方法，结果是 81</li><li><code>var getX = module.getX;</code> 将这个方法赋值给一个全局变量，这时 this 指向了 Window，所以结果为 9</li><li><code>var boundGetX = getX.bind(module);</code> 使用 bind 绑定了自己的对象，这样 this 仍然指向 module 对象，所以结果为 81</li></ul><h4 id="bind-与-currying"><a href="#bind-与-currying" class="headerlink" title="bind 与 currying"></a>bind 与 currying</h4><p>bind 可以使函数柯里化，那么什么是柯里化？</p><blockquote><p>在计算机科学中，柯里化（Currying）是把接受多个参数的函数变换成接受一个单一参数(最初函数的第一个参数)的函数，并且返回接受余下的参数且返回结果的新函数的技术。这个技术由 Christopher Strachey 以逻辑学家 Haskell Curry 命名的，尽管它是 Moses Schnfinkel 和 Gottlob Frege 发明的。</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">a, b, c</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a + b + c;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> func = add.bind(<span class="literal">undefined</span>, <span class="number">100</span>);</span><br><span class="line">func(<span class="number">1</span>, <span class="number">2</span>); <span class="comment">//103</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> func2 = func.bind(<span class="literal">undefined</span>, <span class="number">200</span>);</span><br><span class="line">func2(<span class="number">10</span>); <span class="comment">//310</span></span><br></pre></td></tr></table></figure><p>add 函数拥有 3 个参数。我们想先传入一个参数，再去传其他参数。</p><p><code>var func = add.bind(undefined, 100);</code> add 函数对象调用 bind 方法，由于不需要将 this 指向原来的 add 函数对象，所以第一个参数写为 undefined 或 null。第二个参数 100 传给了 add 函数中的形参 a，并赋值给一个新的函数对象 func。</p><p>这时，<code>func(1, 2)</code> 即相当于传入后两个参数，所以结果为 103。</p><p>同理，基于 func 可以创造一个函数 func2。它只用传最后一个参数。</p><h4 id="bind-与-new"><a href="#bind-与-new" class="headerlink" title="bind 与 new"></a>bind 与 new</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.b = <span class="number">100</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.a;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(foo()); <span class="comment">//undefined</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> func = foo.bind(&#123;</span><br><span class="line">    a: <span class="number">1</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(func()); <span class="comment">//1</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">new</span> func()); <span class="comment">//foo &#123;b: 100&#125;</span></span><br></pre></td></tr></table></figure><p>对于使用了 <code>new func()</code> 这种方式创建对象，其返回值为一个对象。</p><p>而原函数 foo 的返回值不是对象，所以会直接忽视这个 return 方法。而是变为 <code>return this;</code>。并且 this 会被初始化为一个空对象，这个空对象的原型指向 foo.prototype。所以后面的 bind 是不起作用的。</p><p>这里面这个 this 对象包含一个属性 <code>b = 100</code>。所以返回的是对象 <code>{b: 100}</code>。</p>]]></content>
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> 慕课网 </tag>
            
            <tag> ife </tag>
            
            <tag> 函数 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>浅谈倒装式沥青路面结构在福建高速中的应用</title>
      <link href="//2015/%E6%B5%85%E8%B0%88%E5%80%92%E8%A3%85%E5%BC%8F%E6%B2%A5%E9%9D%92%E8%B7%AF%E9%9D%A2%E7%BB%93%E6%9E%84%E5%9C%A8%E7%A6%8F%E5%BB%BA%E9%AB%98%E9%80%9F%E4%B8%AD%E7%9A%84%E5%BA%94%E7%94%A8.html"/>
      <url>//2015/%E6%B5%85%E8%B0%88%E5%80%92%E8%A3%85%E5%BC%8F%E6%B2%A5%E9%9D%92%E8%B7%AF%E9%9D%A2%E7%BB%93%E6%9E%84%E5%9C%A8%E7%A6%8F%E5%BB%BA%E9%AB%98%E9%80%9F%E4%B8%AD%E7%9A%84%E5%BA%94%E7%94%A8.html</url>
      <content type="html"><![CDATA[<blockquote><p>福建省第一条高速公路，福泉高速公路从1999年正式开通，到2015年”十二五”末，已建成通车里程4817公里，并实现县县通高速目标。这十几年高速公路大建设过程中，伴随社会经济不断发展，交通量猛增，造成早期路面损坏较为严重,例如反射裂缝。本文结合福建省高速建设工作实际，介绍沥青碎石、级配碎石与稳定粒料半刚性基层组合结构形式（简称倒装式），有效减少路面反射性裂缝，延长道路使用寿命，减少管奍费用，提高社会经济效益。</p></blockquote><h2 id="路面结构的分析"><a href="#路面结构的分析" class="headerlink" title="路面结构的分析"></a>路面结构的分析</h2><h3 id="半刚性基层沥青路面特点"><a href="#半刚性基层沥青路面特点" class="headerlink" title="半刚性基层沥青路面特点"></a>半刚性基层沥青路面特点</h3><p>早期福建省高速路面结构设计一般奉行”强基、薄面、稳路基”的方针。采用18cm沥青面层+20cm5%水泥稳定碎石半刚性基层+30cm3%水泥稳定碎石半刚性底基层的结构组合形式（例如福宁高速、京福高速），该结构统称为半刚性基层沥青路面层结构，具有承载力、刚度大、模量高、板体性强、且变沉小等特点，是我国沥青路面的主要结构形式。<br><a id="more"></a></p><p>半刚性基层材料变形量小，脆性材料，具有温缩、干缩及排水不良等特性，决定裂缝的产生不可避免。因此，半刚性基层路面的破坏一般从半刚性基层的缩缝开始，破坏由基层向面层和路基延伸，最终发展为整个路面结构的破坏。而这种破坏模式属于路面的结构性破坏。一旦损坏，维修养护是目前面临的一个大难题。</p><h3 id="柔性基层沥青路面特点"><a href="#柔性基层沥青路面特点" class="headerlink" title="柔性基层沥青路面特点"></a>柔性基层沥青路面特点</h3><p>2006年龙长高速起福建高速结构设计采用”倒装式”沥青路面结构设计，以笔者所在湄渝高速三明段项目为例，采用了10cm沥青面层+16cm沥青碎石上基层+16cm级配碎石下基层+32cm3%水泥稳定碎石半刚性底基层的结构组合形式，该结构为柔性基层沥青路面。材料属于粘弹性材料、韧性好，有一定自愈能力，并且具有层间排水性能，但变形大，弯沉大，因此路面厚度也大，投资成本高。</p><p>柔性基层路面只要在结构设计、施工中不出现问题，它的破坏一般始于面层，其破坏属于功能性破坏。对于柔性基层沥青面层内部出现的微小裂缝，由于沥青材料的粘弹性，所以这些微小裂缝往往能够自愈，而不至于像半刚性基层材料，出现裂缝后，将迅速进入裂缝扩展阶段。</p><h3 id="路面结构应力分布特点"><a href="#路面结构应力分布特点" class="headerlink" title="路面结构应力分布特点"></a>路面结构应力分布特点</h3><p>压应力在面层顶面最大，随深度增加，压应力逐渐减小，达到某深度时，结构内部压应力恰好为0，深度继续增加，这时结构内部拉应力开始增大，一般最大弯拉应力出现在基层的底面。剪应力沿路面深度的分布情况，其峰值主要分布在面层0cm～10cm的范围内，在重载、超载的条件下这一影响深度会继续扩大，但是剪应力的分布范围主要集中在0cm～15cm的范围内。即剪应力的影响范围主要集中在面层、基层。一般认为沥青层越厚越容易产生车辙。国外研究表明当沥青层厚度小于18cm时，车辙随沥青层增加而增大，但是当沥青层厚度超过18cm时，车辙与厚度的关系就不大了，这再次证明路面剪应力的影响范围主要在面层和基层。</p><p>我国规范规定的路面设计方法在进行柔性基层沥青混凝土路面设计上还很不完善，限制了柔性基层沥青混凝土路面结构在我国的应用。如路面设计弯沉值为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Ld=600Ne-0.2Ac.As.Ab    ---［JTG D50-2006（8.0.5）］</span><br></pre></td></tr></table></figure><p>式中：Ab—路面结构类型系数，半刚性基层沥青路面为1.0，柔性基层沥青路面为1.6。系数取值幅度过大，混合基层时，如按基层类型系数取1.0，设计层厚度偏厚，不符合实际；若基层类型系数取1.6偏大，设计层厚度偏小，结构设计不合理。在规范的条文说明中，建议在采用混合式基层路面时，路面结构系数Ab可采用内插的方法，并说明目前尚处于研究阶段，缺乏工程实践经验。</p><h2 id="沥青碎石、级配碎石与稳定粒料半刚性基层的优化组合"><a href="#沥青碎石、级配碎石与稳定粒料半刚性基层的优化组合" class="headerlink" title="沥青碎石、级配碎石与稳定粒料半刚性基层的优化组合"></a>沥青碎石、级配碎石与稳定粒料半刚性基层的优化组合</h2><p>为改善级配碎石的抗疲劳性能和受力及提高沥青面层抗疲劳性能及抗裂性，在级配碎石与沥青面层之间设置沥青碎石作为上基层，由于沥青碎石的加入，增加了沥青层的厚度，有效地提高了沥青面层的抗裂性，泉三高速三明段项目采用该路面结构形式，通车至今有效减少路面横向裂缝。在沥青混凝土面层与级配碎石基层之间设置沥青碎石，可使材料模量值较大的沥青混凝土与材料模量值略低的级配碎石之间有一层联结层，减少层间的模量比，以达到降低沥青混凝土面层层底拉应力，提高路面结构的整体使用功能，特别是在交通量较大的情况宜采用沥青碎石作为上基层，同时沥青碎石具有较好的排水性能，可减少沥青混凝土路面水损坏等病害。</p><p>以上结构由于是在沥青面层与半刚性基层之间加一层沥青碎石，由于在回弹模量较大的沥青，面层与半刚性基层之间夹了一层较为柔软的回弹模量较小的沥青碎石等层，故称为倒装结构或夹层结构。经计算可知，倒装结构在力学上的特点是：</p><ol><li>路表弯沉大于一般的半刚性基层沥青路面，且与中间厚度成正比；</li><li>传统的半刚性基层沥青路面结构由于回弹模量较大使得沥青面层基本处于受压状态，而倒装结构由于中间层回弹模量较小使得面层受拉，但此拉应力对于一般沥青面层（6cm～12cm）尚不大于其疲劳抗拉强度，故面层不会拉裂破坏；</li><li>中间层受压，力学上是安全的，该层太薄不足以起到减少反射裂缝的作用，太厚则使路表弯沉过大，而且较强的两层材料中间夹一层厚的较软层，结构会不稳定；</li><li>对于半刚性基层的底部拉应力，只要厚度足够，拉应力能减小到安全值。</li></ol><h2 id="柔性基层沥青路面的经济性能分析"><a href="#柔性基层沥青路面的经济性能分析" class="headerlink" title="柔性基层沥青路面的经济性能分析"></a>柔性基层沥青路面的经济性能分析</h2><p>本文引用王志军、李福普等同行所著《浦南高速公路柔性基层沥青路面全寿命经济效益分析》分析结果： </p><ul><li>浦南高速采用的新型柔性基层路面结构的 经济性要好于半刚性结构,从工程经济的角度讲,新型柔性基层路面结构大于半刚性路面结构；</li><li>从初始修建费来看,新型柔性基层路面结构高于传统的半刚性路面结构,其初始修建费是半刚性路面结构的1. 2倍左右;从整个管理部门费用 ( 初始修建费、养护费、改建费和残值之和) 来看,在20年使用寿命分析期内,半刚性基层路面结构管理 部门费用高于新型柔性基层路面结构,比新型柔性基层路面结构高15%左右;在30年使用寿命分析期内,半刚性基层路面结构比新型柔性基层路面结构高50%左右; 在使用寿命期内新型柔性基层路面结构管 理部门费用和总费用均最优,且分析期越长,效果越明显；</li><li>从养护维修费用看,半刚性基层沥青路面结构的养护维修费用远远高于新型沥青路面结构养护维修费用,其养护维修费是新型路面结构养护维修费用的6. 3倍左右； </li><li>根据经济效益分析,在20年使用寿命分析期内,与通常半刚性基层沥青路面结构相比,总费用 (管理部门费用和用户费)角度比较,浦南新型柔性 基层路面结构节省资金77.69万元/km,约节省7%的费用; 在30年使用寿命分析期内节省260.62万元/km,约节省15%的费用。 </li></ul><h2 id="结束语"><a href="#结束语" class="headerlink" title="结束语"></a>结束语</h2><p>充分利用柔性基层与半刚性基层沥青路面的优点，把二者完美结合，可以有效地发挥“强基薄面”的应用特点，在当前我国重载交通条件下，不仅在一定程度上满足了路面结构与功能性能使用性能的全面要求，而且克服了两者的不足，有利于当前的施工工艺水平和防治水损害等优点。所以把柔性基层与半刚性基层沥青路面优化组合，能更好地适应重载。</p><p>经过采用全寿命经济效益分析法，对半刚性基层沥青路面和柔性基层沥青路面这两种路面结构进行比较分析发现，长寿命柔性基沥青路面口虽然初期投资大，但是由于后期维护保修费用低，寿命周期长，投资回报时间也长，故它的全寿命周期成本费用反而低。</p><h2 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">《沥青路面结构设计方法对比分析》 任本江 1673-5781（2010）06-0740-04；</span><br><span class="line">《不同类型基层设计参数计算分析研究》 岩土工程学报</span><br><span class="line">《半刚性基层沥青路面最大拉应力点位分布研究》马庆伟，郭平  2012, 26(02):36-40；</span><br><span class="line">《浦南高速公路柔性基层沥青路面全寿命经济效益分析 》 王志军,李福普,严二虎,李 健</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> 沥青路面 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 结构 </tag>
            
            <tag> 论文 </tag>
            
            <tag> 沥青路面 </tag>
            
            <tag> 倒装式 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>JavaScript 作用域和作用域链</title>
      <link href="//2015/scope.html"/>
      <url>//2015/scope.html</url>
      <content type="html"><![CDATA[<h2 id="JavaScript-作用域"><a href="#JavaScript-作用域" class="headerlink" title="JavaScript 作用域"></a>JavaScript 作用域</h2><p>作用域就是变量与函数的可访问范围。在JavaScript中，变量的作用域有全局作用域和局部作用域两种。</p><hr><h3 id="全局作用域-Global-Scope"><a href="#全局作用域-Global-Scope" class="headerlink" title="全局作用域(Global Scope)"></a>全局作用域(Global Scope)</h3><p>在代码中任何地方都能访问到的对象拥有全局作用域，一般来说以下 3 种情形拥有全局作用域。</p><ol><li>最外层函数和在最外层函数外面定义的变量拥有全局作用域</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> outVariable = <span class="string">"我是最外层变量"</span>; <span class="comment">//最外层变量</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">outFun</span>(<span class="params"></span>) </span>&#123; <span class="comment">//最外层函数</span></span><br><span class="line">    <span class="keyword">var</span> inVariable = <span class="string">"内层变量"</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">innerFun</span>(<span class="params"></span>) </span>&#123; <span class="comment">//内层函数</span></span><br><span class="line">        <span class="built_in">console</span>.log(inVariable);</span><br><span class="line">    &#125;</span><br><span class="line">    innerFun();</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(outVariable); <span class="comment">//我是最外层变量</span></span><br><span class="line">outFun(); <span class="comment">//内层变量</span></span><br><span class="line"><span class="built_in">console</span>.log(inVariable); <span class="comment">//inVariable is not defined</span></span><br><span class="line">innerFun(); <span class="comment">//innerFun is not defined</span></span><br></pre></td></tr></table></figure><a id="more"></a><ol start="2"><li>所有末定义直接赋值的变量自动声明为拥有全局作用域</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">outFun2</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    variable = <span class="string">"未定义直接赋值的变量"</span>;</span><br><span class="line">    <span class="keyword">var</span> inVariable2 = <span class="string">"内层变量2"</span>;</span><br><span class="line">&#125;</span><br><span class="line">outFun2();<span class="comment">//要先执行这个函数，否则根本不知道里面是啥</span></span><br><span class="line"><span class="built_in">console</span>.log(variable); <span class="comment">//未定义直接赋值的变量</span></span><br><span class="line"><span class="built_in">console</span>.log(inVariable2); <span class="comment">//inVariable2 is not defined</span></span><br></pre></td></tr></table></figure><ol start="3"><li>所有window对象的属性拥有全局作用域<br> window对象的内置属性都拥有全局作用域，例如 <code>window.name</code>、<code>window.location</code>、<code>window.top</code> 等。</li></ol><h3 id="局部作用域-Local-Scope"><a href="#局部作用域-Local-Scope" class="headerlink" title="局部作用域(Local Scope)"></a>局部作用域(Local Scope)</h3><p>和全局作用域相反，局部作用域一般只在固定的代码片段内可访问到，最常见的例如函数内部，所有在一些地方也会看到有人把这种作用域称为函数作用域<br>。</p><p>如 1. 中的变量 <code>inVariable</code> 和函数 <code>innerFun</code> 都只拥有局部作用域。</p><hr><h3 id="再补充几个例子"><a href="#再补充几个例子" class="headerlink" title="再补充几个例子"></a>再补充几个例子</h3><ul><li>全局作用域，函数作用域，eval作用域</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">10</span>; <span class="comment">// 全局</span></span><br><span class="line"></span><br><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> b = <span class="number">20</span>;<span class="comment">// 函数</span></span><br><span class="line">&#125;)();</span><br><span class="line"><span class="built_in">console</span>.log(a); <span class="comment">// 10</span></span><br><span class="line"><span class="built_in">console</span>.log(b); <span class="comment">// error, b in not defined</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">eval</span>(<span class="string">"var a = 1;"</span>); <span class="comment">// eval</span></span><br></pre></td></tr></table></figure><ul><li>JavaScript 中没有块作用域</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> item <span class="keyword">in</span> &#123;</span><br><span class="line">    a: <span class="number">1</span>,</span><br><span class="line">    b: <span class="number">2</span></span><br><span class="line">&#125;) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(item);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(item); <span class="comment">// item still in scope</span></span><br></pre></td></tr></table></figure><hr><h2 id="作用域链-Scope-Chain"><a href="#作用域链-Scope-Chain" class="headerlink" title="作用域链(Scope Chain)"></a>作用域链(Scope Chain)</h2><p>在 JavaScript 中，函数也是对象，实际上，JavaScript 里一切都是对象。函数对象和其它对象一样，拥有可以通过代码访问的属性和一系列仅供 JavaScript 引擎访问的内部属性。其中一个内部属性是 [[Scope]]，由 ECMA-262 标准第三版定义，该内部属性包含了函数被创建的作用域中对象的集合，这个集合被称为函数的作用域链，它决定了哪些数据能被函数访问。</p><ol><li>在函数创建时，它的作用域链中会填入一个全局对象，该全局对象包含了所有全局变量。</li><li>函数执行时会创建一个称为“运行期上下文(execution context)”的内部对象，运行期上下文定义了函数执行时的环境。每个运行期上下文都有自己的作用域链，用于标识符解析，当运行期上下文被创建时，而它的作用域链初始化为当前运行函数的[[Scope]]所包含的对象。</li><li>这些值按照它们出现在函数中的顺序被复制到运行期上下文的作用域链中。它们共同组成了一个新的对象，叫“活动对象(activation object)”，该对象包含了函数的所有局部变量、命名参数、参数集合以及this，然后此对象会被推入作用域链的前端。</li><li>当运行期上下文被销毁，活动对象也随之销毁。</li></ol><p>在函数执行过程中，每遇到一个变量，都会经历一次标识符解析过程以决定从哪里获取和存储数据。该过程从作用域链头部，也就是从活动对象开始搜索，查找同名的标识符，如果找到了就使用这个标识符对应的变量，如果没找到继续搜索作用域链中的下一个对象，如果搜索完所有对象都未找到，则认为该标识符未定义。函数执行过程中，每个标识符都要经历这样的搜索过程。</p><hr><h3 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h3><p>举一个作用域链的例子。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> outVariable = <span class="string">"我是最外层变量"</span>; <span class="comment">//最外层变量</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">outFun</span>(<span class="params"></span>) </span>&#123; <span class="comment">//最外层函数</span></span><br><span class="line">    <span class="keyword">var</span> inVariable = <span class="string">"内层变量"</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">innerFun</span>(<span class="params"></span>) </span>&#123; <span class="comment">//内层函数</span></span><br><span class="line">        <span class="built_in">console</span>.log(inVariable);</span><br><span class="line">        <span class="keyword">var</span> tempVariable = inVariable;</span><br><span class="line">    &#125;</span><br><span class="line">    innerFun();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对最开始的代码稍加修改</p><p>其作用域链为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">window</span><br><span class="line">├──outVariable</span><br><span class="line">└──outFun()</span><br><span class="line">   ├──inVariable</span><br><span class="line">   └──innerFun()</span><br><span class="line">      └──tempVariable</span><br></pre></td></tr></table></figure><p>对于 <code>innerFun()</code>，其作用域链包含 3 个对象：innerFun() 自己的变量对象、outFun()的变量对象、全局变量对象。</p><hr><h4 id="特例-构造器创建的函数"><a href="#特例-构造器创建的函数" class="headerlink" title="特例-构造器创建的函数"></a>特例-构造器创建的函数</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">outer</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> i = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">var</span> func = <span class="keyword">new</span> <span class="built_in">Function</span>(<span class="string">"console.log(typeof i);"</span>);</span><br><span class="line">    func(); <span class="comment">// undefined</span></span><br><span class="line">&#125;</span><br><span class="line">outer();</span><br></pre></td></tr></table></figure><p>通过构造器创建的函数是访问不到外层的局部变量的。</p><hr><h3 id="延长作用域链"><a href="#延长作用域链" class="headerlink" title="延长作用域链"></a>延长作用域链</h3><p>有些语句可以在作用域链的前端临时增加一个变量对象，该变量对象会在代码执行后被移除。有两种情况下会发生这种现象。</p><ul><li><code>try-catch</code> 语句中的 <code>catch</code> 块</li><li><code>with</code> 语句</li></ul><p>对 with 来说，将会指定对象添加到作用域链中。对 catch 来说，会创建一个新的变量对象，其中包含的是被抛出的错误对象的声明。</p><hr><h3 id="代码优化"><a href="#代码优化" class="headerlink" title="代码优化"></a>代码优化</h3><p>从作用域链的结构可以看出，在运行期上下文的作用域链中，标识符所在的位置越深，读写速度就会越慢。因为全局变量总是存在于运行期上下文作用域链的最末端，因此在标识符解析的时候，查找全局变量是最慢的。所以，在编写代码的时候应尽量少使用全局变量，尽可能使用局部变量。一个好的经验法则是：如果一个跨作用域的对象被引用了一次以上，则先把它存储到局部变量里再使用。</p><hr><h2 id="VO-amp-AO"><a href="#VO-amp-AO" class="headerlink" title="VO &amp; AO"></a>VO &amp; AO</h2><h3 id="变量初始化阶段"><a href="#变量初始化阶段" class="headerlink" title="变量初始化阶段"></a>变量初始化阶段</h3><ul><li><p>JS解释器如何找到我们定义的函数和变量？</p><p>  变量对象 (Variable Object, 缩写为VO) 是一个抽象概念中的“对象”，它用于存储执行上下文中的：</p><ol><li>变量</li><li>函数声明</li><li>函数参数</li></ol></li><li><p>VO按照如下顺序填充:</p><ol><li>函数参数 (若未传入，初始化该参数值为undefined)    </li><li>函数声明 (若发生命名冲突，会覆盖)   </li><li>变量声明 (初始化变量值为 undefined，若发生命名冲突，会忽略。)</li></ol></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params">x, y, z</span>) </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">x</span>(<span class="params"></span>) </span>&#123;&#125;;</span><br><span class="line">    <span class="built_in">console</span>.log(x);</span><br><span class="line">&#125;</span><br><span class="line">foo(<span class="number">100</span>); <span class="comment">// funtion x()</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo2</span>(<span class="params">x, y, z</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> x = <span class="number">50</span>;</span><br><span class="line">    <span class="built_in">console</span>.log(x);</span><br><span class="line">&#125;</span><br><span class="line">foo2(<span class="number">110</span>); <span class="comment">// 50</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo3</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">x</span>(<span class="params"></span>) </span>&#123;&#125;;</span><br><span class="line">    <span class="keyword">var</span> x = <span class="number">100</span>;</span><br><span class="line">    <span class="built_in">console</span>.log(x);</span><br><span class="line">&#125;</span><br><span class="line">foo3(); <span class="comment">// 100</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo4</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">x</span>(<span class="params"></span>) </span>&#123;&#125;;</span><br><span class="line">    <span class="keyword">var</span> x;</span><br><span class="line">    <span class="built_in">console</span>.log(x);</span><br><span class="line">&#125;</span><br><span class="line">foo4(); <span class="comment">// funtion x()</span></span><br></pre></td></tr></table></figure><p><strong>注：函数表达式不会影响 VO</strong></p><hr><h3 id="代码执行阶段"><a href="#代码执行阶段" class="headerlink" title="代码执行阶段"></a>代码执行阶段</h3><p>给 VO 对象内的变量赋值。</p><p>VO 变为 AO （活动对象 activation object）。</p><hr><h3 id="例"><a href="#例" class="headerlink" title="例"></a>例</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">alert(x); <span class="comment">// function</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> x = <span class="number">10</span>;</span><br><span class="line">alert(x); <span class="comment">// 10</span></span><br><span class="line">x = <span class="number">20</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">x</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line">alert(x); <span class="comment">// 20</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> a = <span class="number">1</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> b = <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">alert(a); <span class="comment">// 1</span></span><br><span class="line">alert(b); <span class="comment">// undefined</span></span><br></pre></td></tr></table></figure><hr><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li><a href="http://www.laruence.com/2009/05/28/863.html" target="_blank" rel="noopener">鸟哥：Javascript作用域原理</a></li><li><a href="http://www.cnblogs.com/lhb25/archive/2011/09/06/javascript-scope-chain.html" target="_blank" rel="noopener">理解 JavaScript 作用域和作用域链</a></li><li><a href="http://www.imooc.com/learn/277" target="_blank" rel="noopener">JavaScript 深入浅出-慕课网</a></li></ul>]]></content>
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> 慕课网 </tag>
            
            <tag> ife </tag>
            
            <tag> 作用域 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>前端的一些资料和工具</title>
      <link href="//2015/front-end-tools.html"/>
      <url>//2015/front-end-tools.html</url>
      <content type="html"><![CDATA[<p>这里记录一些我用到的或者见到的比较好用方便的前端开发相关的工具吧。</p><hr><h2 id="色彩与图标"><a href="#色彩与图标" class="headerlink" title="色彩与图标"></a>色彩与图标</h2><h3 id="CSS滤镜"><a href="#CSS滤镜" class="headerlink" title="CSS滤镜"></a>CSS滤镜</h3><ul><li><p><a href="http://www.cssreflex.com/css-generators/filter" target="_blank" rel="noopener">Filter Effects</a></p><p>  界面：</p><p>  <img src="http://7q5cdt.com1.z0.glb.clouddn.com/blog-filter.png" alt="Filter Effects"></p><p>  有各种各样的滤镜效果，可以直接调节参数观察变化。</p><p>  值得一提的是，这个网站还有很多其他 css 生成器。</p><p>  比如：Border Image, Border Radius, Box Shadow, Filter Effects, Multi-Column, Outline Border, Overflow(x,y), RGBa, Text Rotate, Text Shadow, Textarea Resize, Transform</p></li><li><p>可以访问这里去使用这些 css 生成器：<a href="http://www.cssreflex.com/css-generators/" target="_blank" rel="noopener">CSS Generators</a></p><a id="more"></a></li></ul><hr><h3 id="渐变CSS代码生成器"><a href="#渐变CSS代码生成器" class="headerlink" title="渐变CSS代码生成器"></a>渐变CSS代码生成器</h3><ul><li><p><a href="http://www.colorzilla.com/gradient-editor/" target="_blank" rel="noopener">Ultimate CSS Gradient Generator</a></p><p>  界面如下图：</p><p>  <img src="http://7q5cdt.com1.z0.glb.clouddn.com/blog-color-gradient.png" alt="Ultimate CSS Gradient Generator"></p><p>  目前 css 写渐变还很复杂，但是用了这个工具简直太方便了，直接生成 css 代码，还能兼容 ie。</p></li></ul><hr><h3 id="QQ截图取色-16进制"><a href="#QQ截图取色-16进制" class="headerlink" title="QQ截图取色-16进制"></a>QQ截图取色-16进制</h3><p>在按下 <code>Ctrl+Shift+A</code> 后，再按一下 <code>Ctrl</code> 就可以看到截图框下面的颜色代码变成16进制的代码了。</p><p>如下图：</p><p>普通截图：</p><p><img src="http://7q5cdt.com1.z0.glb.clouddn.com/blog-RBGScreenColor.png" alt="normal"></p><p>按住 <code>Ctrl</code>：</p><p><img src="http://7q5cdt.com1.z0.glb.clouddn.com/blog-hexSreenColor.png" alt="press ctrl"></p><p>可以看到第一幅图中的 51, 51, 51 变成了 #333333。</p><hr><h3 id="配色"><a href="#配色" class="headerlink" title="配色"></a>配色</h3><ul><li><p><a href="http://nipponcolors.com/" target="_blank" rel="noopener">nipponcolors</a></p><p>  日本的一个配色网站。罗列了很多不饱和经典的颜色，当然，自己选配还是很重要的。</p><p>  <img src="http://7q5cdt.com1.z0.glb.clouddn.com/blog-chooseColor.png" alt="nipponcolors"></p></li><li><p><a href="https://color.adobe.com/zh/explore/most-popular/?time=all" target="_blank" rel="noopener">Adobe Color CC</a></p><p>  Adobe 出的在线配色工具，里面有些现成的配色方案还是很不错的。</p><p>  <img src="http://7q5cdt.com1.z0.glb.clouddn.com/blog-adobeColorCC.png" alt="Adobe Color CC"></p></li><li><p><a href="http://paletton.com/" target="_blank" rel="noopener">paletton</a></p><p>  提供了各种预览模式，可以在模板网站中预览，在色块中预览。</p><p>  <img src="http://7q5cdt.com1.z0.glb.clouddn.com/blog-paletton.png" alt="paletton"></p></li></ul><hr><h3 id="图标"><a href="#图标" class="headerlink" title="图标"></a>图标</h3><ul><li><p><a href="http://www.easyicon.net/" target="_blank" rel="noopener">easyicon</a></p><p>  对中文的搜索支持很好。实际上它是先把中文翻译为英文再搜索的。</p><p>  <img src="http://7q5cdt.com1.z0.glb.clouddn.com/blog-icon.png" alt="easyicon"></p></li><li><p><a href="http://fortawesome.github.io/Font-Awesome/icons/" target="_blank" rel="noopener">Font-Awesome</a></p><p>  比上面介绍的那个好用的多，字体图标，不需要考虑像素大小，全部是矢量图。并且图标精美。如果不使用 BootStrap，单独添加图标的话，这一套图标在合适不过了。</p><p>  <img src="http://7q5cdt.com1.z0.glb.clouddn.com/blog-font awesome.png" alt="Font-Awesome"></p></li><li><p><a href="http://www.iconfont.cn/" target="_blank" rel="noopener">iconfont.cn</a></p><p>  阿里巴巴制作的图标库。</p><p>  <img src="http://7q5cdt.com1.z0.glb.clouddn.com/iconfont.png" alt="iconfont"></p></li></ul><hr><h2 id="数据处理"><a href="#数据处理" class="headerlink" title="数据处理"></a>数据处理</h2><h3 id="Json"><a href="#Json" class="headerlink" title="Json"></a>Json</h3><ul><li><p><a href="http://braincast.nl/samples/jsoneditor/" target="_blank" rel="noopener">json editor</a></p><p>  将json数据输入进去，会生成一个树形的结构，方便查看每个节点。</p><p>  <img src="http://7q5cdt.com1.z0.glb.clouddn.com/blog-json.png" alt="jsoneditor"></p></li></ul><hr><h2 id="展示"><a href="#展示" class="headerlink" title="展示"></a>展示</h2><h3 id="reveal-js"><a href="#reveal-js" class="headerlink" title="reveal.js"></a>reveal.js</h3><ul><li><p><a href="https://github.com/hakimel/reveal.js" target="_blank" rel="noopener">reveal.js</a></p><p>  在网页上展示 slides 幻灯片，太酷了。针对不会代码的人还有一个在线编辑器：<a href="http://slides.com" target="_blank" rel="noopener">http://slides.com</a></p><p>  还有一个新手入门教程：<a href="http://htmlcheats.com/reveal-js/reveal-js-tutorial-reveal-js-for-beginners/" target="_blank" rel="noopener">Reveal.js Tutorial-Reveal.js for Beginners</a></p><p>  <img src="http://7q5cdt.com1.z0.glb.clouddn.com/blog-revealjs.png" alt="reveal"></p></li></ul><p>本文不定期更新。</p>]]></content>
      
      <categories>
          
          <category> Tools </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CSS </tag>
            
            <tag> tools </tag>
            
            <tag> reveal </tag>
            
            <tag> 配色 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>百度Web前端技术学院(2)-JavaScript 基础</title>
      <link href="//2015/baidu-ife-2-javascript.html"/>
      <url>//2015/baidu-ife-2-javascript.html</url>
      <content type="html"><![CDATA[<p>百度前端学院的第二次任务笔记，JavaScript 基础。主要有JavaScript的定义，数据类型，对象，数组，字符串，正则表达式，DOM，事件，BOM，Ajax 等知识。</p><h2 id="任务"><a href="#任务" class="headerlink" title="任务"></a>任务</h2><p>掌握JavaScript基础知识，能够使用JavaScript编写一些复杂度不大的交互功能。</p><p><strong>任务：</strong> <a href="https://github.com/Gaohaoyang/ife/tree/master/task/task0002" target="_blank" rel="noopener">JavaScript基础</a>   </p><p>做完任务一的时候深深地感觉到自己的基础非常的薄弱，在这里再次感谢一下百度前端技术学院，做任务的时候深刻理解了自己平时掌握不牢固的内容，比如浮动、BFC、等高布局等。继续加油吧！</p><p>像上一篇文章一样，写些东西记录一下。   </p><a id="more"></a><h2 id="第一个页面交互"><a href="#第一个页面交互" class="headerlink" title="第一个页面交互"></a>第一个页面交互</h2><p>按照任务中的代码，在IE8下提示：<code>对象不支持“addEventListener”属性或方法</code><br>我猜是IE8浏览器没有这个方法吧。</p><p>参考资料：<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide" target="_blank" rel="noopener">JavaScript 指南-MDN</a></p><h3 id="了解JavaScript是什么"><a href="#了解JavaScript是什么" class="headerlink" title="了解JavaScript是什么"></a>了解JavaScript是什么</h3><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/JavaScript_Overview#What_is_JavaScript.3F" target="_blank" rel="noopener">来自MDN的解释</a></p><blockquote><p>JavaScript 是一种跨平台，面向对象的脚本语言。作为一种小巧且轻量级的语言，JavaScript 无意于独立运行，而是被设计为可以轻易嵌入到其它的产品和应用中，比如 Web 浏览器。在宿主环境中，JavaScript 可以被连接到环境中的对象之上，以提供对其的编程控制。</p><p>核心的 JavaScript 中包含有一组核心的对象，包括 Array，Date 和 Math，以及一组核心的语言要素，包括操作符，控制结构和语句。出于多种目的，可以通过为其增补附加的对象，对核心 JavaScript 加以扩展；例如：</p><ul><li>客户端 JavaScript 提供了用于控制浏览器（Navigator 或者其它浏览器）以及其中的文档对象模型（DOM）的对象，从而扩展了核心 JavaScript。例如，客户端扩展允许应用程序在 HTML 的表单中加入元素，以便响应用户事件，比如鼠标点击，表单输入和页面导航。</li><li>服务器端 JavaScript 提供了服务于在服务器上运行 JavaScript 的对象，从而扩展了核心 JavaScript。例如，服务器端扩展可以允许应用程序访问关系型数据库，在应用程序的不同调用间提供信息的连续性，甚至于处理服务器之上的文件。</li></ul><p>借由 JavaScript 的 LiveConnect 功能，您可以让 Java 和 JavaScript 间实现通讯。从 JavaScript 中，您可以创建 Java 对象并访问它们的公共方法和域。从 Java 中，也可以访问 JavaScript 的对象，属性和方法。</p><p>Netscape 发明了 JavaScript 并将 JavaScript 首先用于 Netscape 浏览器中。</p></blockquote><h3 id="如何在-HTML-页面加载-JavaScript-代码"><a href="#如何在-HTML-页面加载-JavaScript-代码" class="headerlink" title="如何在 HTML 页面加载 JavaScript 代码"></a>如何在 HTML 页面加载 JavaScript 代码</h3><p>使用 <code>&lt;script&gt;</code> 标签在 HTML 文件中添加 JavaScript 代码。</p><p>我们可以将 <code>JavaScript</code> 代码放在 <code>html</code> 文件中任何位置，但是我们一般放在网页的 <code>head</code> 或者 <code>body</code> 部分。</p><p>放在 <code>&lt;head&gt;</code> 部分<br>最常用的方式是在页面中head部分放置 <code>&lt;script&gt;</code> 元素，浏览器解析 <code>head</code> 部分就会执行这个代码，然后才解析页面的其余部分。</p><p>放在 <code>&lt;body&gt;</code> 部分<br>JavaScript 代码在网页读取到该语句的时候就会执行。</p><p><strong>注意</strong>: javascript 作为一种脚本语言可以放在 html 页面中任何位置，但是浏览器解释 html 时是按先后顺序的，所以前面的 script 就先被执行。比如进行页面显示初始化的 js 必须放在 head 里面，因为初始化都要求提前进行（如给页面 body 设置 css 等）；而如果是通过事件调用执行的 function 那么对位置没什么要求的。</p><h3 id="为什么把-lt-script-gt-放在-lt-body-gt-前"><a href="#为什么把-lt-script-gt-放在-lt-body-gt-前" class="headerlink" title="为什么把 &lt;script&gt; 放在 &lt;/body&gt; 前"></a>为什么把 <code>&lt;script&gt;</code> 放在 <code>&lt;/body&gt;</code> 前</h3><p>虽然理论上放在哪里都是可以的，但是对于前端页面优化来讲，还是放在底部是最佳的，因为如果JS执行出现错误了，最起码页面中的元素还能加载出来，因为DOM文档是从上往下的顺序执行的。    如果你还不了解DOM的加载顺序，请阅读jQuery中ready与load事件的区别。</p><p><strong>下面是重点</strong></p><p>按照HTML5标准中的HTML语法规则，如果在 <code>&lt;/body&gt;</code> 后再出现 <code>&lt;script&gt;</code> 或任何元素的开始标签，都是parse error，浏览器会忽略之前的 <code>&lt;/body&gt;</code> ，即视作仍旧在body内。所以实际效果和写在 <code>&lt;/body&gt;</code> 之前是没有区别的。</p><p>总之，这种写法虽然也能work，但是并没有带来任何额外好处，实际上出现这样的写法很可能是误解了“将script放在页面最末端”的教条。所以还是不要这样写为好。</p><ul><li><a href="http://www.zhihu.com/question/20027966" target="_blank" rel="noopener">script在body闭合标签之后还是之前-知乎</a></li><li><a href="http://www.zhihu.com/question/19617126" target="_blank" rel="noopener">body 和 html 标签均没有关闭</a></li></ul><h4 id="JavaScript-的性能优化：加载和执行"><a href="#JavaScript-的性能优化：加载和执行" class="headerlink" title="JavaScript 的性能优化：加载和执行"></a>JavaScript 的性能优化：加载和执行</h4><ul><li>扩展阅读：<a href="http://www.ibm.com/developerworks/cn/web/1308_caiys_jsload/index.html" target="_blank" rel="noopener">JavaScript 的性能优化：加载和执行</a></li></ul><p><strong>脚本位置</strong></p><p>由于脚本会阻塞页面其他资源的下载，因此推荐将所有 <code>&lt;script&gt;</code> 标签尽可能放到 <code>&lt;body&gt;</code> 标签的底部，以尽量减少对整个页面下载的影响。</p><p><strong>组织脚本</strong></p><p>由于每个 <code>&lt;script&gt;</code> 标签初始下载时都会阻塞页面渲染，所以减少页面包含的 <code>&lt;script&gt;</code> 标签数量有助于改善这一情况。这不仅针对外链脚本，内嵌脚本的数量同样也要限制。浏览器在解析 HTML 页面的过程中每遇到一个 <code>&lt;script&gt;</code> 标签，都会因执行脚本而导致一定的延时，因此最小化延迟时间将会明显改善页面的总体性能。</p><p><strong>无阻塞的脚本</strong></p><p>减少 JavaScript 文件大小并限制 HTTP 请求数在功能丰富的 Web 应用或大型网站上并不总是可行。Web 应用的功能越丰富，所需要的 JavaScript 代码就越多，尽管下载单个较大的 JavaScript 文件只产生一次 HTTP 请求，却会锁死浏览器的一大段时间。为避免这种情况，需要通过一些特定的技术向页面中逐步加载 JavaScript 文件，这样做在某种程度上来说不会阻塞浏览器。</p><p>无阻塞脚本的秘诀在于，在页面加载完成后才加载 JavaScript 代码。这就意味着在 window 对象的 onload事件触发后再下载脚本。有多种方式可以实现这一效果。</p><ul><li>延迟加载脚本</li></ul><p>HTML 4 为 <code>&lt;script&gt;</code> 标签定义了一个扩展属性：defer。Defer 属性指明本元素所含的脚本不会修改 DOM，因此代码能安全地延迟执行。</p><p>带有 defer 属性的 <code>&lt;script&gt;</code> 标签可以放置在文档的任何位置。对应的 JavaScript 文件将在页面解析到 <code>&lt;script&gt;</code> 标签时开始下载，但不会执行，直到 DOM 加载完成，即onload事件触发前才会被执行。当一个带有 defer 属性的 JavaScript 文件下载时，它不会阻塞浏览器的其他进程，因此这类文件可以与其他资源文件一起并行下载。</p><p>对于如下代码：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Script Defer Example<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">defer</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">        alert(<span class="string">"defer"</span>);</span></span><br><span class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">        alert(<span class="string">"script"</span>);</span></span><br><span class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">        <span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">            alert(<span class="string">"load"</span>);</span></span><br><span class="line"><span class="undefined">        &#125;;</span></span><br><span class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在支持 defer 属性的浏览器上，弹出的顺序则是：”script”、”defer”、”load”。请注意，带有 defer 属性的 <code>&lt;script&gt;</code> 元素不是跟在第二个后面执行，而是在 onload 事件被触发前被调用。</p><p>引用的资料可能写的比较早，在 <a href="http://caniuse.com/#search=defer" target="_blank" rel="noopener">CanIUse</a> 上查了一下 defer 发现大部分浏览器都是支持的。如下图：<br><img src="http://7q5cdt.com1.z0.glb.clouddn.com/Baidu-Front-end-defer.jpg" alt="defer的支持情况"></p><p>HTML 5 为 <code>&lt;script&gt;</code> 标签定义了一个新的扩展属性：async。它的作用和 defer 一样，能够异步地加载和执行脚本，不因为加载脚本而阻塞页面的加载。但是有一点需要注意，在有 async 的情况下，JavaScript 脚本一旦下载好了就会执行，所以很有可能不是按照原本的顺序来执行的。如果 JavaScript 脚本前后有依赖性，使用 async 就很有可能出现错误。</p><p>IE8,9不支持 <code>async</code></p><ul><li>动态脚本元素</li><li>使用 XMLHttpRequest(XHR)对象</li></ul><p><strong>原文中的总结</strong></p><p>减少 JavaScript 对性能的影响有以下几种方法：</p><ul><li>将所有的 <code>&lt;script&gt;</code> 标签放到页面底部，也就是 <code>&lt;/body&gt;</code> 闭合标签之前，这能确保在脚本执行前页面已经完成了渲染。</li><li>尽可能地合并脚本。页面中的 <code>&lt;script&gt;</code> 标签越少，加载也就越快，响应也越迅速。无论是外链脚本还是内嵌脚本都是如此。</li><li>采用无阻塞下载 JavaScript 脚本的方法：<ul><li>使用 <code>&lt;script&gt;</code> 标签的 defer 属性（仅适用于 IE 和 Firefox 3.5 以上版本）；</li><li>使用动态创建的 <code>&lt;script&gt;</code> 元素来下载并执行代码；</li><li>使用 XHR 对象下载 JavaScript 代码并注入页面中。</li></ul></li></ul><p>通过以上策略，可以在很大程度上提高那些需要使用大量 JavaScript 的 Web 网站和应用的实际性能。</p><h2 id="JavaScript数据类型及语言基础"><a href="#JavaScript数据类型及语言基础" class="headerlink" title="JavaScript数据类型及语言基础"></a>JavaScript数据类型及语言基础</h2><h3 id="数据类型概要"><a href="#数据类型概要" class="headerlink" title="数据类型概要"></a>数据类型概要</h3><p>最新的 ECMAScript 标准定义了 7 种数据类型:</p><ul><li>6 种 原始类型:<ul><li>Boolean</li><li>Null</li><li>Undefined</li><li>Number</li><li>String</li><li>Symbol (new in ECMAScript 6)</li></ul></li><li>和 Object</li></ul><h3 id="一些要点"><a href="#一些要点" class="headerlink" title="一些要点"></a>一些要点</h3><ul><li>一个没有被赋值的变量会有个默认值 undefined</li><li>null 与 undefined 的不同点：</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typeof</span> <span class="literal">null</span>        <span class="comment">// object (bug in ECMAScript, should be null)</span></span><br><span class="line"><span class="keyword">typeof</span> <span class="literal">undefined</span>   <span class="comment">// undefined</span></span><br><span class="line"><span class="literal">null</span> === <span class="literal">undefined</span> <span class="comment">// false</span></span><br><span class="line"><span class="literal">null</span> == <span class="literal">undefined</span> <span class="comment">// true</span></span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">typeof null 返回 object</span><br></pre></td></tr></table></figure><ul><li>Number 数字类型，它并没有为整数给出一种特定的类型。除了能够表示浮点数外，还有一些带符号的值：+Infinity，-Infinity 和 NaN (非数值，Not-a-Number)。</li><li>NaN与任何值都不相等，包括自身。应当使用 <code>x != x</code> 来判断，当且仅当 x 为 NaN 的时候，表达式的结果才为 <code>true</code>。相似的函数有 <code>isNaN()</code>, <code>isFinite()</code>。</li><li>数组直接量的语法允许有可选的结尾逗号，故 <code>[,,]</code> 只有两个元素而非三个。</li></ul><h3 id="实践判断各种数据类型的方法"><a href="#实践判断各种数据类型的方法" class="headerlink" title="实践判断各种数据类型的方法"></a>实践判断各种数据类型的方法</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 判断arr是否为一个数组，返回一个bool值</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isArray</span>(<span class="params">arr</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">typeof</span> arr === <span class="string">"object"</span> &amp;&amp; <span class="built_in">Object</span>.prototype.toString.call(arr) === <span class="string">"[object Array]"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 判断fn是否为一个函数，返回一个bool值</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isFunction</span>(<span class="params">fn</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">typeof</span> fn === <span class="string">"function"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="数组类型"><a href="#数组类型" class="headerlink" title="数组类型"></a>数组类型</h4><p>在 ECMAScript5 中，可以直接使用 <code>Array.isArray()</code> 来判断数组。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Array</span>.isArray([]);  <span class="comment">//true</span></span><br><span class="line"><span class="built_in">Array</span>.isArray(&#123;&#125;);  <span class="comment">//false</span></span><br></pre></td></tr></table></figure><p>我看《JavaScript权威指南上》没有推荐使用 <code>instanceof</code>，因为可能会有多窗体(frame)存在。</p><blockquote><p>这样每一个窗口都有一个自己的 JavaScript 环境，有自己的全局对象。并且每个全局对象都有自己的一组构造函数。因此一个窗体中的对象不可能是另外窗体中的构造函数的实例。</p></blockquote><p>所以采用了上述我写的那样的代码</p><h3 id="值类型和引用类型的区别"><a href="#值类型和引用类型的区别" class="headerlink" title="值类型和引用类型的区别"></a>值类型和引用类型的区别</h3><ul><li><p>值类型</p><p>  声明一个值类型变量，编译器会在栈上分配一个空间，这个空间对应着该值类型变量，空间里存储的就是该变量的值。存储在栈（stack）中的简单数据段，也就是说，它们的值直接存储在变量访问的位置。</p></li><li><p>引用类型</p><p>  引用类型的实例分配在堆上，新建一个引用类型实例，得到的变量值对应的是该实例的内存分配地址，这就像您的银行账号一样。存储在堆（heap）中的对象，也就是说，存储在变量处的值是一个指针（point），指向存储对象的内存处。</p></li></ul><blockquote><p>为变量赋值时，ECMAScript 的解释程序必须判断该值是原始类型，还是引用类型。要实现这一点，解释程序则需尝试判断该值是否为 ECMAScript 的原始类型之一，即 Undefined、Null、Boolean、Number 和 String 型。由于这些原始类型占据的空间是固定的，所以可将他们存储在较小的内存区域 - 栈中。这样存储便于迅速查寻变量的值。</p><ul><li><strong>在许多语言中，字符串都被看作引用类型，而非原始类型，因为字符串的长度是可变的。ECMAScript 打破了这一传统。</strong></li></ul><p>如果一个值是引用类型的，那么它的存储空间将从堆中分配。由于引用值的大小会改变，所以不能把它放在栈中，否则会降低变量查寻的速度。相反，放在变量的栈空间中的值是该对象存储在堆中的地址。地址的大小是固定的，所以把它存储在栈中对变量性能无任何负面影响。如下图所示：</p><p><img src="http://www.w3school.com.cn/i/ct_js_value.gif" alt="ct_js_value"></p></blockquote><p>JavaScript中原始值包括：undefined，null，布尔值，数字和字符串。引用类型主要指对象（包括数组和函数）。</p><blockquote><ul><li>原始值是不可更改的。对象的值是可修改的。</li><li>原始值的比较是值的比较。对象的比较并非值的比较。对象的值都是引用，对象的比较均是引用的比较，当且仅当他们都引用同一个基对象时，他们才相等。</li></ul></blockquote><p><strong>参考：</strong></p><ul><li><a href="http://www.w3school.com.cn/js/pro_js_value.asp" target="_blank" rel="noopener">ECMAScript 原始值和引用值</a></li></ul><h3 id="对象的读取、遍历方式"><a href="#对象的读取、遍历方式" class="headerlink" title="对象的读取、遍历方式"></a>对象的读取、遍历方式</h3><p>参考：<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Working_with_Objects" target="_blank" rel="noopener">JavaScript 指南-使用对象</a></p><ul><li>对象</li></ul><p>在javascript中，一个对象可以是一个单独的拥有属性和类型的实体。我们拿它和一个杯子做下类比。一个杯子是一个对象(物体)，拥有属性。杯子有颜色，图案，重量，由什么材质构成等等。同样，javascript对象也有属性来定义它的特征。</p><ul><li>属性</li></ul><p>一个 javascript 对象有很多属性。一个对象的属性可以被解释成一个附加到对象上的变量。对象的属性和普通的 javascript 变量基本没什么区别，仅仅是属性属于某个对象。属性定义了对象的特征(译注：动态语言面向对象的鸭子类型)。你可以通过点符号来访问一个对象的属性。JavaScript 对象的属性也可以通过方括号访问。</p><ul><li>枚举</li></ul><p>你可以在 <code>for...in</code> 语句中使用方括号标记以枚举一个对象的所有属性。为了展示它如何工作，下面的函数当你将对象及其名称作为参数传入时，显示对象的属性：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">showProps</span>(<span class="params">obj, objName</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> result = <span class="string">""</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i <span class="keyword">in</span> obj) &#123;</span><br><span class="line">    <span class="keyword">if</span> (obj.hasOwnProperty(i)) &#123;</span><br><span class="line">        result += objName + <span class="string">"."</span> + i + <span class="string">" = "</span> + obj[i] + <span class="string">"\n"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> srcObj = &#123;</span><br><span class="line">    a: <span class="number">1</span>,</span><br><span class="line">    b: &#123;</span><br><span class="line">        b1: [<span class="string">"hello"</span>, <span class="string">"hi"</span>],</span><br><span class="line">        b2: <span class="string">"JavaScript"</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(showProps(srcObj,<span class="string">'srcObj'</span>));</span><br></pre></td></tr></table></figure><p>console:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">srcObj.a = 2</span><br><span class="line">srcObj.b = [object Object]</span><br></pre></td></tr></table></figure><p>这里使用 <code>hasOwnProperty()</code> 是为了确保是自己的属性而非继承的属性。</p><p>可以如下写，跳过这个对象的方法：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">showPropsWithoutFun</span>(<span class="params">obj, objName</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> result = <span class="string">""</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i <span class="keyword">in</span> obj) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!obj.hasOwnProperty(i)) &#123;       <span class="comment">//跳过继承属性</span></span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">typeof</span> obj[i] === <span class="string">"function"</span>) &#123; <span class="comment">//跳过这个对象的方法</span></span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        result += objName + <span class="string">"."</span> + i + <span class="string">"="</span> + obj[i] + <span class="string">"\n"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>相关的方法还有：<code>Object.keys()</code>, <code>Object.getOwnPropertyNames()</code></p><p><code>Object.keys()</code> 方法会返回一个由给定对象的所有可枚举自身属性的属性名组成的数组，数组中属性名的排列顺序和使用for-in循环遍历该对象时返回的顺序一致（两者的主要区别是 for-in 还会遍历出一个对象从其原型链上继承到的可枚举属性）。</p><p><code>Object.getOwnPropertyNames()</code> 方法返回一个由指定对象的所有自身属性的属性名（包括不可枚举属性）组成的数组。</p><ul><li>创建对象</li></ul><p>创建对象的方式有三种：对象直接量，关键字 <code>new</code>，使用 <code>Object.create()</code> 方法。</p><p><code>Object.create()</code> 方法创建一个拥有指定原型和若干个指定属性的对象。</p><ul><li>继承</li></ul><p>所有的 JavaScript 对象继承于至少一个对象。被继承的对象被称作原型，并且继承的属性可能通过构造函数的 prototype 对象找到。</p><ul><li>定义方法</li></ul><p>一个方法 是关联到某个对象的函数，或者简单地说，一个方法是一个值为某个函数的对象属性。定义方法就象定义普通的函数，除了它们必须被赋给对象的某个属性。例如：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">objectName.methodname = function_name;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> myObj = &#123;</span><br><span class="line">  myMethod: <span class="function"><span class="keyword">function</span>(<span class="params">params</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// ...do something</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="深度克隆"><a href="#深度克隆" class="headerlink" title="深度克隆"></a>深度克隆</h4><p>了解值类型和引用类型的区别，了解各种对象的读取、遍历方式，并在util.js中实现以下方法：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 使用递归来实现一个深度克隆，可以复制一个目标对象，返回一个完整拷贝</span></span><br><span class="line"><span class="comment">// 被复制的对象类型会被限制为数字、字符串、布尔、日期、数组、Object对象。不会包含函数、正则对象等</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">cloneObject</span>(<span class="params">src</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// your implement</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 测试用例：</span></span><br><span class="line"><span class="keyword">var</span> srcObj = &#123;</span><br><span class="line">    a: <span class="number">1</span>,</span><br><span class="line">    b: &#123;</span><br><span class="line">        b1: [<span class="string">"hello"</span>, <span class="string">"hi"</span>],</span><br><span class="line">        b2: <span class="string">"JavaScript"</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> abObj = srcObj;</span><br><span class="line"><span class="keyword">var</span> tarObj = cloneObject(srcObj);</span><br><span class="line"></span><br><span class="line">srcObj.a = <span class="number">2</span>;</span><br><span class="line">srcObj.b.b1[<span class="number">0</span>] = <span class="string">"Hello"</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(abObj.a);</span><br><span class="line"><span class="built_in">console</span>.log(abObj.b.b1[<span class="number">0</span>]);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(tarObj.a);      <span class="comment">// 1</span></span><br><span class="line"><span class="built_in">console</span>.log(tarObj.b.b1[<span class="number">0</span>]);    <span class="comment">// "hello"</span></span><br></pre></td></tr></table></figure><p><strong>参考：</strong></p><ul><li><a href="http://blog.csdn.net/java2000_net/article/details/3014934" target="_blank" rel="noopener">白话简单克隆和深度克隆</a> 介绍什么是深度克隆，用羊圈和羊的图，简单深刻。如下图：</li></ul><p><img src="http://p.blog.csdn.net/images/p_blog_csdn_net/java2000_net/EntryImages/20081004/%E7%AE%80%E5%8D%95%E5%85%8B%E9%9A%86.PNG" alt="简单克隆"><br><img src="http://p.blog.csdn.net/images/p_blog_csdn_net/java2000_net/EntryImages/20081004/%E6%B7%B1%E5%BA%A6%E5%85%8B%E9%9A%86.PNG" alt="深度克隆"></p><ul><li><a href="http://www.jb51.net/article/32015.htm" target="_blank" rel="noopener">javascript克隆对象深度介绍</a> 这个代码写的太妙了，可惜找不到源地址了，都是转载来转载去的，要是你知道源地址，请留言告诉我。</li></ul><p>浅度克隆：基本类型为值传递，对象仍为引用传递。</p><p>深度克隆：所有元素或属性均完全克隆，并于原引用类型完全独立，即，在后面修改对象的属性的时候，原对象不会被修改。</p><p><strong>思路：</strong>深度克隆复制目标对象，那么就需要枚举这个对象。</p><ol><li>判断当前属性是否是引用类型，如果是数组或者对象，创建相应类型变量。</li><li>枚举对象内所有属性。</li><li>使用 <code>hasOwnProperty()</code> 方法，排除继承的属性。</li><li>给新的对象相应位置赋值，若当前属性为引用类型（数组或对象）递归本方法。直到内部的值类型。</li><li>返回新的对象。</li></ol><p><strong>我的代码实现：</strong>   </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">cloneObject</span>(<span class="params">src</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// your implement</span></span><br><span class="line">    <span class="keyword">var</span> o; <span class="comment">//result</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">Object</span>.prototype.toString.call(src) === <span class="string">"[object Array]"</span>) &#123;</span><br><span class="line">        o = []; <span class="comment">//判断是否是数组，并赋初始值</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        o = &#123;&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i <span class="keyword">in</span> src) &#123; <span class="comment">//遍历这个对象</span></span><br><span class="line">        <span class="keyword">if</span> (src.hasOwnProperty(i)) &#123; <span class="comment">//排出继承属性</span></span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">typeof</span> src[i] === <span class="string">"object"</span>) &#123;</span><br><span class="line">                o[i] = cloneObject(src[i]); <span class="comment">//递归赋值</span></span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                o[i] = src[i]; <span class="comment">//直接赋值</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> o;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="对数组进行去重"><a href="#对数组进行去重" class="headerlink" title="对数组进行去重"></a>对数组进行去重</h3><p><strong>参考：</strong></p><ul><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array" target="_blank" rel="noopener">MDN Array</a></li><li><a href="http://www.w3school.com.cn/jsref/jsref_obj_array.asp" target="_blank" rel="noopener">JavaScript Array 对象 w3school</a></li></ul><p><strong>要求：</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 对数组进行去重操作，只考虑数组中元素为数字或字符串，返回一个去重后的数组</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">uniqArray</span>(<span class="params">arr</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// your implement</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用示例</span></span><br><span class="line"><span class="keyword">var</span> a = [<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">5</span>, <span class="number">3</span>];</span><br><span class="line"><span class="keyword">var</span> b = uniqArray(a);</span><br><span class="line"><span class="built_in">console</span>.log(b); <span class="comment">// [1, 3, 5, 7]</span></span><br></pre></td></tr></table></figure><p><strong>思路：</strong></p><ol><li>新建一个空数组</li><li>遍历原数组</li><li>若新数组中不存在当前元素，将其 <code>push</code> 入新数组中</li><li>返回新数组</li></ol><p><strong>实现：</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 对数组进行去重操作，只考虑数组中元素为数字或字符串，返回一个去重后的数组</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">uniqArray</span>(<span class="params">arr</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> newArr = [];    <span class="comment">//创建空数组</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i <span class="keyword">in</span> arr) &#123;    <span class="comment">//遍历旧数组</span></span><br><span class="line">        <span class="keyword">if</span> (newArr.indexOf(arr[i]) == <span class="number">-1</span>) &#123;<span class="comment">//如果新数组中不存在当前元素</span></span><br><span class="line">            newArr.push(arr[i]);<span class="comment">//新数组中加入当前元素</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> newArr;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>相关方法与知识点：</strong></p><h4 id="Array-对象"><a href="#Array-对象" class="headerlink" title="Array 对象"></a>Array 对象</h4><ul><li>Array 对象属性</li></ul><p>属性  | 描述<br>constructor | 返回对创建此对象的数组函数的引用。<br>length  | 设置或返回数组中元素的数目。<br>prototype  |  使您有能力向对象添加属性和方法。</p><ul><li>Mutator 方法，这些方法可以改变数组自身</li></ul><p>方法 | 描述<br>pop | 移除数组的最后一个元素，返回值是被删除的元素。<br>push | 在数组的末尾添加一个或者多个元素，返回值是新的数组的长度。<br>reverse | 颠倒数组中元素的顺序，原先第一个元素现在变成最后一个，同样原先的最后一个元素变成了现在的第一个，也就是数组的索引发生了变化。<br>shift | 删除数组的第一个元素，返回值是删除的元素。<br>sort | 对数组中的元素进行排序。<br>splice | 添加或删除数组中的一个或多个元素。<br>unshift | 添加一个或者多个元素在数组的开头，返回值是新的数组的长度。</p><ul><li>Accessor 方法，这些过程不改变数组自身 These methods do not modify the array and return some representation of the array.</li></ul><p>方法|描述<br>concat | 返回一个包含此数组和其他数组和/或值的结合的新数组<br>indexOf | 返回第一个与给定参数相等的数组元素的索引，没有找到则返回-1。<br>join | 将所有的数组元素连接成一个字符串。<br>lastIndexOf | 返回在数组中搜索到的与给定参数相等的元素的最后（最大）索引。<br>slice | 返回数组中的一段。<br>toSource | Returns an array literal representing the specified array; you can use this value to create a new array. Overrides the Object.toSource method.<br>toString | 返回代表该数组及其元素的字符,重写Object.toString 过程.<br>valueOf | Returns the primitive value of the array. Overrides the Object.valueOf method.</p><ul><li>循环（迭代）过程</li></ul><p>方法 | 描述<br>filter | 对数组中的每一个元素调用参数中指定的过滤函数，并将对于过滤函数返回值为true的那些数组元素集合为新的数组返回。<br>forEach | 对数组的每一个元素依次调用参数中指定的函数。<br>every | 如果数组中每一个元素都满足参数中提供的测试函数，则返回真。<br>map | Creates a new array with the results of calling a provided function on every element in this array.<br>some | 如果数组中至少有一个元素满足参数函数的测试，则返回true。</p><h3 id="实现-trim"><a href="#实现-trim" class="headerlink" title="实现 trim()"></a>实现 <code>trim()</code></h3><p><strong>参考：</strong></p><ul><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String" target="_blank" rel="noopener">String MDN</a></li><li><a href="http://www.w3school.com.cn/jsref/jsref_obj_string.asp" target="_blank" rel="noopener">JavaScript String 对象 W3school</a></li></ul><p><strong>要求：</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 中级班同学跳过此题</span></span><br><span class="line"><span class="comment">// 实现一个简单的trim函数，用于去除一个字符串，头部和尾部的空白字符</span></span><br><span class="line"><span class="comment">// 假定空白字符只有半角空格、Tab</span></span><br><span class="line"><span class="comment">// 练习通过循环，以及字符串的一些基本方法，分别扫描字符串str头部和尾部是否有连续的空白字符，并且删掉他们，最后返回一个完成去除的字符串</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">simpleTrim</span>(<span class="params">str</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// your implement</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 很多同学肯定对于上面的代码看不下去，接下来，我们真正实现一个trim</span></span><br><span class="line"><span class="comment">// 对字符串头尾进行空格字符的去除、包括全角半角空格、Tab等，返回一个字符串</span></span><br><span class="line"><span class="comment">// 尝试使用一行简洁的正则表达式完成该题目</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">trim</span>(<span class="params">str</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// your implement</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用示例</span></span><br><span class="line"><span class="keyword">var</span> str = <span class="string">'   hi!  '</span>;</span><br><span class="line">str = trim(str);</span><br><span class="line"><span class="built_in">console</span>.log(str); <span class="comment">// 'hi!'</span></span><br></pre></td></tr></table></figure><p><strong>思路：</strong></p><p>对于 <code>simpleTrim()</code> 做两次循环，从前面开始和从后面开始。遇到空格和Tab跳出，最后用 <code>slice()</code> 取出子字符串。</p><p>对于 <code>trim()</code> 使用正则表达式。</p><p><strong>实现：</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">simpleTrim</span>(<span class="params">str</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> i;</span><br><span class="line">    <span class="keyword">var</span> j;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; str.length; i++) &#123; <span class="comment">//从头遍历字符串</span></span><br><span class="line">        <span class="keyword">if</span> (str.charAt(i) != <span class="string">" "</span> &amp;&amp; str.charAt(i) != <span class="string">"\t"</span>) &#123; <span class="comment">//当不为空的时候</span></span><br><span class="line">            <span class="keyword">break</span>; <span class="comment">//跳出循环</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (j = str.length - <span class="number">1</span>; j &gt;= <span class="number">0</span>; j--) &#123;</span><br><span class="line">        <span class="keyword">if</span> (str.charAt(j) != <span class="string">" "</span> &amp;&amp; str.charAt(j) != <span class="string">"\t"</span>) &#123; <span class="comment">//当不为空的时候</span></span><br><span class="line">            <span class="keyword">break</span>; <span class="comment">//跳出循环</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> str.slice(i, j + <span class="number">1</span>); <span class="comment">//返回子字符串</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">trim</span>(<span class="params">str</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> str.replace(<span class="regexp">/^\s+|\s+$/g</span>, <span class="string">''</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>关于正则表达式：</p><h4 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h4><p>上面的思路是匹配开头和结尾的空白字符，并全局匹配。</p><ul><li><code>^</code>：匹配字符串的开头，在多行检索中，匹配一行的开头。</li><li><code>$</code>：匹配字符串的结尾，在多行检索中，匹配一行的结尾。</li><li><code>|</code>：选择，匹配的是该符号左边的子表达式或右边的子表达式。</li><li><code>\s</code>：任何 Unicode 空白符。</li><li><code>g</code>：执行一个全局匹配，简言之，即找到所有匹配，而不是找到第一个之后就停止。</li></ul><p>以上来自 JavaScript权威指南（犀牛书），感觉这里面将的正则表达式还不错。</p><p><strong>相关方法和知识点：</strong></p><h4 id="String对象"><a href="#String对象" class="headerlink" title="String对象"></a>String对象</h4><ul><li>String 对象属性</li></ul><p>属性 | 描述<br>constructor | 对创建该对象的函数的引用<br>length | 字符串的长度<br>prototype  | 允许您向对象添加属性和方法</p><ul><li>String 对象方法</li></ul><p>方法 | 描述<br>charAt()  |  返回在指定位置的字符。<br>charCodeAt()  |  返回在指定的位置的字符的 Unicode 编码。<br>concat()  |  连接字符串。<br>indexOf() |  检索字符串。<br>lastIndexOf()  | 从后向前搜索字符串。<br>localeCompare() | 用本地特定的顺序来比较两个字符串。<br>match()| 找到一个或多个正则表达式的匹配。<br>replace() |  替换与正则表达式匹配的子串。<br>search()  |  检索与正则表达式相匹配的值。<br>slice()| 提取字符串的片断，并在新的字符串中返回被提取的部分。<br>split()| 把字符串分割为字符串数组。<br>substr()  |  从起始索引号提取字符串中指定数目的字符。<br>substring() |提取字符串中两个指定的索引号之间的字符。<br>toLowerCase() |  把字符串转换为小写。<br>toUpperCase()  | 把字符串转换为大写。<br>toString() | 返回字符串。<br>valueOf()  | 返回某个字符串对象的原始值。</p><ul><li>静态方法</li></ul><p><code>String.fromCharCode()</code> 使用作为参数传入的字符编码创建一个新的字符串。</p><ul><li>HTML方法</li></ul><p>由于不是标准方法，这里就不列举了。</p><h3 id="遍历数组，使每一个元素执行-fn-函数"><a href="#遍历数组，使每一个元素执行-fn-函数" class="headerlink" title="遍历数组，使每一个元素执行 fn 函数"></a>遍历数组，使每一个元素执行 <code>fn</code> 函数</h3><p><strong>要求：</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 实现一个遍历数组的方法，针对数组中每一个元素执行fn函数，并将数组索引和元素作为参数传递</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">each</span>(<span class="params">arr, fn</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// your implement</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 其中fn函数可以接受两个参数：item和index</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用示例</span></span><br><span class="line"><span class="keyword">var</span> arr = [<span class="string">'java'</span>, <span class="string">'c'</span>, <span class="string">'php'</span>, <span class="string">'html'</span>];</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">output</span>(<span class="params">item</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(item)</span><br><span class="line">&#125;</span><br><span class="line">each(arr, output);  <span class="comment">// java, c, php, html</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用示例</span></span><br><span class="line"><span class="keyword">var</span> arr = [<span class="string">'java'</span>, <span class="string">'c'</span>, <span class="string">'php'</span>, <span class="string">'html'</span>];</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">output</span>(<span class="params">item, index</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(index + <span class="string">': '</span> + item)</span><br><span class="line">&#125;</span><br><span class="line">each(arr, output);  <span class="comment">// 0:java, 1:c, 2:php, 3:html</span></span><br></pre></td></tr></table></figure><p><strong>分析：</strong></p><p>这个任务有点像 <code>ECMAScript5</code> 中新增的数组方法：<code>forEach()</code>。还有一点这里的参数 index 是可选形参，保证第一个参数 item 能正常传入就行了，代码非常简单，如下：</p><p><strong>实现：</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">each</span>(<span class="params">arr, fn</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i <span class="keyword">in</span> arr)&#123;</span><br><span class="line">        fn(arr[i],i);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="获取对象中第一层元素个数"><a href="#获取对象中第一层元素个数" class="headerlink" title="获取对象中第一层元素个数"></a>获取对象中第一层元素个数</h3><p><strong>要求：</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 获取一个对象里面第一层元素的数量，返回一个整数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getObjectLength</span>(<span class="params">obj</span>) </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用示例</span></span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">    a: <span class="number">1</span>,</span><br><span class="line">    b: <span class="number">2</span>,</span><br><span class="line">    c: &#123;</span><br><span class="line">        c1: <span class="number">3</span>,</span><br><span class="line">        c2: <span class="number">4</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">console</span>.log(getObjectLength(obj)); <span class="comment">// 3</span></span><br></pre></td></tr></table></figure><p><strong>实现：</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getObjectLength</span>(<span class="params">obj</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Object</span>.keys(obj).length;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个自己写的比较简单，不知道可以这样写不。其中 <code>Object.keys(o)</code> 为 Object 的一个静态方法，参数是一个对象，返回一个包含o的所有可枚举自有（非继承）属性名字的数组。</p><h3 id="正则表达式-1"><a href="#正则表达式-1" class="headerlink" title="正则表达式"></a>正则表达式</h3><p><strong>要求：</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 判断是否为邮箱地址</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isEmail</span>(<span class="params">emailStr</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// your implement</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 判断是否为手机号</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isMobilePhone</span>(<span class="params">phone</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// your implement</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>分析：</strong></p><p>邮箱由（数字字母，点），数字字母组合，@符号，数字字母，（点，数字字母）。其中两个小括号都是任意个数的。并且开头和结尾都是字母。</p><p>手机号是11位组成的，有时候会在前面加国际区号的前缀，如中国：+86。查阅相关资料后发现区号最多4位。<a href="http://baike.baidu.com/link?url=2nwM_XyoKXLNPxk0-uDwGT4SxIFncXy7dqB3VbsH3tSaueYRri3CYOWWF9qb84zUqeKkq9uTF2YfetoiyJVm7_" target="_blank" rel="noopener">国际电话区号_百度百科</a></p><p>并且手机号最多就是11位，其他国家有用8位的，也有用7位，10位的都有。最短是7位，最长是11位。</p><p><strong>实现：</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 判断是否为邮箱地址</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isEmail</span>(<span class="params">emailStr</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> pattern = <span class="regexp">/^(\w+\.)*\w+@\w+(\.\w+)+$/</span>;</span><br><span class="line">    <span class="keyword">return</span> pattern.test(emailStr);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 判断是否为手机号</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isMobilePhone</span>(<span class="params">phone</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> pattern = <span class="regexp">/^(\+\d&#123;1,4&#125;)?\d&#123;7,11&#125;$/</span>;</span><br><span class="line">    <span class="keyword">return</span> pattern.test(phone);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>相关方法和知识点：</strong></p><ul><li>参考：<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/RegExp#Special_characters_in_regular_expressions" target="_blank" rel="noopener">RegExp MDN</a></li><li>正则表达式修饰符：</li></ul><p>字符 | 含义<br>g | 全局匹配<br>i | 忽略大小写<br>m | 让开始和结束字符（^ 和 $）工作在多行模式（也就是，^ 和 $ 可以匹配字符串中每一行的开始和结束（行是由 \n 或 \r 分割的），而不只是整个输入字符串的最开始和最末尾处。</p><ul><li>字符类别</li></ul><p>字符 |  含义<br>[…]|方括号内的任意字符<br>[^…]|不在方括号内的任意字符<br>. | （点号，小数点）匹配任意单个字符，但是换行符除外，包括：\n \r \u2028 或 \u2029。<br><br>需要注意的是，m 多行（multiline）标志不会改变点号的表现。因此为了匹配多行中的字符集，可使用[^] （当然你不是打算用在旧版本 IE 中），它将会匹配任意字符，包括换行符<br><br>例如，/.y/ 匹配 “yes make my day” 中的 “my” 和 “ay”，但是不匹配 “yes”。<br>\d | 匹配基本拉丁字母表（basic Latin alphabet）中的一个数字字符。等价于[0-9]。<br><br>例如，/\d/ 或 /[0-9]/ 匹配 “B2 is the suite number.” 中的 ‘2’。<br>\D | 匹配任意一个不是基本拉丁字母表中数字的字符。等价于[^0-9]。<br><br>例如，/\D/ 或 /[^0-9]/ 匹配 “B2 is the suite number.” 中的 ‘B’。<br>\w | 匹配任意来自基本拉丁字母表中的字母数字字符，还包括下划线。等价于 [A-Za-z0-9_]。<br><br>例如，/\w/ 匹配 “apple” 中的 ‘a’，”$5.28” 中的 ‘5’ 和 “3D” 中的 ‘3’。<br>\W | 匹配任意不是基本拉丁字母表中单词（字母数字下划线）字符的字符。等价于 [^A-Za-z0-9_]。<br><br>例如，/\W/ 或 /[^A-Za-z0-9_]/ 匹配 “50%” 中的 ‘%’。<br>\s | 匹配一个空白符，包括空格、制表符、换页符、换行符和其他 Unicode 空格。<br><br>等价于 [ \f\n\r\t\v​\u00a0\u1680​\u180e\u2000​\u2001\u2002​\u2003\u2004​ \u2005\u2006​\u2007\u2008​\u2009\u200a​\u2028\u2029​​\u202f\u205f​ \u3000]。<br><br>例如 /\s\w<em>/ 匹配 “foo bar” 中的 ‘ bar’。<br>\S | 匹配一个非空白符。等价于 [^ \f\n\r\t\v​\u00a0\u1680​\u180e\u2000​\u2001\u2002​\u2003\u2004​ \u2005\u2006​\u2007\u2008​\u2009\u200a​\u2028\u2029​\u202f\u205f​\u3000]。<br><br>例如，/\S\w</em>/ 匹配 “foo bar” 中的 ‘foo’。<br>[\b] | 匹配一个退格符（backspace）（不要与 \b 混淆）</p><ul><li>直接量字符</li></ul><p>字符| 匹配<br>数字和字母字符|自身<br>\t | 匹配一个水平制表符（tab）<br>\r | 匹配一个回车符（carriage return）<br>\n | 匹配一个换行符（linefeed）<br>\v | 匹配一个垂直制表符（vertical tab）<br>\f | 匹配一个换页符（form-feed）<br>\0 | 匹配一个 NUL 字符。不要在此后面跟小数点。<br>\cX |X 是 A - Z 的一个字母。匹配字符串中的一个控制字符。<br><br>例如，/\cM/ 匹配字符串中的 control-M。<br>\xhh  |  匹配编码为 hh （两个十六进制数字）的字符。<br>\uhhhh | 匹配 Unicode 值为 hhhh （四个十六进制数字）的字符。</p><ul><li>边界</li></ul><p>字符|  含义<br>^  |匹配输入/字符串的开始。如果多行（multiline）标志被设为 true，该字符也会匹配一个断行（line break）符后的开始处。<br><br>例如，/^A/ 不匹配 “an A” 中的 “A”，但匹配 “An A” 中的 “A”。<br>$   |匹配输入/字符串的结尾。如果多行（multiline）标志被设为 true，该字符也会匹配一个断行（line break）符的前的结尾处。<br><br>例如，/t$/ 不匹配 “eater” 中的 “t”，但匹配 “eat” 中的 “t”。<br>\b  |匹配一个零宽单词边界（zero-width word boundary），如一个字母与一个空格之间。 （不要和 [\b] 混淆）<br><br>例如，/\bno/ 匹配 “at noon” 中的 “no”，/ly\b/ 匹配 “possibly yesterday.” 中的 “ly”。<br>\B  |匹配一个零宽非单词边界（zero-width non-word boundary），如两个字母之间或两个空格之间。<br><br>例如，/\Bon/ 匹配 “at noon” 中的 “on”，/ye\B/ 匹配 “possibly yesterday.” 中的 “ye”。</p><h2 id="DOM"><a href="#DOM" class="headerlink" title="DOM"></a>DOM</h2><p>参考：</p><ul><li><a href="http://www.w3school.com.cn/htmldom/index.asp" target="_blank" rel="noopener">HTML DOM 教程 W3C</a></li><li><a href="http://www.w3school.com.cn/js/js_htmldom.asp" target="_blank" rel="noopener">JavaScript HTML DOM W3C</a></li><li><a href="http://www.w3school.com.cn/jsref/dom_obj_document.asp" target="_blank" rel="noopener">参考手册-HTML DOM Document 对象</a></li><li><a href="http://www.w3school.com.cn/jsref/dom_obj_all.asp" target="_blank" rel="noopener">参考手册-HTML DOM Element 对象</a></li></ul><h3 id="基本任务"><a href="#基本任务" class="headerlink" title="基本任务"></a>基本任务</h3><p><strong>任务：</strong></p><p>先来一些简单的，在你的util.js中完成以下任务：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 为element增加一个样式名为newClassName的新样式</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">addClass</span>(<span class="params">element, newClassName</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// your implement</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 移除element中的样式oldClassName</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">removeClass</span>(<span class="params">element, oldClassName</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// your implement</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 判断siblingNode和element是否为同一个父元素下的同一级的元素，返回bool值</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isSiblingNode</span>(<span class="params">element, siblingNode</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// your implement</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取element相对于浏览器窗口的位置，返回一个对象&#123;x, y&#125;</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getPosition</span>(<span class="params">element</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// your implement</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>思路：</strong></p><ul><li><p><code>addClass()</code></p><p>  对于element本身如果没有样式类，那么使用Element的className属性获取的是空字符串，则直接添加新的样式类字符串即可。对于已经有了样式类的元素，获取到原有的样式类后，在后面添加一个空格，再添加新的样式类即可。</p></li><li><p><code>removeClass()</code></p><p>  获取原始的样式，然后用正则表达式去匹配这个要删掉的样式，由于是动态的正则表达式，所以要用正则的构造函数 <code>RegExp()</code> 来创建，并且使用 <code>\b</code> 来确定单词边界。匹配好后用空字符串替换被匹配的样式类即可。</p></li><li><p><code>isSiblingNode()</code></p><p>  直接判断两个父节点是不是相同</p></li><li><p><code>getPosition()</code></p><p>  下面这些内容是我之前的思路，现在觉得太复杂，可以用另一种解决方法。</p><blockquote><p><code>offsetTop</code>, <code>offsetLeft</code> 都是相对于最近一个有定位的父元素，如果都没有那么就是相对于 body 的偏移位置。</p><p><code>offsetParent</code> 是寻找最近一个有定位的父级元素，如果没有，那么找到 body 元素。</p><p>所以这道题需要先寻找有定位的父级元素，如果都没有，那么就是相对于 body 的偏移了，可以直接使用 <code>offsetTop</code>, <code>offsetLeft</code>。</p><p>如果有定位的父级元素不是 body，是 A 元素，那么再寻找 A 元素的最近的有定位的父级元素，如果没有，就是相对于 body 的定位，这时，所求偏移量就是 A 的偏移量加所求元素相对于 A 的偏移量。如果 A 还有已经定位的父级元素，就继续去推，直到找到 body 为止。</p><p>这里可能要用到一个递归算法。</p></blockquote><p>  <strong>另一种方法：</strong></p><p>  使用 <code>getBoundingClientRect()</code> 方法获取当前元素相对于可视区域的位置，再加上滚动条的位置。</p><p>  关于滚动条的位置 <code>scrollTop</code>, <code>scrollLeft</code> 这两个属性的使用，各个浏览器还都不一样。</p><ul><li><p>详情见 <a href="http://www.cnblogs.com/zhenyu-whu/archive/2012/11/13/2768004.html" target="_blank" rel="noopener">document.body.scrollTop or document.documentElement.scrollTop</a>。</p><p>简单的说就是：FF、Opera 和 IE 浏览器认为在客户端浏览器展示的页面的内容对应于整个 HTML，所以使用 <code>document.documentElement</code>来代表，相应的滚动距离则通过 <code>document.documentElement.scrollLeft</code> 和 <code>document.documentElement.scrollTop</code> 来获取，而 Safari 和 Chrome 浏览器则认为页面开始于 body 部分，从而相应的滚动距离用 <code>document.body.scrollLeft</code> 和 <code>document.body.scrollTop</code> 来获取。另外需要注意的是，FF 和 IE 的 quirks mode（兼容模式）下是用 <code>document.body</code> 来获取的。</p><p>documentElement 对应的是 html 标签，而 body 对应的是 body 标签</p><p>针对跨浏览器的解决方案则可简单的用如下代码获取：</p></li></ul></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> scrollLeft = <span class="built_in">Math</span>.max(<span class="built_in">document</span>.documentElement.scrollLeft, <span class="built_in">document</span>.body.scrollLeft);</span><br><span class="line"><span class="keyword">var</span> scrollTop = <span class="built_in">Math</span>.max(<span class="built_in">document</span>.documentElement.scrollTop, <span class="built_in">document</span>.body.scrollTop);</span><br></pre></td></tr></table></figure><p><strong>实现：</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 为element增加一个样式名为newClassName的新样式</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">addClass</span>(<span class="params">element, newClassName</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> oldClassName = element.className; <span class="comment">//获取旧的样式类</span></span><br><span class="line">    element.className = oldClassName === <span class="string">""</span> ? newClassName : oldClassName + <span class="string">" "</span> + newClassName;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 移除element中的样式oldClassName</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">removeClass</span>(<span class="params">element, oldClassName</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> originClassName = element.className; <span class="comment">//获取原先的样式类</span></span><br><span class="line">    <span class="keyword">var</span> pattern = <span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="string">"\\b"</span> + oldClassName + <span class="string">"\\b"</span>); <span class="comment">//使用构造函数构造动态的正则表达式</span></span><br><span class="line">    element.className = originClassName.replace(pattern, <span class="string">''</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isSiblingNode</span>(<span class="params">element, siblingNode</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> element.parentNode === siblingNode.parentNode;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getPosition</span>(<span class="params">element</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> pos=&#123;&#125;;</span><br><span class="line">    pos.x = element.getBoundingClientRect().left + <span class="built_in">Math</span>.max(<span class="built_in">document</span>.documentElement.scrollLeft, <span class="built_in">document</span>.body.scrollLeft);</span><br><span class="line">    pos.y = element.getBoundingClientRect().top + <span class="built_in">Math</span>.max(<span class="built_in">document</span>.documentElement.scrollTop, <span class="built_in">document</span>.body.scrollTop);</span><br><span class="line">    <span class="keyword">return</span> pos;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="mini"><a href="#mini" class="headerlink" title="mini $"></a>mini $</h3><p><strong>任务：</strong></p><p>接下来挑战一个mini $，它和之前的$是不兼容的，它应该是document.querySelector的功能子集，在不直接使用document.querySelector的情况下，在你的util.js中完成以下任务：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 实现一个简单的Query</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">$</span>(<span class="params">selector</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 可以通过id获取DOM对象，通过#标示，例如</span></span><br><span class="line">$(<span class="string">"#adom"</span>); <span class="comment">// 返回id为adom的DOM对象</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 可以通过tagName获取DOM对象，例如</span></span><br><span class="line">$(<span class="string">"a"</span>); <span class="comment">// 返回第一个&lt;a&gt;对象</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 可以通过样式名称获取DOM对象，例如</span></span><br><span class="line">$(<span class="string">".classa"</span>); <span class="comment">// 返回第一个样式定义包含classa的对象</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 可以通过attribute匹配获取DOM对象，例如</span></span><br><span class="line">$(<span class="string">"[data-log]"</span>); <span class="comment">// 返回第一个包含属性data-log的对象</span></span><br><span class="line"></span><br><span class="line">$(<span class="string">"[data-time=2015]"</span>); <span class="comment">// 返回第一个包含属性data-time且值为2015的对象</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 可以通过简单的组合提高查询便利性，例如</span></span><br><span class="line">$(<span class="string">"#adom .classa"</span>); <span class="comment">// 返回id为adom的DOM所包含的所有子节点中，第一个样式定义包含classa的对象</span></span><br></pre></td></tr></table></figure><p><strong>参考：</strong></p><ul><li><a href="http://www.imooc.com/code/4477" target="_blank" rel="noopener">Sizzle选择器</a></li><li><a href="http://www.cnblogs.com/xesam/archive/2012/02/15/2352466.html" target="_blank" rel="noopener">Sizzle引擎–原理与实践（一）</a></li><li><a href="http://www.cnblogs.com/rubylouvre/archive/2011/01/24/1942818.html" target="_blank" rel="noopener">Sizzle是怎样工作的</a></li></ul><p><strong>思路：</strong></p><ol><li>通过空格拆分参数 selector，因为可能是组合查询。拆分为数组 selectorArr</li><li>遍历 selectorArr，条件判断各种情况。</li><li>得到节点的 Element 对象后，以这个对象为父节点，继续下一层的判断。</li></ol><p><strong>实现：</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//多个选择器有点难到我了，看了一些资料觉得思路应该如下：</span></span><br><span class="line"><span class="comment">//1.如果存在#，直接从#开始向后查</span></span><br><span class="line"><span class="comment">//2.如果存在tag直接找到所有的tag然后向后查</span></span><br><span class="line"><span class="comment">//3.样式类，属性，从后向前查，得到它所有的父节点名称，去筛选匹配</span></span><br><span class="line"><span class="comment">//以上的做法有点太复杂，我还是做一个简单的正向匹配吧。</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">$</span>(<span class="params">selector</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!selector) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (selector == <span class="built_in">document</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">document</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    selector = selector.trim();</span><br><span class="line">    <span class="keyword">if</span> (selector.indexOf(<span class="string">" "</span>) !== <span class="number">-1</span>) &#123; <span class="comment">//若存在空格</span></span><br><span class="line">        <span class="keyword">var</span> selectorArr = selector.split(<span class="regexp">/\s+/</span>); <span class="comment">//拆成数组</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> rootScope = myQuery(selectorArr[<span class="number">0</span>]); <span class="comment">//第一次的查找范围</span></span><br><span class="line">        <span class="keyword">var</span> i = <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">var</span> j = <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">var</span> result = [];</span><br><span class="line">        <span class="comment">//循环选择器中的每一个元素</span></span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt; selectorArr.length; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; rootScope.length; j++) &#123;</span><br><span class="line">                result.push(myQuery(selectorArr[i], rootScope[j]));</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// rootScope = result;</span></span><br><span class="line">            <span class="comment">// 目前这个方法还有bug</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result[<span class="number">0</span>][<span class="number">0</span>];</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123; <span class="comment">//只有一个，直接查询</span></span><br><span class="line">        <span class="keyword">return</span> myQuery(selector, <span class="built_in">document</span>)[<span class="number">0</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 针对一个内容查找结果 success</span></span><br><span class="line"><span class="comment"> * @param  &#123;String&#125; selector 选择器内容</span></span><br><span class="line"><span class="comment"> * @param  &#123;Element&#125; root    根节点元素</span></span><br><span class="line"><span class="comment"> * @return &#123;NodeList数组&#125;    节点列表，可能是多个节点也可能是一个</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">myQuery</span>(<span class="params">selector, root</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> signal = selector[<span class="number">0</span>]; <span class="comment">//</span></span><br><span class="line">    <span class="keyword">var</span> allChildren = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">var</span> content = selector.substr(<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">var</span> currAttr = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">var</span> result = [];</span><br><span class="line">    root = root || <span class="built_in">document</span>; <span class="comment">//若没有给root，赋值document</span></span><br><span class="line">    <span class="keyword">switch</span> (signal) &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">"#"</span>:</span><br><span class="line">            result.push(<span class="built_in">document</span>.getElementById(content));</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">"."</span>:</span><br><span class="line">            allChildren = root.getElementsByTagName(<span class="string">"*"</span>);</span><br><span class="line">            <span class="comment">// var pattern0 = new RegExp("\\b" + content + "\\b");</span></span><br><span class="line">            <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; allChildren.length; i++) &#123;</span><br><span class="line">                currAttr = allChildren[i].getAttribute(<span class="string">"class"</span>);</span><br><span class="line">                <span class="keyword">if</span> (currAttr !== <span class="literal">null</span>) &#123;</span><br><span class="line">                    <span class="keyword">var</span> currAttrsArr = currAttr.split(<span class="regexp">/\s+/</span>);</span><br><span class="line">                    <span class="built_in">console</span>.log(currAttr);</span><br><span class="line">                    <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; currAttrsArr.length; j++) &#123;</span><br><span class="line">                        <span class="keyword">if</span> (content === currAttrsArr[j]) &#123;</span><br><span class="line">                            result.push(allChildren[i]);</span><br><span class="line">                            <span class="built_in">console</span>.log(result);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">"["</span>: <span class="comment">//属性选择</span></span><br><span class="line">            <span class="keyword">if</span> (content.search(<span class="string">"="</span>) == <span class="number">-1</span>) &#123; <span class="comment">//只有属性，没有值</span></span><br><span class="line">                allChildren = root.getElementsByTagName(<span class="string">"*"</span>);</span><br><span class="line">                <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; allChildren.length; i++) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (allChildren[i].getAttribute(selector.slice(<span class="number">1</span>, <span class="number">-1</span>)) !== <span class="literal">null</span>) &#123;</span><br><span class="line">                        result.push(allChildren[i]);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123; <span class="comment">//既有属性，又有值</span></span><br><span class="line">                allChildren = root.getElementsByTagName(<span class="string">"*"</span>);</span><br><span class="line">                <span class="keyword">var</span> pattern = <span class="regexp">/\[(\w+)\s*\=\s*(\w+)\]/</span>; <span class="comment">//为了分离等号前后的内容</span></span><br><span class="line">                <span class="keyword">var</span> cut = selector.match(pattern); <span class="comment">//分离后的结果，为数组</span></span><br><span class="line">                <span class="keyword">var</span> key = cut[<span class="number">1</span>]; <span class="comment">//键</span></span><br><span class="line">                <span class="keyword">var</span> value = cut[<span class="number">2</span>]; <span class="comment">//值</span></span><br><span class="line">                <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; allChildren.length; i++) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (allChildren[i].getAttribute(key) == value) &#123;</span><br><span class="line">                        result.push(allChildren[i]);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">default</span>: <span class="comment">//tag</span></span><br><span class="line">            result = root.getElementsByTagName(selector);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="事件"><a href="#事件" class="headerlink" title="事件"></a>事件</h2><h3 id="绑定注册事件与移除事件"><a href="#绑定注册事件与移除事件" class="headerlink" title="绑定注册事件与移除事件"></a>绑定注册事件与移除事件</h3><p><strong>任务与实现：</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 给一个element绑定一个针对event事件的响应，响应函数为listener</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">addEvent</span>(<span class="params">element, event, listener</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (element.addEventListener) &#123;</span><br><span class="line">        element.addEventListener(event,listener);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span>(element.attachEvent)&#123;</span><br><span class="line">        element.attachEvent(<span class="string">"on"</span>+event,listener);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 移除element对象对于event事件发生时执行listener的响应</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">removeEvent</span>(<span class="params">element, event, listener</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (element.removeEventListenr) &#123;</span><br><span class="line">        element.removeEventListenr(event,listener);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span>(element.detachEvent)&#123;</span><br><span class="line">        element.detachEvent(<span class="string">"on"</span>+event,listener);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>相关说明：</strong></p><p>IE8+ 支持 <code>addEventListener()</code>。IE8 以下的版本使用 <code>attachEvent()</code>。</p><ul><li><code>attachEvent()</code> 不支持事件捕获。</li><li><code>attachEvent()</code> 第一个参数事件处理程序属性名使用前缀 on。</li><li><code>attachEvent()</code> 允许相同的事件处理程序函数注册多次。</li></ul><h3 id="click-与-enter-键事件绑定"><a href="#click-与-enter-键事件绑定" class="headerlink" title="click 与 enter 键事件绑定"></a>click 与 enter 键事件绑定</h3><p><strong>任务与实现：</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 实现对click事件的绑定</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">addClickEvent</span>(<span class="params">element, listener</span>) </span>&#123;</span><br><span class="line">    addEvent(element, <span class="string">"click"</span>, listener);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 实现对于按Enter键时的事件绑定</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">addEnterEvent</span>(<span class="params">element, listener</span>) </span>&#123;</span><br><span class="line">    addEvent(element, <span class="string">"keydown"</span>, <span class="function"><span class="keyword">function</span>(<span class="params">event</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (event.keyCode == <span class="number">13</span>) &#123;</span><br><span class="line">            listener();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>相关说明：</strong></p><p>这里我直接使用了上一个任务写好的 <code>addEvent()</code> 函数。这样可以简化代码，并有良好的兼容性。</p><p>enter 键的 keyCode 为 13。</p><h3 id="事件代理"><a href="#事件代理" class="headerlink" title="事件代理"></a>事件代理</h3><p><strong>参考：</strong></p><ul><li><a href="http://www.cnblogs.com/Aralic/p/4446030.html" target="_blank" rel="noopener">javascript事件代理（委托）</a></li><li><a href="http://www.cnblogs.com/leo388/p/4461579.html" target="_blank" rel="noopener">JS - 事件代理</a></li></ul><p><strong>任务与实现：</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">delegateEvent</span>(<span class="params">element,tag,eventName,listener</span>)</span>&#123;</span><br><span class="line">    addEvent(element, eventName, <span class="function"><span class="keyword">function</span>(<span class="params">event</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">var</span> target = event.target || event.srcElement;</span><br><span class="line">        <span class="keyword">if</span>(target.tagName.toLowerCase() == tag.toLowerCase()) &#123;</span><br><span class="line">            listener.call(target, event);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="BOM"><a href="#BOM" class="headerlink" title="BOM"></a>BOM</h2><p><strong>任务与实现：</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 判断是否为IE浏览器，返回-1或者版本号</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isIE</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> s = navigator.userAgent.toLowerCase();</span><br><span class="line">    <span class="built_in">console</span>.log(s);</span><br><span class="line">    <span class="comment">//ie10的信息：</span></span><br><span class="line">    <span class="comment">//mozilla/5.0 (compatible; msie 10.0; windows nt 6.2; trident/6.0)</span></span><br><span class="line">    <span class="comment">//ie11的信息：</span></span><br><span class="line">    <span class="comment">//mozilla/5.0 (windows nt 6.1; trident/7.0; slcc2; .net clr 2.0.50727; .net clr 3.5.30729; .net clr 3.0.30729; media center pc 6.0; .net4.0c; .net4.0e; infopath.2; rv:11.0) like gecko</span></span><br><span class="line">    <span class="keyword">var</span> ie = s.match(<span class="regexp">/rv:([\d.]+)/</span>) || s.match(<span class="regexp">/msie ([\d.]+)/</span>);</span><br><span class="line">    <span class="keyword">if</span>(ie) &#123;</span><br><span class="line">        <span class="keyword">return</span> ie[<span class="number">1</span>];</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置cookie</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">setCookie</span>(<span class="params">cookieName, cookieValue, expiredays</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> cookie = cookieName + <span class="string">"="</span> + <span class="built_in">encodeURIComponent</span>(cookieValue);</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> expiredays === <span class="string">"number"</span>) &#123;</span><br><span class="line">        cookie += <span class="string">";max-age="</span> + (expiredays * <span class="number">60</span> * <span class="number">60</span> * <span class="number">24</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">document</span>.cookie = cookie;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取cookie值</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getCookie</span>(<span class="params">cookieName</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> cookie = &#123;&#125;;</span><br><span class="line">    <span class="keyword">var</span> all = <span class="built_in">document</span>.cookie;</span><br><span class="line">    <span class="keyword">if</span> (all===<span class="string">""</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> cookie;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> list = all.split(<span class="string">"; "</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; list.length; i++) &#123;</span><br><span class="line">        <span class="keyword">var</span> p = list[i].indexOf(<span class="string">"="</span>);</span><br><span class="line">        <span class="keyword">var</span> name = list[i].substr(<span class="number">0</span>, p);</span><br><span class="line">        <span class="keyword">var</span> value = list[i].substr(p + <span class="number">1</span>);</span><br><span class="line">        value = <span class="built_in">decodeURIComponent</span>(value);</span><br><span class="line">        cookie[name] = value;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> cookie;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>参考自：JavaScript权威指南</li></ul><h3 id="sessionStorage、localStorage-和-cookie-之间的区别"><a href="#sessionStorage、localStorage-和-cookie-之间的区别" class="headerlink" title="sessionStorage、localStorage 和 cookie 之间的区别"></a>sessionStorage、localStorage 和 cookie 之间的区别</h3><ul><li><p><strong>共同点</strong></p><p>  都是保存在浏览器端，且同源的。都是键值对存储。</p></li><li><p><strong>区别</strong></p><p>  特性 | Cookie | localStorage | sessionStorage<br>  数据的声明周期 | 一般由服务器生成，可设置失效时间。如果在浏览器端生成Cookie，默认是关闭浏览器后失效 | 除非被清除，否则永久保存 | 仅在当前会话下有效，关闭页面或浏览器后被清除<br>  存放数据大小 | 4K左右 | 一般为5MB | 同左<br>  与服务器端通信 | 每次都会携带在HTTP头中，如果使用cookie保存过多数据会带来性能问题 | 仅在客户端（即浏览器）中保存，不参与和服务器的通信 | 同左<br>  易用性 | 需要程序员自己封装，源生的Cookie接口不友好 | 源生接口可以接受，亦可再次封装来对Object和Array有更好的支持 | 同左</p></li><li><p><strong>应用场景</strong></p><p>  每个 HTTP 请求都会带着 Cookie 信息，所以 Cookie 应当简单，比如判断用户是否登陆。</p><p>  localStorage 接替 Cookie 管理购物车，同时也可以存储 HTML5 游戏的一些本地数据。</p><p>  sessionStorage 在表单内容较多的时候，为了优化用户体验，按步骤分页引导填写，这时使用sessionStorage 就发挥了作用。</p></li><li><p><strong>安全性</strong></p><p>  cookie 中最好不要放置任何明文的东西。两个 storage的数据提交后在服务端一定要校验</p></li></ul><p><strong>参考：</strong></p><ul><li><a href="http://jerryzou.com/posts/cookie-and-web-storage/" target="_blank" rel="noopener">详说 Cookie, LocalStorage 与 SessionStorage</a></li></ul><h2 id="Ajax"><a href="#Ajax" class="headerlink" title="Ajax"></a>Ajax</h2><p><strong>任务：</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 学习Ajax，并尝试自己封装一个Ajax方法。实现如下方法：</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">ajax</span>(<span class="params">url, options</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// your implement</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用示例：</span></span><br><span class="line">ajax(</span><br><span class="line">    <span class="string">'http://localhost:8080/server/ajaxtest'</span>,</span><br><span class="line">    &#123;</span><br><span class="line">        data: &#123;</span><br><span class="line">            name: <span class="string">'simon'</span>,</span><br><span class="line">            password: <span class="string">'123456'</span></span><br><span class="line">        &#125;,</span><br><span class="line">        onsuccess: <span class="function"><span class="keyword">function</span> (<span class="params">responseText, xhr</span>) </span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(responseText);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p><strong>实现：</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">ajax</span>(<span class="params">url, options</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> dataResult; <span class="comment">//结果data</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 处理data</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span>(options.data) === <span class="string">'object'</span>) &#123;</span><br><span class="line">        <span class="keyword">var</span> str = <span class="string">''</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> c <span class="keyword">in</span> options.data) &#123;</span><br><span class="line">            str = str + c + <span class="string">'='</span> + options.data[c] + <span class="string">'&amp;'</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        dataResult = str.substring(<span class="number">0</span>, str.length - <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 处理type</span></span><br><span class="line">    options.type = options.type || <span class="string">'GET'</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//获取XMLHttpRequest对象</span></span><br><span class="line">    <span class="keyword">var</span> xhr = <span class="built_in">window</span>.XMLHttpRequest ? <span class="keyword">new</span> XMLHttpRequest() : <span class="keyword">new</span> ActiveXObject(<span class="string">'Microsoft.XMLHTTP'</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 发送请求</span></span><br><span class="line">    xhr.open(options.type, url, <span class="literal">true</span>);</span><br><span class="line">    <span class="keyword">if</span> (options.type == <span class="string">'GET'</span>) &#123;</span><br><span class="line">        xhr.send(<span class="literal">null</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        xhr.setRequestHeader(<span class="string">'Content-type'</span>, <span class="string">'application/x-www-form-urlencoded'</span>);</span><br><span class="line">        xhr.send(dataResult);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// readyState</span></span><br><span class="line">    xhr.onreadystatechange = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (xhr.readyState === <span class="number">4</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (xhr.status === <span class="number">200</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (options.onsuccess) &#123;</span><br><span class="line">                    options.onsuccess(xhr.responseText, xhr.responseXML);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (options.onfail) &#123;</span><br><span class="line">                    options.onfail();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>说明：</strong></p><ol><li>首先是处理 data，因为测试用例中的 data 是对象，所以把它遍历出来，把键和值中间用 = 连接，和下一组数据用 &amp; 连接。</li><li>处理 type，默认是 GET 请求。</li><li>使用 <code>open()</code> 指明请求方法和 url。方法一般为 GET 或 POST。</li><li>调用 <code>send()</code> 方法，GET 请求没有主体，所以应该传递 null 或省略这个参数。POST 请求有主体，同时使用 <code>setRequestHeaders()</code> 来指定 “Content-type” 头。这样便成功发送了请求。</li><li><p>取的响应。一个完整的 HTTP 响应是由状态码、响应头集合、响应主体组成。</p><ul><li><p><code>readyState</code> 是一个整数，它指定了 HTTP 请求的状态。其值和含义如下表：</p><p>值 | 含义<br>0 | open() 尚未调用<br>1 | open() 已调用<br>2 | 接收到响应头信息<br>3 | 接收到响应主体<br>4 | 响应完成</p></li><li><p><code>status</code> 和 <code>statusText</code> 属性以数字和文本的形式返回 HTTP 状态码。这些属性保存标准的 HTTP 值。如，200和 “OK” 表示成功请求，404和 “Not Found” 表示 URL 不能匹配服务器上的任何资源。</p></li><li><code>getResponseHeader()</code> 和 <code>getAllResponseHeaders()</code> 能查询响应头。</li><li>响应主体可以从 <code>responseText</code> 属性中得到文本形式的，从 <code>responseXML</code> 属性中得到 Document 形式的。</li></ul></li><li><p>补充一点 <code>onreadystatechange</code> 事件会在 <code>readyState</code> 改变时被触发。</p></li></ol><p><strong>参考：</strong></p><ul><li><a href="http://www.w3school.com.cn/ajax/index.asp" target="_blank" rel="noopener">Ajax W3C</a></li><li><a href="http://www.ibm.com/developerworks/cn/web/wa-lo-comet/" target="_blank" rel="noopener">Comet：基于 HTTP 长连接的“服务器推”技术</a></li></ul><h2 id="练习1：处理兴趣列表"><a href="#练习1：处理兴趣列表" class="headerlink" title="练习1：处理兴趣列表"></a>练习1：处理兴趣列表</h2><h3 id="任务要求"><a href="#任务要求" class="headerlink" title="任务要求"></a>任务要求</h3><p>在<code>task0002</code>目录下创建一个<code>task0002_1.html</code>文件，以及一个<code>js</code>目录和<code>css</code>目录，在<code>js</code>目录中创建<code>task0002_1.js</code>，并将之前写的<code>util.js</code>也拷贝到<code>js</code>目录下。然后完成以下需求。</p><p><strong>第一阶段</strong></p><p>在页面中，有一个单行输入框，一个按钮，输入框中用来输入用户的兴趣爱好，允许用户用半角逗号来作为不同爱好的分隔。</p><p>当点击按钮时，把用户输入的兴趣爱好，按照上面所说的分隔符分开后保存到一个数组，过滤掉空的、重复的爱好，在按钮下方创建一个段落显示处理后的爱好。</p><p><strong>第二阶段</strong></p><p>单行变成多行输入框，一个按钮，输入框中用来输入用户的兴趣爱好，允许用户用换行、空格（全角/半角）、逗号（全角/半角）、顿号、分号来作为不同爱好的分隔。</p><p>当点击按钮时的行为同上</p><p><strong>第三阶段</strong></p><p>用户输入的爱好数量不能超过10个，也不能什么都不输入。当发生异常时，在按钮上方显示一段红色的错误提示文字，并且不继续执行后面的行为；当输入正确时，提示文字消失。</p><p>同时，当点击按钮时，不再是输出到一个段落，而是每一个爱好输出成为一个checkbox，爱好内容作为checkbox的label。</p><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>主要就是对字符串的操作，<code>split()</code> 的使用，以及正则表达式的使用。</p><h3 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h3><ul><li><a href="https://github.com/Gaohaoyang/ife/tree/master/task/task0002/work/Gaohaoyang" target="_blank" rel="noopener">代码</a></li><li><a href="http://gaohaoyang.github.io/ife/task/task0002/work/Gaohaoyang/task0002_1.html" target="_blank" rel="noopener">在线demo</a></li></ul><h2 id="练习2：倒计时"><a href="#练习2：倒计时" class="headerlink" title="练习2：倒计时"></a>练习2：倒计时</h2><h3 id="任务要求-1"><a href="#任务要求-1" class="headerlink" title="任务要求"></a>任务要求</h3><p>在和上一任务同一目录下面创建一个<code>task0002_2.html</code>文件，在<code>js</code>目录中创建<code>task0002_2.js</code>，并在其中编码，实现一个倒计时功能。</p><ul><li>界面首先有一个文本输入框，允许按照特定的格式<code>YYYY-MM-DD</code>输入年月日；</li><li>输入框旁有一个按钮，点击按钮后，计算当前距离输入的日期的00:00:00有多少时间差</li><li>在页面中显示，距离YYYY年MM月DD日还有XX天XX小时XX分XX秒</li><li>每一秒钟更新倒计时上显示的数</li><li>如果时差为0，则倒计时停止</li></ul><h3 id="思路-1"><a href="#思路-1" class="headerlink" title="思路"></a>思路</h3><ul><li><p><code>setInterval()</code> 方法可按照指定的周期（以毫秒计）来调用函数或计算表达式。</p><p>   <code>setInterval()</code> 方法会不停地调用函数，直到 <code>clearInterval()</code> 被调用或窗口被关闭。由 <code>setInterval()</code> 返回的 ID 值可用作 <code>clearInterval()</code> 方法的参数。</p></li><li><p><code>clearInterval()</code> 方法可取消由 <code>setInterval()</code> 设置的 timeout。</p><p>  <code>clearInterval()</code> 方法的参数必须是由 <code>setInterval()</code> 返回的 ID 值。</p></li><li><p><code>setTimeout()</code> 方法用于在指定的毫秒数后调用函数或计算表达式。</p><p>  setTimeout() 只执行 code 一次。如果要多次调用，请使用 setInterval() 或者让 code 自身再次调用 setTimeout()。   </p></li><li><code>clearTimeout()</code> 方法可取消由 setTimeout() 方法设置的 timeout。</li></ul><h3 id="实现-1"><a href="#实现-1" class="headerlink" title="实现"></a>实现</h3><ul><li><a href="https://github.com/Gaohaoyang/ife/tree/master/task/task0002/work/Gaohaoyang" target="_blank" rel="noopener">代码</a></li><li><a href="http://gaohaoyang.github.io/ife/task/task0002/work/Gaohaoyang/task0002_2.html" target="_blank" rel="noopener">在线demo</a></li></ul><h2 id="练习3：图片轮播"><a href="#练习3：图片轮播" class="headerlink" title="练习3：图片轮播"></a>练习3：图片轮播</h2><h3 id="任务要求-2"><a href="#任务要求-2" class="headerlink" title="任务要求"></a>任务要求</h3><p>在和上一任务同一目录下面创建一个<code>task0002_3.html</code>文件，在<code>js</code>目录中创建<code>task0002_3.js</code>，并在其中编码，实现一个轮播图的功能。</p><ul><li>图片数量及URL均在HTML中写好</li><li>可以配置轮播的顺序（正序、逆序）、是否循环、间隔时长</li><li>图片切换的动画要流畅</li><li>在轮播图下方自动生成对应图片的小点，点击小点，轮播图自动动画切换到对应的图片</li></ul><p>效果示例：<a href="http://echarts.baidu.com/" target="_blank" rel="noopener">http://echarts.baidu.com/</a> 上面的轮播图（不需要做左右两个箭头）</p><h3 id="思路-2"><a href="#思路-2" class="headerlink" title="思路"></a>思路</h3><p>将图片排列成一排，一起向左运动，每次运动的距离刚好是一张图片的宽度。</p><p>对于下面的小圆点，使用事件代理，将事件传递给每个 a 标签。</p><p><strong>参考：</strong></p><ul><li><a href="http://www.itxueyuan.org/view/6323.html" target="_blank" rel="noopener">JS图片切换</a></li></ul><h3 id="实现-2"><a href="#实现-2" class="headerlink" title="实现"></a>实现</h3><ul><li><a href="https://github.com/Gaohaoyang/ife/tree/master/task/task0002/work/Gaohaoyang" target="_blank" rel="noopener">代码</a></li><li><a href="http://gaohaoyang.github.io/ife/task/task0002/work/Gaohaoyang/task0002_3.html" target="_blank" rel="noopener">在线demo</a></li></ul><h3 id="关于变速运动"><a href="#关于变速运动" class="headerlink" title="关于变速运动"></a>关于变速运动</h3><p>评论中有人问到运动部分为什么这样写，下面我讲一下吧。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">startMove</span>(<span class="params">target</span>) </span>&#123;</span><br><span class="line">    clearInterval(timerInner);</span><br><span class="line">    timerInner = setInterval(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> speed = (target - imgListDiv.offsetLeft) / <span class="number">6</span>;</span><br><span class="line">        speed = speed &gt; <span class="number">0</span> ? <span class="built_in">Math</span>.ceil(speed) : <span class="built_in">Math</span>.floor(speed);</span><br><span class="line"></span><br><span class="line">        imgListDiv.style.left = imgListDiv.offsetLeft + speed + <span class="string">"px"</span>;</span><br><span class="line">    &#125;, <span class="number">30</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面是运动部分代码。</p><ul><li>参数 <code>target</code> 是运动终点的位置。</li><li>首先停止计时器，为了避免上一次调用方法时，计时器没有关闭带来的干扰。</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">clearInterval(timerInner);</span><br></pre></td></tr></table></figure><ul><li><p>下面开始开启计时器，每隔 30ms 执行一次内部的函数。</p></li><li><p>变速运动</p></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> speed = (target - imgListDiv.offsetLeft) / <span class="number">6</span>;</span><br></pre></td></tr></table></figure><pre><code>逐渐变慢，最后停止，距离越远速度越大，速度由距离决定速度=(目标值-当前值)/缩放系数这样写的原因就是为了让它做缓冲运动，而不是匀速运动，这样给用户带来的交互感觉会更好。</code></pre><ul><li>速度取整</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">speed = speed &gt; <span class="number">0</span> ? <span class="built_in">Math</span>.ceil(speed) : <span class="built_in">Math</span>.floor(speed);</span><br></pre></td></tr></table></figure><pre><code>像素不能是小数，所以速度大于0的时候，向上取整。速度小于0时，向下取整</code></pre><ul><li>最后关于运动终止条件。</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">imgListDiv.style.left = imgListDiv.offsetLeft + speed + <span class="string">"px"</span>;</span><br></pre></td></tr></table></figure><pre><code>由这一行可以看出，`imgListDiv.style.left` 在不断增大，即 `imgListDiv.offsetLeft` 在不断增大。这两个是相同的属性，只不过一个是在赋值时使用，第二个是在取值时使用。再看这行代码，由于这部分是每个30ms执行一次的，所以继续执行到这里。</code></pre><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> speed = (target - imgListDiv.offsetLeft) / <span class="number">6</span>;</span><br></pre></td></tr></table></figure><pre><code>当不断增大的 `imgListDiv.offsetLeft` 等于 `target` 时，`speed` 为0。宏观表现为不再运动，这便是运动终止的状态，但是这里的方法还是不断在执行，每个30ms在执行。</code></pre><h2 id="练习4：输入框即时提示"><a href="#练习4：输入框即时提示" class="headerlink" title="练习4：输入框即时提示"></a>练习4：输入框即时提示</h2><h3 id="任务要求-3"><a href="#任务要求-3" class="headerlink" title="任务要求"></a>任务要求</h3><p>在和上一任务同一目录下面创建一个<code>task0002_4.html</code>文件，在<code>js</code>目录中创建<code>task0002_4.js</code>，并在其中编码，实现一个类似百度搜索框的输入提示的功能。</p><p>要求如下：</p><ul><li>允许使用鼠标点击选中提示栏中的某个选项</li><li>允许使用键盘上下键来选中提示栏中的某个选项，回车确认选中</li><li>选中后，提示内容变更到输入框中</li></ul><p><strong>初级班：</strong></p><ul><li>不要求和后端交互，可以自己伪造一份提示数据例如：</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> suggestData = [<span class="string">'Simon'</span>, <span class="string">'Erik'</span>, <span class="string">'Kener'</span>];</span><br></pre></td></tr></table></figure><p><strong>中级班：</strong></p><ul><li>自己搭建一个后端Server，使用Ajax来获取提示数据</li></ul><h3 id="思路-3"><a href="#思路-3" class="headerlink" title="思路"></a>思路</h3><p>这里我使用了给 input 标签加 input 监听，即输入框内容发生改变时，触发事件。并兼容到 IE7。</p><p>关于 input 监听的代码如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">addInputListener</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (inputArea.addEventListener) &#123; <span class="comment">// all browsers except IE before version 9</span></span><br><span class="line">        inputArea.addEventListener(<span class="string">"input"</span>, OnInput);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (inputArea.attachEvent) &#123; <span class="comment">// Internet Explorer and Opera</span></span><br><span class="line">        inputArea.attachEvent(<span class="string">"onpropertychange"</span>, OnPropChanged); <span class="comment">// Internet Explorer</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Firefox, Google Chrome, Opera, Safari from version 5, Internet Explorer from version 9</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">OnInput</span>(<span class="params">event</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> inputValue = event.target.value;</span><br><span class="line">    handleInput(inputValue);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// Internet Explorer</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">OnPropChanged</span>(<span class="params">event</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> inputValue = <span class="string">""</span>;</span><br><span class="line">    <span class="keyword">if</span> (event.propertyName.toLowerCase() == <span class="string">"value"</span>) &#123;</span><br><span class="line">        inputValue = event.srcElement.value;</span><br><span class="line">        handleInput(inputValue);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中 handleInput() 为下一步要执行的方法。</p><p>其实后来想了想也可以使用 keyup 事件了做这个任务。</p><p>匹配的过程同样适用正则表达式，从开头开始匹配。遍历备选单词，如果匹配成功，则放入 li 标签中，准备展示。</p><p>然后分别添加点击事件，键盘的 keydown 事件，用来选中提示出的单词。</p><p><strong>参考：</strong></p><ul><li><a href="http://help.dottoro.com/ljhxklln.php" target="_blank" rel="noopener">oninput 事件</a></li></ul><h3 id="实现-3"><a href="#实现-3" class="headerlink" title="实现"></a>实现</h3><ul><li><a href="https://github.com/Gaohaoyang/ife/tree/master/task/task0002/work/Gaohaoyang" target="_blank" rel="noopener">代码</a></li><li><a href="http://gaohaoyang.github.io/ife/task/task0002/work/Gaohaoyang/task0002_4.html" target="_blank" rel="noopener">在线demo</a></li></ul><h2 id="练习5：拖拽交互"><a href="#练习5：拖拽交互" class="headerlink" title="练习5：拖拽交互"></a>练习5：拖拽交互</h2><h3 id="任务要求-4"><a href="#任务要求-4" class="headerlink" title="任务要求"></a>任务要求</h3><ul><li>实现一个可拖拽交互的界面</li><li>如示例图，左右两侧各有一个容器，里面的选项可以通过拖拽来左右移动</li><li>被选择拖拽的容器在拖拽过程后，在原容器中消失，跟随鼠标移动</li><li>注意拖拽释放后，要添加到准确的位置</li><li>拖拽到什么位置认为是可以添加到新容器的规则自己定</li><li>注意交互中良好的用户体验和使用引导</li></ul><h3 id="思路-4"><a href="#思路-4" class="headerlink" title="思路"></a>思路</h3><ol><li>页面布局时，将要被拖拽的 div 设置为绝对定位，因为这样在后面拖拽的时候才方便更改坐标。</li><li>初始化界面的时候，首先让 div 块按照相应的高度重新排列一下。</li><li>拖拽方法的实现。由 mousedown mousemove mouseup 三部分组成。</li><li>在 mousemove 中判断，不能让鼠标拖出浏览器窗口。</li><li>在 mouseup 中判断，是否到达指定区域。完成拖拽。</li></ol><p>我在这里没有使用 html5 中的拖拽 API，所以兼容性还是很好的。</p><h3 id="实现-4"><a href="#实现-4" class="headerlink" title="实现"></a>实现</h3><ul><li><a href="https://github.com/Gaohaoyang/ife/tree/master/task/task0002/work/Gaohaoyang" target="_blank" rel="noopener">代码</a></li><li><a href="http://gaohaoyang.github.io/ife/task/task0002/work/Gaohaoyang/task0002_5.html" target="_blank" rel="noopener">在线demo</a></li></ul><h2 id="最终作品"><a href="#最终作品" class="headerlink" title="最终作品"></a>最终作品</h2><ul><li><a href="https://github.com/Gaohaoyang/ife/tree/master/task/task0002/work/Gaohaoyang" target="_blank" rel="noopener">代码</a></li><li><a href="http://gaohaoyang.github.io/ife/task/task0002/work/Gaohaoyang/index.html" target="_blank" rel="noopener">在线 Demo</a></li></ul><h2 id="Update"><a href="#Update" class="headerlink" title="Update"></a>Update</h2><p><strong>2015/06/01</strong></p><ul><li><a href="https://github.com/hushicai/ife-task0002" target="_blank" rel="noopener">导师的参考答案</a></li><li><a href="https://github.com/baidu-ife/ife/tree/master/task/task0002/review" target="_blank" rel="noopener">review</a></li></ul><p>加油！向着下一个目标前进！</p>]]></content>
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> ife </tag>
            
            <tag> Baidu </tag>
            
            <tag> 正则 </tag>
            
            <tag> Regular </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>百度Web前端技术学院(1)-HTML, CSS基础</title>
      <link href="//2015/baidu-ife-1.html"/>
      <url>//2015/baidu-ife-1.html</url>
      <content type="html"><![CDATA[<p>百度前端学院的第一次任务笔记，HTML、CSS 基础。主要有 CSS 工作原理，选择器的使用，常用属性，行高属性，盒模型与定位，最后根据设计图实现4个页面。</p><h2 id="任务"><a href="#任务" class="headerlink" title="任务"></a>任务</h2><p><strong>任务：</strong> <a href="https://github.com/Gaohaoyang/ife/tree/master/task/task0001" target="_blank" rel="noopener">HTML、CSS基础</a>   </p><p>有人问到提交作业 fork 同步的问题，真心觉得官方 GitHub 的帮助文档讲的很好，我上一篇博客 <a href="http://gaohaoyang.github.io/2015/04/12/Syncing-a-fork/" target="_blank" rel="noopener">同步一个 fork</a> 就是翻译的这个官方文档，如果懒得看英文可以参考我的博客。   </p><p>写点东西记录一下我的做题过程吧。<br><a id="more"></a></p><h2 id="CSS-如何工作"><a href="#CSS-如何工作" class="headerlink" title="CSS 如何工作"></a>CSS 如何工作</h2><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/Guide/CSS/Getting_started/How_CSS_works" target="_blank" rel="noopener">CSS 如何工作</a> Mozilla 的开发者文档讲的很好。</p><blockquote><p>浏览器在展现一个文档的时候，必须要把文档内容和相应的样式信息结合起来展示。 这个处理过程一般分两个阶段：   </p><ol><li>浏览器先将标记语言和 CSS 转换成 DOM (文档对象模型)结构。 这时 DOM 就代表了电脑内存中的相应文档，因为它已经融合了文档内容和相应的样式表。   </li><li>最后浏览器把 DOM 的内容展示出来。   </li></ol></blockquote><h2 id="层叠和继承"><a href="#层叠和继承" class="headerlink" title="层叠和继承"></a>层叠和继承</h2><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/Guide/CSS/Getting_started/Cascading_and_inheritance" target="_blank" rel="noopener">参考资料: 层叠和继承</a></p><blockquote><p>对于层叠来说，共有三种主要的样式来源：</p><ul><li>浏览器对HTML定义的默认样式。</li><li>用户定义的样式。</li><li><p>开发者定义的样式，可以有三种形式：</p><ul><li>定义在外部文件（外链样式）：本教程中案例主要是通过这种形式定义样式。</li><li>在页面的头部定义（内联样式）：通过这种形式定义的样式只在本页面内生效。</li><li>定义在特定的元素身上（行内样式）：这种形式多用于测试，可维护性较差。</li></ul></li></ul><p>用户定义的样式表会覆盖浏览器定义的默认样式，然后网页开发者定义的样式又会覆盖用户样式。</p><p>再来看看优先级，从高到低依次为：网页开发者定义的样式、网页阅读者定义的样式、浏览器的默认样式。</p><p>对继承的元素来说，子元素自身的样式优先级高于从父级继承来的样式。</p><blockquote><p>更多细节<br>CSS 另外提供了一个 !important 关键字，用户可以通过使用这个关键字使自己定义的样式覆盖掉开发者定义的样式。<br>这就意味着，作为开发者，你很难准确的预知页面最终在用户电脑上的显示效果。   </p></blockquote></blockquote><h2 id="选择器"><a href="#选择器" class="headerlink" title="选择器"></a>选择器</h2><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/Guide/CSS/Getting_Started/Selectors" target="_blank" rel="noopener">参考资料:选择器（Selectors）</a></p><h3 id="标签选择器"><a href="#标签选择器" class="headerlink" title="标签选择器"></a>标签选择器</h3><h3 id="类选择器（Class-selectors）"><a href="#类选择器（Class-selectors）" class="headerlink" title="类选择器（Class selectors）"></a>类选择器（Class selectors）</h3><blockquote><p>通过设置元素的 class 属性，可以为元素指定类名。类名由开发者自己指定。 文档中的多个元素可以拥有同一个类名。</p><p>在写样式表时，类选择器是以英文句号（.）开头的。</p></blockquote><h3 id="ID选择器（ID-selectors）"><a href="#ID选择器（ID-selectors）" class="headerlink" title="ID选择器（ID selectors）"></a>ID选择器（ID selectors）</h3><blockquote><p>通过设置元素的 id 属性为该元素制定ID。ID名由开发者指定。每个ID在文档中必须是唯一的。</p><p>在写样式表时，ID选择器是以#开头的。</p></blockquote><h3 id="优先级"><a href="#优先级" class="headerlink" title="优先级"></a>优先级</h3><blockquote><ul><li>如果多余一个规则指定了相同的属性值都应用到一个元素上，CSS规定拥有更高确定度的选择器优先级更高。ID选择器比类选择器更具确定度, 而类选择器比标签选择器（tag selector）更具确定度。</li><li>如果样式中包含冲突的规则，且它们具有相同的确定度。那么，后出现的规则优先级高。</li><li>如果你遇到规则冲突，你可以增加其中一条的确定度或将之移到后面以使它具有更高优先级。</li></ul></blockquote><h3 id="伪类选择器（Pseudo-classes-selectors）"><a href="#伪类选择器（Pseudo-classes-selectors）" class="headerlink" title="伪类选择器（Pseudo-classes selectors）"></a>伪类选择器（Pseudo-classes selectors）</h3><h3 id="基于关系的选择器"><a href="#基于关系的选择器" class="headerlink" title="基于关系的选择器"></a>基于关系的选择器</h3><p>选择器    |选择的元素<br>A E    |任何是元素A的后代元素E (后代节点指A的子节点，子节点的子节点，以此类推)<br>A &gt; E    |任何元素A的子元素<br>E:first-child    |任何元素的第一个子元素E<br>B + E    |任何元素B的下一个兄弟元素E</p><h2 id="其他属性"><a href="#其他属性" class="headerlink" title="其他属性"></a>其他属性</h2><h3 id="text-indent"><a href="#text-indent" class="headerlink" title="text-indent"></a><code>text-indent</code></h3><p><strong>定义和用法</strong><br>text-indent 属性规定文本块中首行文本的缩进。<br>注释：允许使用负值。如果使用负值，那么首行会被缩进到左边。   </p><p><strong>可能的值</strong>    </p><p>值    |描述<br>length    |定义固定的缩进。默认值：0。<br>%    |定义基于父元素宽度的百分比的缩进。<br>inherit    |规定应该从父元素继承 text-indent 属性的值。</p><h3 id="text-transform"><a href="#text-transform" class="headerlink" title="text-transform"></a><code>text-transform</code></h3><p><strong>定义和用法</strong><br>text-transform 属性控制文本的大小写。      </p><p><strong>说明</strong><br>这个属性会改变元素中的字母大小写，而不论源文档中文本的大小写。如果值为 capitalize，则要对某些字母大写，但是并没有明确定义如何确定哪些字母要大写，这取决于用户代理如何识别出各个“词”。   </p><p><strong>可能的值</strong>  </p><p>值    |描述<br>none    |默认。定义带有小写字母和大写字母的标准的文本。<br>capitalize    |文本中的每个单词以大写字母开头。<br>uppercase    |定义仅有大写字母。<br>lowercase    |定义无大写字母，仅有小写字母。<br>inherit    |规定应该从父元素继承 text-transform 属性的值。</p><h3 id="text-decoration"><a href="#text-decoration" class="headerlink" title="text-decoration"></a><code>text-decoration</code></h3><p><strong>定义和用法</strong><br>text-decoration 属性规定添加到文本的修饰。<br>注释：修饰的颜色由 “color” 属性设置。<br>注释：IE、Chrome 或 Safari 不支持 “blink” 属性值。    </p><p><strong>说明</strong><br>这个属性允许对文本设置某种效果，如加下划线。如果后代元素没有自己的装饰，祖先元素上设置的装饰会“延伸”到后代元素中。不要求用户代理支持 blink。</p><h3 id="text-align"><a href="#text-align" class="headerlink" title="text-align"></a><code>text-align</code></h3><p><strong>定义和用法</strong><br>text-align 属性规定元素中的文本的水平对齐方式。<br>该属性通过指定行框与哪个点对齐，从而设置块级元素内文本的水平对齐方式。通过允许用户代理调整行内容中字母和字之间的间隔，可以支持值 justify；不同用户代理可能会得到不同的结果。   </p><p><strong>可能的值</strong>   </p><p>值    |描述<br>left    |把文本排列到左边。默认值：由浏览器决定。<br>right    |把文本排列到右边。<br>center    |把文本排列到中间。<br>justify    |实现两端对齐文本效果。<br>inherit    |规定应该从父元素继承 text-align 属性的值。</p><h3 id="word-spacing"><a href="#word-spacing" class="headerlink" title="word-spacing"></a><code>word-spacing</code></h3><p><strong>定义</strong><br>word-spacing 属性增加或减少单词间的空白（即字间隔）。<br>该属性定义元素中字之间插入多少空白符。针对这个属性，“字” 定义为由空白符包围的一个字符串。如果指定为长度值，会调整字之间的通常间隔；所以，normal 就等同于设置为 0。允许指定负长度值，这会让字之间挤得更紧。<br>注释：允许使用负值。</p><h3 id="white-space"><a href="#white-space" class="headerlink" title="white-space"></a><code>white-space</code></h3><p><strong>定义和用法</strong><br>white-space 属性设置如何处理元素内的空白。<br>这个属性声明建立布局过程中如何处理元素中的空白符。值 pre-wrap 和 pre-line 是 CSS 2.1 中新增的。</p><p><strong>可能的值</strong></p><p>值    |描述<br>normal    |默认。空白会被浏览器忽略。<br>pre    |空白会被浏览器保留。其行为方式类似 HTML 中的 <code>&lt;pre&gt;</code> 标签。<br>nowrap    |文本不会换行，文本会在在同一行上继续，直到遇到 <code>&lt;br&gt;</code> 标签为止。<br>pre-wrap    |保留空白符序列，但是正常地进行换行。<br>pre-line    |合并空白符序列，但是保留换行符。<br>inherit    |规定应该从父元素继承 white-space 属性的值。</p><h3 id="font-face"><a href="#font-face" class="headerlink" title="@font-face"></a><code>@font-face</code></h3><p><strong>CSS3 @font-face 规则</strong><br>在 CSS3 之前，web 设计师必须使用已在用户计算机上安装好的字体。<br>通过 CSS3，web 设计师可以使用他们喜欢的任意字体。<br>当您您找到或购买到希望使用的字体时，可将该字体文件存放到 web 服务器上，它会在需要时被自动下载到用户的计算机上。<br>您“自己的”的字体是在 CSS3 @font-face 规则中定义的。   </p><p>注释：Internet Explorer 8 以及更早的版本不支持新的 @font-face 规则。Internet Explorer 9+ 支持新的 @font-face 规则，但是仅支持 .eot 类型的字体 (Embedded OpenType)。</p><p><strong>使用您需要的字体</strong><br>在新的 @font-face 规则中，您必须首先定义字体的名称（比如 myFirstFont），然后指向该字体文件。<br>如需为 HTML 元素使用字体，请通过 font-family 属性来引用字体的名称 (myFirstFont)：</p><p><strong>实例</strong></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">@<span class="keyword">font-face</span> &#123;</span><br><span class="line">    <span class="attribute">font-family</span>: myFirstFont;</span><br><span class="line">    <span class="attribute">src</span>: <span class="built_in">url</span>(<span class="string">'Sansation_Light.ttf'</span>),</span><br><span class="line">         <span class="built_in">url</span>(<span class="string">'Sansation_Light.eot'</span>); <span class="comment">/* IE9+ */</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">    <span class="attribute">font-family</span>: myFirstFont;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>CSS3 字体描述符</strong></p><p>下面的表格列出了能够在 @font-face 规则中定义的所有字体描述符：</p><p>描述符    |值    |描述<br>font-family    |name    |必需。规定字体的名称。<br>src    |URL    |必需。定义字体文件的 URL。<br>font-stretch    |normal<br>condensed<br>ultra-condensed<br>extra-condensed<br>semi-condensed<br>expanded<br>semi-expanded<br>extra-expanded<br>ultra-expanded|可选。定义如何拉伸字体。默认是 “normal”。<br>font-style|ormal<br>italic<br>oblique|可选。定义字体的样式。默认是 “normal”。<br>font-weight|normal<br>bold<br>100<br>200<br>300<br>400<br>500<br>600<br>700<br>800<br>900|选。定义字体的粗细。默认是 “normal”。<br>unicode-range    |unicode-range    |可选。定义字体支持的 UNICODE 字符范围。默认是 “U+0-10FFFF”。</p><h2 id="深入了解行高属性"><a href="#深入了解行高属性" class="headerlink" title="深入了解行高属性"></a>深入了解行高属性</h2><p><a href="http://www.cnblogs.com/fengzheng126/archive/2012/05/18/2507632.html" target="_blank" rel="noopener">参考：深入了解css的行高Line Height属性</a></p><p>一般来说，设置行高为<code>值：纯数字</code>是最理想的方式，因为其会随着对应的 <code>font-size</code> 而缩放。</p><h2 id="盒模型及定位"><a href="#盒模型及定位" class="headerlink" title="盒模型及定位"></a>盒模型及定位</h2><h3 id="已知宽度的div居中"><a href="#已知宽度的div居中" class="headerlink" title="已知宽度的div居中"></a>已知宽度的div居中</h3><ul><li>用两种方法来实现一个背景色为红色、宽度为960px的<div>在浏览器中居中</div></li></ul><p>我的方法一：</p><p>使用 <code>margin：0 auto;</code></p><p>html文件</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">type</span>=<span class="string">"text/css"</span> <span class="attr">href</span>=<span class="string">"task0001-2.css"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"center"</span>&gt;</span>aaa<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>css文件</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.center</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">960px</span>;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span> auto;</span><br><span class="line">    <span class="attribute">background-color</span>: red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>方法二：</p><p>绝对定位，左边距离 body 50%，<code>margin-left: -480px</code></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.center</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">960px</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: red;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">50%</span>;</span><br><span class="line">    <span class="attribute">margin-left</span>: -<span class="number">480px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="http://gaohaoyang.github.io/baidu-ife-practice/task0001/task0001-2.html" target="_blank" rel="noopener">Demo</a></p><h4 id="对于居中的补充"><a href="#对于居中的补充" class="headerlink" title="对于居中的补充"></a>对于居中的补充</h4><p>参考自 <a href="http://zh.learnlayout.com/" target="_blank" rel="noopener">学习CSS布局</a>。</p><p>像下面这样写css代码，使用 <code>max-width</code> 替代 <code>width</code>  可以使浏览器更好地处理小窗口的情况。这点在移动设备上显得尤为重要。</p><p>有效的避免了如下问题：<br>当浏览器窗口比元素的宽度还要窄时，浏览器会显示一个水平滚动条来容纳页面。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#main</span> &#123;</span><br><span class="line">    <span class="attribute">max-width</span>: <span class="number">600px</span>;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span> auto;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><a href="http://www.cnblogs.com/2050/p/3392803.html" target="_blank" rel="noopener">CSS布局奇淫技巧之–各种居中</a></li></ul><h3 id="早期css滑动门"><a href="#早期css滑动门" class="headerlink" title="早期css滑动门"></a>早期css滑动门</h3><ul><li>有的圆角矩形是复杂图案，无法直接用border-radius，请在不使用 border-radius 的情况下实现一个可复用的高度和宽度都自适应的圆角矩形<br>示例 <img src="http://7q5cdt.com1.z0.glb.clouddn.com/Baidu-Front-end-task0001_7.png" alt="圆角矩形"></li></ul><p>这道题我一开始不会做，查阅了资料，发现这就是所谓的 css 滑动门的应用。<a href="http://www.bkjia.com/webzh/759711.html" target="_blank" rel="noopener">妙味云课堂之css：滑动门、圆角、css精灵</a><br>使用三层嵌套，或者四层嵌套的 <code>div</code>，通过背景图定位等方式可以实现。</p><h3 id="左侧固定右侧自适应宽度的两列布局"><a href="#左侧固定右侧自适应宽度的两列布局" class="headerlink" title="左侧固定右侧自适应宽度的两列布局"></a>左侧固定右侧自适应宽度的两列布局</h3><ul><li>用两种不同的方法来实现一个两列布局，其中左侧部分宽度固定、右侧部分宽度随浏览器宽度的变化而自适应变化 <img src="http://7q5cdt.com1.z0.glb.clouddn.com/Baidu-Front-end-task0001_3.jpg" alt="pic"></li></ul><p>我的方法一：</p><p>不使用浮动，使用绝对定位，将左上角的块放好位置，右边的块设置<code>margin-left</code></p><p>html 文件：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>layout<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">type</span>=<span class="string">"text/css"</span> <span class="attr">href</span>=<span class="string">"task0001-6-3.css"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"row"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"left"</span>&gt;</span>DIV-A<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"right"</span>&gt;</span>DIV-B<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"bottom"</span>&gt;</span>DIV-C<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>css 文件：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.row</span> &#123;</span><br><span class="line">    <span class="attribute">position</span>: relative;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.left</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: red;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.right</span> &#123;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: blue;</span><br><span class="line">    <span class="attribute">margin-left</span>: <span class="number">100px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.bottom</span> &#123;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: yellow;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>方法二：   </p><p>使用浮动，左边的块使用浮动，右边的块使用<code>margin-left</code></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.left</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: red;</span><br><span class="line">    <span class="attribute">float</span>: left;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.right</span> &#123;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: blue;</span><br><span class="line">    <span class="attribute">margin-left</span>: <span class="number">100px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.bottom</span> &#123;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: yellow;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="http://gaohaoyang.github.io/baidu-ife-practice/task0001/task0001-6-3.html" target="_blank" rel="noopener">Demo</a></p><p><strong>补充：</strong></p><p>看完了后面的 BFC 之后，本题和下一题都可以用另一种方法了<br>总之我已经震惊了！太爽了！有没有！</p><p>html</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>使用 BFC 进行两列布局<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"two-col-layout-with-BFC.css"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"left"</span>&gt;</span>DIV-A<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"right"</span>&gt;</span>DIV-B<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"bottom"</span>&gt;</span>DIV-C<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>css</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.left</span>&#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: blue;</span><br><span class="line">    <span class="attribute">float</span>: left;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.right</span>&#123;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: yellow;</span><br><span class="line">    <span class="attribute">overflow</span>: hidden;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.bottom</span>&#123;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="http://gaohaoyang.github.io/baidu-ife-practice/task0001/two-col-layout-with-BFC.html" target="_blank" rel="noopener">Demo</a></p><h3 id="双飞翼布局"><a href="#双飞翼布局" class="headerlink" title="双飞翼布局"></a>双飞翼布局</h3><ul><li>用两种不同的方式来实现一个三列布局，其中左侧和右侧的部分宽度固定，中间部分宽度随浏览器宽度的变化而自适应变化</li></ul><p>原题中参考资料 <a href="http://www.imooc.com/wenda/detail/254035" target="_blank" rel="noopener">双飞翼布局</a>   </p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>Flying Swing Layout<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">type</span>=<span class="string">"text/css"</span> <span class="attr">href</span>=<span class="string">"task0001-6-4.css"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"bd"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"main"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"main-wrap"</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">p</span>&gt;</span>Flying Swing Layout<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"sub"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">p</span>&gt;</span>Flying Swing Layout<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">                left</span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"extra"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">p</span>&gt;</span>Flying Swing Layout<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">                right</span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>css</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.bd</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*padding: 0 190px;*/</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.main</span> &#123;</span><br><span class="line">    <span class="attribute">float</span>: left;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#aaa</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.main-wrap</span> &#123;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span> <span class="number">190px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.sub</span> &#123;</span><br><span class="line">    <span class="attribute">float</span>: left;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">190px</span>;</span><br><span class="line">    <span class="attribute">margin-left</span>: -<span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: blue;        </span><br><span class="line">    <span class="comment">/*position: relative;</span></span><br><span class="line"><span class="comment">    left: -190px;*/</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.extra</span> &#123;</span><br><span class="line">    <span class="attribute">float</span>: left;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">190px</span>;</span><br><span class="line">    <span class="attribute">margin-left</span>: -<span class="number">190px</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: yellow;        </span><br><span class="line">    <span class="comment">/*position: relative;</span></span><br><span class="line"><span class="comment">    right: -190px;*/</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="http://gaohaoyang.github.io/baidu-ife-practice/task0001/task0001-6-4.html" target="_blank" rel="noopener">Demo</a></p><p><strong>补充：</strong></p><p>使用 BFC 的另一种方法，我再一次震惊！</p><p>代码超级简单！</p><p>html</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>flying-Swing-BFC<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"flying-Swing-BFC.css"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"left"</span>&gt;</span>left<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"right"</span>&gt;</span>right<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"main"</span>&gt;</span></span><br><span class="line">            flying-Swing-BFC.htmlflying-Swing-BFC.htmlflying-Swing-BFC.htmlflying-Swing-BFC.htmlflying-Swing-BFC.htmlflying-Swing-BFC.htmlflying-Swing-BFC.htmlflying-Swing-BFC.htmlflying-Swing-BFC.htmlflying-Swing-BFC.htmlflying-Swing-BFC.html</span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"footer"</span>&gt;</span></span><br><span class="line">            footerfooterfooterfooterfooterfooterfooterfooterfooter</span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>css</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.left</span>&#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: red;</span><br><span class="line">    <span class="attribute">float</span>: left;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.right</span>&#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: blue;</span><br><span class="line">    <span class="attribute">float</span>: right;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.main</span>&#123;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#eee</span>;</span><br><span class="line">    <span class="attribute">overflow</span>: hidden;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="http://gaohaoyang.github.io/baidu-ife-practice/task0001/flying-Swing-BFC.html" target="_blank" rel="noopener">Demo</a></p><h3 id="浮动布局"><a href="#浮动布局" class="headerlink" title="浮动布局"></a>浮动布局</h3><ul><li>实现一个浮动布局，红色容器中每一行的蓝色容器数量随着浏览器宽度的变化而变化 <img src="http://7q5cdt.com1.z0.glb.clouddn.com/Baidu-Front-end-task0001_4.jpg" alt="pic"><img src="http://7q5cdt.com1.z0.glb.clouddn.com/Baidu-Front-end-task0001_5.jpg" alt="pic"></li></ul><p>这个题我觉的直接将每一个块浮动起来就好了，不知我理解的对不对。</p><p>html文件</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">type</span>=<span class="string">"text/css"</span> <span class="attr">href</span>=<span class="string">"task0001-6-5.css"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>css文件</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">    <span class="attribute">background-color</span>: red;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">150px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">10px</span>;</span><br><span class="line">    <span class="attribute">float</span>: left;</span><br><span class="line">    <span class="attribute">background-color</span>: blue;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="file:///E:/GitWorkSpace/baidu-ife-practice/task0001/task0001-6-5.html" target="_blank" rel="noopener">Demo</a></p><h3 id="清除浮动-闭合浮动"><a href="#清除浮动-闭合浮动" class="headerlink" title="清除浮动/闭合浮动"></a>清除浮动/闭合浮动</h3><p>参考自 <a href="http://www.iyunlu.com/view/css-xhtml/55.html" target="_blank" rel="noopener">那些年我们一起清除过的浮动 by 一丝冰凉</a></p><ol><li>清除浮动：清除对应的单词是 clear，对应CSS中的属性是 clear：left | right | both | none；</li><li>闭合浮动：更确切的含义是使浮动元素闭合，从而减少浮动带来的影响。</li></ol><p>我们想要达到的效果更确切地说是闭合浮动，而不是单纯的清除浮动，设置clear：both清除浮动并不能解决warp高度塌陷的问题。</p><p>正是因为浮动的这种特性，导致本属于普通流中的元素浮动之后，包含框内部由于不存在其他普通流元素了，也就表现出高度为0（<strong>高度塌陷</strong>）。在实际布局中，往往这并不是我们所希望的，所以需要闭合浮动元素，使其包含框表现出正常的高度。</p><p>最后一丝姐给了两个精益求精方案，我觉得方案一更易于理解，这里实践一下：</p><p><a href="http://gaohaoyang.github.io/baidu-ife-practice/task0001/close-float.html" target="_blank" rel="noopener">闭合浮动的Demo</a></p><p>下面是源码</p><p>html</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"close-float.css"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"row clearfix"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"left"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">h1</span>&gt;</span>left<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span>&gt;</span>Content or Something<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"right"</span>&gt;</span>right<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"row2"</span>&gt;</span>Row2<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>css</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.row</span> &#123;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">1px</span> solid red;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.clearfix</span><span class="selector-pseudo">:after</span> &#123;</span><br><span class="line">    <span class="attribute">content</span>: <span class="string">"\200B"</span>;</span><br><span class="line">    <span class="attribute">display</span>: block;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">clear</span>: both;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.clearfix</span> &#123;</span><br><span class="line">    *zoom: 1;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.left</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">float</span>: left;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#eee</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.right</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">float</span>: right;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#eee</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.row2</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">600px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">50px</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#aaa</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中<code>*zoom: 1</code>是为了触发<code>hasLayout</code></p><p>还有另一种解决方案！</p><p>参考自：<a href="http://zh.learnlayout.com/clearfix.html" target="_blank" rel="noopener">清除浮动（clearfix hack）</a></p><p>直接使用，如下代码即可</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.clearfix</span>&#123;</span><br><span class="line">    <span class="attribute">overflow</span>: auto;</span><br><span class="line">    <span class="attribute">zoom</span>: <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="http://gaohaoyang.github.io/baidu-ife-practice/task0001/close-float-2.html" target="_blank" rel="noopener">Demo</a></p><p>(实际上，我看完后面的资料，再翻到这里就明白了！正是使用了BFC原理！！！！！！！)</p><p><strong>但是今天遇到一个坑！</strong></p><p>如果使用了 <code>over-flow</code>，在后面如果有元素要绝对布局在父元素的外面的，意思就是出现 <code>top</code>, <code>bottom</code>, <code>left</code>, <code>right</code> 的值为负值时，就会出现看不到，或者滚动条的问题！</p><p>若是有这种要求，我觉得还是用一丝姐姐的解决方案比较好。</p><p><strong>参考</strong></p><ul><li><a href="http://zfengqi.me/?p=87" target="_blank" rel="noopener">清除浮动的几种方法</a></li></ul><h3 id="box-sizing"><a href="#box-sizing" class="headerlink" title="box-sizing"></a><code>box-sizing</code></h3><p>当你设置一个元素为 <code>box-sizing: border-box;</code> 时，此元素的内边距和边框不再会增加它的宽度。</p><p>他们的内边距和边框都是向内的挤压的。支持IE8+，需要加浏览器内核。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.simple</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">500px</span>;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">20px</span> auto;</span><br><span class="line">    <span class="attribute">-webkit-box-sizing</span>: border-box;</span><br><span class="line">    <span class="attribute">-moz-box-sizing</span>: border-box;</span><br><span class="line">    <span class="attribute">box-sizing</span>: border-box;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="响应式布局"><a href="#响应式布局" class="headerlink" title="响应式布局"></a>响应式布局</h3><p>媒体查询</p><ul><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/Guide/CSS/Media_queries" target="_blank" rel="noopener">MDN CSS媒体查询</a></li><li><p><a href="http://zh.learnlayout.com/media-queries.html" target="_blank" rel="noopener">媒体查询-学习CSS布局</a></p><p>  <code>@media screen and (min-width: 500px) and (max-width: 800px) { ... }</code></p></li><li><p><a href="https://dev.opera.com/articles/an-introduction-to-meta-viewport-and-viewport/" target="_blank" rel="noopener">An Introduction to Meta Viewport and @viewport</a></p></li></ul><h3 id="多列布局"><a href="#多列布局" class="headerlink" title="多列布局"></a>多列布局</h3><ul><li><a href="http://zh.learnlayout.com/column.html" target="_blank" rel="noopener">column</a></li></ul><h3 id="BFC-和-IE-的-hasLayout"><a href="#BFC-和-IE-的-hasLayout" class="headerlink" title="BFC 和 IE 的 hasLayout"></a>BFC 和 IE 的 hasLayout</h3><ul><li><a href="http://www.cnblogs.com/pigtail/archive/2013/01/23/2871627.html" target="_blank" rel="noopener">BFC和IE的hasLayout</a></li><li><a href="http://outofmemory.cn/wr/?u=http%3A%2F%2Fkkeys.me%2Fpost%2F68547473290" target="_blank" rel="noopener">Block Formatting Context 的几大用处</a></li></ul><p>看完这个资料后我震惊了！竟然可以这么玩儿！<br>我将本文之前提到的两列布局，双飞翼布局又重新写了一遍！太爽了！代码超级简洁！</p><p><strong>Block Formatting Context 的几大用处：</strong></p><ol><li>防止 margin 折叠</li><li>清除float</li><li>不会环绕float元素</li></ol><p>相关资料</p><ul><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/Visual_formatting_model" target="_blank" rel="noopener">视觉格式化模型(visual formatting model)</a></li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/Block_formatting_context" target="_blank" rel="noopener">块格式化上下文(block formatting context)</a></li></ul><h3 id="div-三列等高"><a href="#div-三列等高" class="headerlink" title="div 三列等高"></a><code>div</code> 三列等高</h3><p><a href="http://show.sysu.edu.cn/?action-blogdetail-uid-2383-id-5040" target="_blank" rel="noopener">纯CSS实现三列DIV等高布局</a></p><p>最关键的地方有3句：</p><p>最外层div设置一个溢出隐藏</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#wrap</span> &#123;</span><br><span class="line">    <span class="attribute">overflow</span>:hidden;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>每一个子块设置 padding 和 margin</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#left</span>,<span class="selector-id">#center</span>,<span class="selector-id">#right</span>&#123;</span><br><span class="line">    <span class="attribute">margin-bottom</span>:-<span class="number">10000px</span>;</span><br><span class="line">    <span class="attribute">padding-bottom</span>:<span class="number">10000px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>overflow:hidden;    ‘隐藏溢出。如果内容溢出wrap层，则不显示。</p><p>margin-bottom:-10000px;    ‘底部边距-10000px。<br>padding-bottom:10000px;    ‘底部填充10000px。<br>上面这两句能够实现的效果就是，产生10000px的填充，然后用负的边距把它给抵销掉。</p><h3 id="去除inline-block元素间间距"><a href="#去除inline-block元素间间距" class="headerlink" title="去除inline-block元素间间距"></a>去除inline-block元素间间距</h3><p>一开始我不知道是因为使用了 <code>display: inline-block</code> 会有间距。后来查找资料找到了相关的方案。</p><ul><li><a href="http://www.zhangxinxu.com/wordpress/2012/04/inline-block-space-remove-%E5%8E%BB%E9%99%A4%E9%97%B4%E8%B7%9D/" target="_blank" rel="noopener">去除inline-block元素间间距的N种方法</a></li><li><a href="https://css-tricks.com/fighting-the-space-between-inline-block-elements/" target="_blank" rel="noopener">Fighting the Space Between Inline Block Elements</a></li></ul><p>真正意义上的inline-block水平呈现的元素间，换行显示或空格分隔的情况下会有间距。<br>这种表现是符合规范的应该有的表现。</p><p>解决方法有很多，上述博文中提到的有：</p><ol><li>移除空格</li><li>使用 <code>margin</code> 负值</li><li>取消闭合标签</li><li>使用 <code>font-size: 0</code></li><li>使用 <code>letter-spacing</code></li><li>使用 <code>word-spacing</code></li><li>其他</li></ol><p>我觉得使用 4 <code>font-size: 0</code> 比较好，对别的元素影响最小。代码如下：在 <code>a</code> 的外层将字体尺寸设为 0，载对内层的 <code>a</code> 重新设置字体大小，即可。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">nav</span> &#123;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">nav</span> <span class="selector-tag">a</span> &#123;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">16px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="最终作品"><a href="#最终作品" class="headerlink" title="最终作品"></a>最终作品</h2><ul><li><a href="http://gaohaoyang.github.io/ife/task/task0001/work/Gaohaoyang/index.html" target="_blank" rel="noopener">在线Demo</a></li><li><a href="https://github.com/Gaohaoyang/ife/tree/master/task/task0001/work/Gaohaoyang" target="_blank" rel="noopener">源代码</a></li></ul><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li><a href="https://github.com/ecomfe/spec" target="_blank" rel="noopener">HTML、CSS的代码规范</a> 自己要试着改变一些代码风格了，规范化！  </li><li><a href="http://www.zhihu.com/question/20455165" target="_blank" rel="noopener">顾轶灵:Web语义化</a><br>我看他回答最后的举例的Sildes做的非常好，可以经常看看。<a href="http://justineo.github.io/slideshows/semantic-html/" target="_blank" rel="noopener">Semantic HTML</a>。他的其他Slides也做的非常好，很喜欢这种风格！</li><li><a href="http://www.w3cfuns.com/blog-5445898-5398950.html" target="_blank" rel="noopener">CSS命名规范@W3C Funs</a> 起名不再困难！</li><li><a href="点击阅读: CSS浏览器兼容性列表">点击阅读: CSS浏览器兼容性列表-维基百科</a> 类似的我想到了 <a href="http://caniuse.com/" target="_blank" rel="noopener">Can I Use</a>，Can I Use 包含的更多，包括 HTML5, CSS SVG, JS API 等。</li></ul><ul><li><a href="http://zh.learnlayout.com/" target="_blank" rel="noopener">学习CSS布局</a></li><li><a href="http://mediaqueri.es/" target="_blank" rel="noopener">Media Queries</a></li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/Guide/CSS/Using_CSS_gradients" target="_blank" rel="noopener">使用CSS渐变</a></li><li><a href="http://www.w3cplus.com/content/css3-gradient" target="_blank" rel="noopener">CSS3 Gradient</a></li><li><a href="http://www.colorzilla.com/gradient-editor/" target="_blank" rel="noopener">CSS渐变生成器</a></li></ul>]]></content>
      
      <categories>
          
          <category> HTML CSS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HTML </tag>
            
            <tag> CSS </tag>
            
            <tag> ife </tag>
            
            <tag> Baidu </tag>
            
            <tag> task </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>判断两个数组是否相似 (arraysSimilar)</title>
      <link href="//2015/arrays-similar.html"/>
      <url>//2015/arrays-similar.html</url>
      <content type="html"><![CDATA[<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>题目来自 <a href="http://imooc.com/code/5760" target="_blank" rel="noopener">慕课网 JavaScript 深入浅出 1-6 编程练习</a>    </p><p>请在 index.html 文件中，编写 arraysSimilar 函数，实现判断传入的两个数组是否相似。具体需求：   </p><ol><li>数组中的成员类型相同，顺序可以不同。例如 [1, true] 与 [false, 2] 是相似的。</li><li>数组的长度一致。</li><li>类型的判断范围，需要区分: String, Boolean, Number, undefined, null, 函数, 日期, window.</li></ol><a id="more"></a><p>当以上全部满足，则返回<strong>“判定结果:通过”</strong>，否则返回<strong>“判定结果:不通过”</strong>。    </p><p>题目给出了 index.html 如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE HTML&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"Content-Type"</span> <span class="attr">content</span>=<span class="string">"text/html; charset=gb18030"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Untitled Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined">   </span></span><br><span class="line"><span class="undefined">        /*</span></span><br><span class="line"><span class="javascript">         * param1 <span class="built_in">Array</span></span></span><br><span class="line"><span class="javascript">         * param2 <span class="built_in">Array</span></span></span><br><span class="line"><span class="javascript">         * <span class="keyword">return</span> <span class="literal">true</span> or <span class="literal">false</span></span></span><br><span class="line"><span class="undefined">         */</span></span><br><span class="line"><span class="javascript">        <span class="function"><span class="keyword">function</span> <span class="title">arraysSimilar</span>(<span class="params">arr1, arr2</span>)</span>&#123;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"testData.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>其中 testData.js 是测试用例，代码如下</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> result = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">//以下为多组测试数据</span></span><br><span class="line">    <span class="keyword">var</span> cases = [&#123;</span><br><span class="line">        arr1: [<span class="number">1</span>, <span class="literal">true</span>, <span class="literal">null</span>],</span><br><span class="line">        arr2: [<span class="literal">null</span>, <span class="literal">false</span>, <span class="number">100</span>],</span><br><span class="line">        expect: <span class="literal">true</span></span><br><span class="line">    &#125;, &#123;</span><br><span class="line">        arr1: [</span><br><span class="line">            <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;,</span><br><span class="line">            <span class="number">100</span></span><br><span class="line">        ],</span><br><span class="line">        arr2: [<span class="number">100</span>, &#123;&#125;],</span><br><span class="line">        expect: <span class="literal">false</span></span><br><span class="line">    &#125;, &#123;</span><br><span class="line">        arr1: [<span class="literal">null</span>, <span class="number">999</span>],</span><br><span class="line">        arr2: [&#123;&#125;,</span><br><span class="line">            <span class="number">444</span></span><br><span class="line">        ],</span><br><span class="line">        expect: <span class="literal">false</span></span><br><span class="line">    &#125;, &#123;</span><br><span class="line">        arr1: [<span class="built_in">window</span>, <span class="number">1</span>, <span class="literal">true</span>, <span class="keyword">new</span> <span class="built_in">Date</span>(), <span class="string">"hahaha"</span>, (<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;), <span class="literal">undefined</span>],</span><br><span class="line">        arr2: [<span class="literal">undefined</span>, (<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;), <span class="string">"okokok"</span>, <span class="keyword">new</span> <span class="built_in">Date</span>(), <span class="literal">false</span>, <span class="number">2</span>, <span class="built_in">window</span>],</span><br><span class="line">        expect: <span class="literal">true</span></span><br><span class="line">    &#125;, &#123;</span><br><span class="line">        arr1: [<span class="keyword">new</span> <span class="built_in">Date</span>()],</span><br><span class="line">        arr2: [&#123;&#125;],</span><br><span class="line">        expect: <span class="literal">false</span></span><br><span class="line">    &#125;, &#123;</span><br><span class="line">        arr1: [<span class="built_in">window</span>],</span><br><span class="line">        arr2: [&#123;&#125;],</span><br><span class="line">        expect: <span class="literal">false</span></span><br><span class="line">    &#125;, &#123;</span><br><span class="line">        arr1: [<span class="literal">undefined</span>, <span class="number">1</span>],</span><br><span class="line">        arr2: [<span class="literal">null</span>, <span class="number">2</span>],</span><br><span class="line">        expect: <span class="literal">false</span></span><br><span class="line">    &#125;, &#123;</span><br><span class="line">        arr1: [<span class="keyword">new</span> <span class="built_in">Object</span>, <span class="keyword">new</span> <span class="built_in">Object</span>, <span class="keyword">new</span> <span class="built_in">Object</span>],</span><br><span class="line">        arr2: [&#123;&#125;, &#123;&#125;,</span><br><span class="line">            <span class="literal">null</span></span><br><span class="line">        ],</span><br><span class="line">        expect: <span class="literal">false</span></span><br><span class="line">    &#125;, &#123;</span><br><span class="line">        arr1: <span class="literal">null</span>,</span><br><span class="line">        arr2: <span class="literal">null</span>,</span><br><span class="line">        expect: <span class="literal">false</span></span><br><span class="line">    &#125;, &#123;</span><br><span class="line">        arr1: [],</span><br><span class="line">        arr2: <span class="literal">undefined</span>,</span><br><span class="line">        expect: <span class="literal">false</span></span><br><span class="line">    &#125;, &#123;</span><br><span class="line">        arr1: <span class="string">"abc"</span>,</span><br><span class="line">        arr2: <span class="string">"cba"</span>,</span><br><span class="line">        expect: <span class="literal">false</span></span><br><span class="line">    &#125;];</span><br><span class="line"></span><br><span class="line">    <span class="comment">//使用for循环, 通过arraysSimilar函数验证以上数据是否相似，如相似显示“通过”,否则"不通过",所以大家要完成arraysSimilar函数,具体要求，详见任务要求。    </span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; cases.length; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (arraysSimilar(cases[i].arr1, cases[i].arr2) !== cases[i].expect) &#123;</span><br><span class="line">            <span class="built_in">document</span>.write(<span class="string">"不通过！case"</span> + (i + <span class="number">1</span>) + <span class="string">"不正确！arr1="</span> + <span class="built_in">JSON</span>.stringify(cases[i].arr1) + <span class="string">", arr2="</span> + <span class="built_in">JSON</span>.stringify(cases[i].arr2) + <span class="string">" 的判断结果不是"</span> + cases[i].expect);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">&#125;();</span><br><span class="line"><span class="built_in">document</span>.write(<span class="string">"判定结果:"</span> + (result ? <span class="string">"通过"</span> : <span class="string">"不通过"</span>));</span><br></pre></td></tr></table></figure><hr><h2 id="解答"><a href="#解答" class="headerlink" title="解答"></a>解答</h2><p>各位读者在看解答前也可以自己考虑一下，看看咱们的想法是否一致，期待您在本文的留言。</p><hr><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>通过观察测试用例，可以发现，最后三个用例有不是数组的。所以我们可以先判断传入的参数是否是数组。<br>又因为题目中要求数组长度必须一致，这也是第二个限制条件。<br>最后再区分具体的类型。   </p><p>理清思路我们可以分为以下步骤：   </p><ol><li>判断传入的参数是否为数组 (使用 <code>instanceof</code> 方法)</li><li>检查两个数组长度是否一致</li><li>分别判断数组内元素的基本数据类型 (使用 <code>typeof</code> 方法)</li><li>因为 <code>typeof</code> 只能检查基本数据类型，对于 <code>null</code>, <code>Date</code>, <code>window</code> 返回的都是 <code>object</code>，所以使用 <code>Object.prototype.toString.apply()</code> 来检查这些对象类型，其返回值为：<code>&#39;[object Null]&#39;</code>, <code>&#39;[object Date]&#39;</code>, <code>&#39;[object global]&#39;</code></li><li>分别比较每个数组内元素的各种类型的个数，如果都相等，那么这两个数组是相似的。</li></ol><h3 id="具体实现代码"><a href="#具体实现代码" class="headerlink" title="具体实现代码"></a>具体实现代码</h3><p>JavaScript代码如下</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * =====================================================</span></span><br><span class="line"><span class="comment"> * 请在index.html文件中，编写arraysSimilar函数，实现判断传入的两个数组是否相似。具体需求：</span></span><br><span class="line"><span class="comment"> * 1. 数组中的成员类型相同，顺序可以不同。例如[1, true] 与 [false, 2]是相似的。</span></span><br><span class="line"><span class="comment"> * 2. 数组的长度一致。</span></span><br><span class="line"><span class="comment"> * 3. 类型的判断范围，需要区分:String, Boolean, Number, undefined, null, 函数，日期, window.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 当以上全部满足，则返回"判定结果:通过"，否则返回"判定结果:不通过"。</span></span><br><span class="line"><span class="comment"> * =====================================================</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* param1 Array</span></span><br><span class="line"><span class="comment">* param2 Array</span></span><br><span class="line"><span class="comment">* return true or false</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">arraysSimilar</span>(<span class="params">arr1, arr2</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (arr1 <span class="keyword">instanceof</span> <span class="built_in">Array</span> &amp;&amp; arr2 <span class="keyword">instanceof</span> <span class="built_in">Array</span> ) &#123;    <span class="comment">//先判断传入的是否是数组</span></span><br><span class="line">        <span class="keyword">if</span> (arr1.length == arr2.length) &#123;                    <span class="comment">//判断数组长度</span></span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">"same-length"</span>);</span><br><span class="line">            <span class="built_in">console</span>.log(arr1);</span><br><span class="line">            <span class="built_in">console</span>.log(arr2);</span><br><span class="line">            <span class="comment">//开始判断数组内部是否相似</span></span><br><span class="line">            <span class="keyword">return</span> sameLengthArraysSimilar(arr1, arr2);</span><br><span class="line">        &#125; <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="comment">//两个数组长度不同返回false</span></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">//传入的参数不是数组返回false</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 判断两个等长的数组内部是否相似</span></span><br><span class="line"><span class="comment"> * 遍历数组</span></span><br><span class="line"><span class="comment"> * arr1中元素各种类型出现的个数是否和arr2中元素各种类型出现的个数相同</span></span><br><span class="line"><span class="comment"> * @param  &#123;Array&#125; arr1 数组1</span></span><br><span class="line"><span class="comment"> * @param  &#123;Array&#125; arr2 数组2</span></span><br><span class="line"><span class="comment"> * @return &#123;true,false&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sameLengthArraysSimilar</span>(<span class="params">arr1,arr2</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> numInArr1 = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">var</span> numInArr2 = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">var</span> booleanInArr1 = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">var</span> booleanInArr2 = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">var</span> funInArr1 = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">var</span> funInArr2 = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">var</span> undefinedInArr1 = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">var</span> undefinedInArr2 = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">var</span> stringInArr1 = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">var</span> stringInArr2 = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">var</span> nullInArr1 = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">var</span> nullInArr2 = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">var</span> dateInArr1 = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">var</span> dateInArr2 = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">var</span> windowInArr1 = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">var</span> windowInArr2 = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; arr1.length; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">typeof</span> arr1[i] === <span class="string">'number'</span> )&#123;</span><br><span class="line">            numInArr1 ++;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span>(<span class="keyword">typeof</span> arr1[i] === <span class="string">'boolean'</span>)&#123;</span><br><span class="line">            booleanInArr1 ++;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span>(<span class="keyword">typeof</span> arr1[i] === <span class="string">'function'</span>)&#123;</span><br><span class="line">            funInArr1 ++;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span>(<span class="keyword">typeof</span> arr1[i] === <span class="string">'undefined'</span>)&#123;</span><br><span class="line">            undefinedInArr1 ++;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span>(<span class="keyword">typeof</span> arr1[i] === <span class="string">'string'</span>)&#123;</span><br><span class="line">            stringInArr1 ++;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span>(<span class="keyword">typeof</span> arr1[i] ===<span class="string">'object'</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(<span class="built_in">Object</span>.prototype.toString.apply(arr1[i]) === <span class="string">'[object Null]'</span>)&#123;</span><br><span class="line">                nullInArr1 ++;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span>(<span class="built_in">Object</span>.prototype.toString.apply(arr1[i]) === <span class="string">'[object Date]'</span>)&#123;</span><br><span class="line">                dateInArr1 ++;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span>(<span class="built_in">Object</span>.prototype.toString.apply(arr1[i]) === <span class="string">'[object global]'</span>)&#123;</span><br><span class="line">                windowInArr1 ++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">typeof</span> arr2[i] === <span class="string">'number'</span>)&#123;</span><br><span class="line">            numInArr2 ++;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span>(<span class="keyword">typeof</span> arr2[i] === <span class="string">'boolean'</span>)&#123;</span><br><span class="line">            booleanInArr2 ++;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span>(<span class="keyword">typeof</span> arr2[i] === <span class="string">'function'</span>)&#123;</span><br><span class="line">            funInArr2 ++;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span>(<span class="keyword">typeof</span> arr2[i] === <span class="string">'undefined'</span>)&#123;</span><br><span class="line">            undefinedInArr2 ++;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span>(<span class="keyword">typeof</span> arr2[i] === <span class="string">'string'</span>)&#123;</span><br><span class="line">            stringInArr2 ++;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span>(<span class="keyword">typeof</span> arr2[i] ===<span class="string">'object'</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(<span class="built_in">Object</span>.prototype.toString.apply(arr2[i]) === <span class="string">'[object Null]'</span>)&#123;</span><br><span class="line">                nullInArr2 ++;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span>(<span class="built_in">Object</span>.prototype.toString.apply(arr2[i]) === <span class="string">'[object Date]'</span>)&#123;</span><br><span class="line">                dateInArr2 ++;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span>(<span class="built_in">Object</span>.prototype.toString.apply(arr2[i]) === <span class="string">'[object global]'</span>)&#123;</span><br><span class="line">                windowInArr2 ++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"num---"</span>+numInArr1);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"num---"</span>+numInArr2);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"boo---"</span>+booleanInArr1);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"boo---"</span>+booleanInArr2);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"null---"</span>+nullInArr1);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"null---"</span>+nullInArr2);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"window---"</span>+windowInArr1);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"window---"</span>+windowInArr2);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"date---"</span>+dateInArr1);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"date---"</span>+dateInArr2);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"string---"</span>+stringInArr1);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"string---"</span>+stringInArr2);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"fun---"</span>+funInArr1);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"fun---"</span>+funInArr2);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"undefined---"</span>+undefinedInArr1);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"undefined---"</span>+undefinedInArr2);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(numInArr1 == numInArr2 &amp;&amp; booleanInArr1==booleanInArr2 &amp;&amp; funInArr1==funInArr2 &amp;&amp; undefinedInArr1==undefinedInArr2 &amp;&amp; stringInArr1==stringInArr2 &amp;&amp; nullInArr1==nullInArr2 &amp;&amp; dateInArr1==dateInArr2 &amp;&amp; windowInArr1==windowInArr2)&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'================================true'</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'================================false'</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul><li>上述代码完美的跑完所有的测试用例，读者 <a href="http://gaohaoyang.github.io/javascript-test/arraysSimilar/" target="_blank" rel="noopener">点击这里查看结果</a>，并且可以按 <code>f12</code> 看 Console 信息， 里面有代码的执行过程。  </li><li>当然你也可以复制本文的 JavaScript 代码，在 <a href="http://imooc.com/code/5760" target="_blank" rel="noopener">慕课网的习题</a> 下跑一下，也可以看到 <code>判定结果:通过</code> 的结果</li><li>完整源代码在我的 GitHub <a href="https://github.com/Gaohaoyang/javascript-test/tree/master/arraysSimilar" target="_blank" rel="noopener">javascript-test/arraysSimilar/</a> 仓库中   </li><li>其实我的代码逻辑并不复杂，有点<strong>空间换时间</strong>的感觉，执行效率应该是较高的。没有用 JavaScript 封装的任何函数，完全是自己写的。其实代码除去 <code>console.log()</code> 也并没有多少行。</li><li>各位读者有什么好的想法欢迎留言交流！</li></ul>]]></content>
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> 慕课网 </tag>
            
            <tag> Array </tag>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>代码校验工具 SublimeLinter 的安装与使用</title>
      <link href="//2015/sublimeLinter.html"/>
      <url>//2015/sublimeLinter.html</url>
      <content type="html"><![CDATA[<p>本文我将讲述一下 SublimeLinter 的安装过程。其组件 jshint 的安装与使用。其组件 csslint 的安装与使用。我将基于 <a href="http://sublimetext.com/3" target="_blank" rel="noopener">Sublime Text 3</a> 来安装。使用 Sublime Text 2 的用户阅读本文是没有帮助的。</p><p>SublimeLinter 是 Sublime 的插件，它的作用是检查代码语法是否有错误，并提示。习惯了 IDE 下写代码的人一定需要一款在 Sublime 上类似的语法检查工具。下面我们开始。   </p><a id="more"></a><h2 id="安装-SublimeLinter"><a href="#安装-SublimeLinter" class="headerlink" title="安装 SublimeLinter"></a>安装 SublimeLinter</h2><p>如同其他插件一样使用 Package Control 来安装。   </p><ol><li>按下 <code>Ctrl+Shift+p</code> 进入 Command Palette   </li><li>输入<code>install</code>进入 Package Control: Install Package   </li><li>输入<code>SublimeLinter</code>。进行安装.   </li></ol><p><img src="http://7q5cdt.com1.z0.glb.clouddn.com/SublimeLinter-sublimeLinter.jpg" alt="SublimeLinter">   </p><p>安装完成后可以看到这样一段话：   </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">Welcome to SublimeLinter, a linter framework for Sublime Text 3.</span><br><span class="line"></span><br><span class="line">                  * * * IMPORTANT! * * *</span><br><span class="line"></span><br><span class="line">         SublimeLinter 3 is NOT a drop-in replacement for</span><br><span class="line">        earlier versions.</span><br><span class="line"></span><br><span class="line">         Linters *NOT* included with SublimeLinter 3,</span><br><span class="line">         they must be installed separately.</span><br><span class="line"></span><br><span class="line">         The settings are different.</span><br><span class="line"></span><br><span class="line">                 * * * READ THE DOCS! * * *</span><br><span class="line"></span><br><span class="line"> Otherwise you will never know how to install linters, nor will</span><br><span class="line"> you know about all of the great new features in SublimeLinter 3.</span><br><span class="line"></span><br><span class="line"> For complete documentation on how to install and use SublimeLinter,</span><br><span class="line"> please see:</span><br><span class="line"></span><br><span class="line"> http://www.sublimelinter.com</span><br></pre></td></tr></table></figure><p>可以看到具体的 Linters 组件<strong>不</strong>被包含在 SublimeLinter 3 中，所以我们要额外独立安装组件。<br>可以针对不同的语言安装不同的组件。   </p><h2 id="JavaScript-语法检查"><a href="#JavaScript-语法检查" class="headerlink" title="JavaScript 语法检查"></a>JavaScript 语法检查</h2><p>SublimeLinter-jshint 是基于 nodeJS 下的 jshint 的插件，实际上 SublimeLinter-jshint 调用了 nodeJS 中 jshint 的接口来进行语法检查的。   </p><hr><h3 id="安装-SublimeLinter-jshint"><a href="#安装-SublimeLinter-jshint" class="headerlink" title="安装 SublimeLinter-jshint"></a>安装 SublimeLinter-jshint</h3><p>为了让 JavaScript 代码有语法检查，我们安装 SublimeLinter-jshint<br>同样的方法，我们安装 SublimeLinter-jshint    </p><ol><li>按下 <code>Ctrl+Shift+p</code> 进入 Command Palette   </li><li>输入<code>install</code>进入 Package Control: Install Package   </li><li>输入<code>SublimeLinter-jshint</code>。进行安装.   </li></ol><p>如下图   </p><p><img src="http://7q5cdt.com1.z0.glb.clouddn.com/SublimeLinter-jshint.jpg" alt="SublimeLinter-jshint">   </p><p>安装完成后我们可以看到下面的一段话   </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">SublimeLinter-jshint</span><br><span class="line">  -------------------------------</span><br><span class="line">  This linter plugin for SublimeLinter provides an interface to jshint.</span><br><span class="line"></span><br><span class="line">  ** IMPORTANT! **</span><br><span class="line"></span><br><span class="line">  Before this plugin will activate, you *must*</span><br><span class="line">  follow the installation instructions here:</span><br><span class="line"></span><br><span class="line">  https://github.com/SublimeLinter/SublimeLinter-jshint</span><br></pre></td></tr></table></figure><h3 id="安装-nodeJS-和-jshint"><a href="#安装-nodeJS-和-jshint" class="headerlink" title="安装 nodeJS 和 jshint"></a>安装 nodeJS 和 jshint</h3><p>在插件开始工作之前，我们必须再看一下上述插件的<a href="https://github.com/SublimeLinter/SublimeLinter-jshint" target="_blank" rel="noopener">安装说明</a><br>通过 <a href="https://github.com/SublimeLinter/SublimeLinter-jshint" target="_blank" rel="noopener">SublimeLinter-jshint 的说明</a> 我们可以看到，这个组件依赖于 nodeJS 下的 jshint，所以我们安装 nodeJS 环境和 nodeJS 下的 jshint。   </p><ol><li>安装 <a href="https://nodejs.org/" target="_blank" rel="noopener">Node.js</a>   </li><li>通过 npm 安装<code>jshint</code>   </li></ol><p>在命令行下输入如下代码，完成安装   </p><pre><code>npm install -g jshint</code></pre><p>安装完成后命令行中出现如下的信息   </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">C:\Users\Administrator\AppData\Roaming\npm\jshint -&gt; C:\Users\Administrator\AppData\Roaming\npm\node_modules\jshint\bin\jshint</span><br><span class="line">jshint@2.6.3 C:\Users\Administrator\AppData\Roaming\npm\node_modules\jshint</span><br><span class="line">├── strip-json-comments@1.0.2</span><br><span class="line">├── underscore@1.6.0</span><br><span class="line">├── exit@0.1.2</span><br><span class="line">├── shelljs@0.3.0</span><br><span class="line">├── console-browserify@1.1.0 (date-now@0.1.4)</span><br><span class="line">├── htmlparser2@3.8.2 (domelementtype@1.3.0, entities@1.0.0, domhandler@2.3.0, readable-stream@1.1.13, domutils@1.5.1)</span><br><span class="line">├── minimatch@1.0.0 (sigmund@1.0.0, lru-cache@2.5.0)</span><br><span class="line">└── cli@0.6.6 (glob@3.2.11)</span><br></pre></td></tr></table></figure><p>可以查看 jshint 版本，已确认安装完成。  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">C:\Users\Administrator&gt;jshint -v</span><br><span class="line">jshint v2.6.3</span><br></pre></td></tr></table></figure><p>现在，恭喜你，我们使用 Sublime 编辑 JavaScript 文件，就会有语法检查了！   </p><p>在编辑过程中，会有如下提示   </p><p><img src="http://7q5cdt.com1.z0.glb.clouddn.com/SublimeLinter-jshint-test.jpg" alt="SublimeLinter-jshint-test"></p><p>点击提示点后，Sublime 状态栏也会有相应的说明   </p><p><img src="http://7q5cdt.com1.z0.glb.clouddn.com/SublimeLinter-jshint-test2.jpg" alt="SublimeLinter-jshint-test2"></p><h2 id="css-语法检查"><a href="#css-语法检查" class="headerlink" title="css 语法检查"></a>css 语法检查</h2><p>与 jshint 同理，SublimeLinter-csslint 也是基于 nodeJS 下的 csslint 的插件，实际上 SublimeLinter-csslint 调用了 nodeJS 中 csslint 的接口来进行语法检查的。   </p><hr><h3 id="安装-SublimeLinter-csslint"><a href="#安装-SublimeLinter-csslint" class="headerlink" title="安装 SublimeLinter-csslint"></a>安装 SublimeLinter-csslint</h3><p>同样的方法。   </p><ol><li>按下 <code>Ctrl+Shift+p</code> 进入 Command Palette   </li><li>输入<code>install</code>进入 Package Control: Install Package   </li><li>输入<code>SublimeLinter-csslint</code>。进行安装.   </li></ol><p>如下图   </p><p><img src="http://7q5cdt.com1.z0.glb.clouddn.com/SublimeLinter-csslint.jpg" alt="SublimeLinter-csslint">   </p><p>安装完成后我们可以看到下面的一段话   </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">SublimeLinter-csslint</span><br><span class="line">-------------------------------</span><br><span class="line">This linter plugin for SublimeLinter provides an interface to csslint.</span><br><span class="line"></span><br><span class="line">** IMPORTANT! **</span><br><span class="line"></span><br><span class="line">Before this plugin will activate, you *must*</span><br><span class="line">follow the installation instructions here:</span><br><span class="line"></span><br><span class="line">https://github.com/SublimeLinter/SublimeLinter-csslint</span><br></pre></td></tr></table></figure><p>在使用插件之前，必须遵循上述网址中的<a href="https://github.com/SublimeLinter/SublimeLinter-csslint" target="_blank" rel="noopener">安装说明</a>   </p><h3 id="在-nodeJS-下安装-csslint"><a href="#在-nodeJS-下安装-csslint" class="headerlink" title="在 nodeJS 下安装 csslint"></a>在 nodeJS 下安装 csslint</h3><p>进入上述的 GitHub 地址，csslint 的说明页。我们知道了和 jshint 一样，csslint 也是基于 nodeJS 下的 csslint 来使用的。   </p><p>这里安装 nodeJS 过程省略。<br>只需用 npm 安装 csslint 即可。   </p><p>在命令行中输入     </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g csslint</span><br></pre></td></tr></table></figure><p>安装完成后命令行中出现如下的信息     </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">C:\Users\Administrator\AppData\Roaming\npm\csslint -&gt; C:\Users\Administrator\AppData\Roaming\npm\node_modules\csslint\cli.js</span><br><span class="line">csslint@0.10.0 C:\Users\Administrator\AppData\Roaming\npm\node_modules\csslint</span><br><span class="line">└── parserlib@0.2.5</span><br></pre></td></tr></table></figure><p>可以查看 csslint 版本，已确认安装完成。   </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">C:\Users\Administrator&gt;csslint --version</span><br><span class="line">v0.10.0</span><br></pre></td></tr></table></figure><p>现在，恭喜你，我们使用 Sublime 编辑 css 文件，就会有语法检查了！     </p><p>在编辑过程中，会有如下提示   </p><p><img src="http://7q5cdt.com1.z0.glb.clouddn.com/SublimeLinter-csslint-test.jpg" alt="SublimeLinter-csslint-test"></p><p>点击提示点后，Sublime 状态栏也会有相应的说明   </p><p><img src="http://7q5cdt.com1.z0.glb.clouddn.com/SublimeLinter-csslint-test2.jpg" alt="SublimeLinter-csslint-test2"></p>]]></content>
      
      <categories>
          
          <category> Sublime </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Sublime </tag>
            
            <tag> jshint </tag>
            
            <tag> csslint </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>沥青混合料级配优选参数SSC</title>
      <link href="//2015/%E6%B2%A5%E9%9D%92%E6%B7%B7%E5%90%88%E6%96%99%E7%BA%A7%E9%85%8D%E4%BC%98%E9%80%89%E5%8F%82%E6%95%B0SSC.html"/>
      <url>//2015/%E6%B2%A5%E9%9D%92%E6%B7%B7%E5%90%88%E6%96%99%E7%BA%A7%E9%85%8D%E4%BC%98%E9%80%89%E5%8F%82%E6%95%B0SSC.html</url>
      <content type="html"><![CDATA[<p>根据美国NCHRP 第386 号项目的研究成果, 沥青混合料的级配优选可以采用混合料中的集料嵌挤状况来进行评价。本次研究借鉴了这一研究成果, 主要考察了表征<strong>ATB-25</strong>混合料中粗集料嵌挤状况的参数<code>SSC</code>, 对于SSC大于<strong>80%</strong>的级配可以认为沥青混合料中的粗集料嵌挤状况是比较理想的。</p><p>这种分析方法首先测定矿料混合料中<strong>13.2mm</strong>以上集料的捣实密度<strong>Dca</strong> , 基本公式如下:</p><p>$$<br>Dac =\frac{(A-b)}{C}<br>$$</p><p>式中, Dca 为粗集料捣实密度; A 为粗集料+干捣容器重;B 为干捣容器重; C 为干捣容器体积, 并且计算各级配混合料中13.2mm 以上颗粒的密度Dcm<br> <a id="more"></a><br>$$<br>Dcm = (Gmb*dw).(1-Ac).R<br>$$</p><p>式中, Dcm 为混合料粗集料密度; Gmb 为试件毛体积密度; dw 为水的密度; AC 为沥青用量; R 为粗集料通过百分比。</p><p>再根据粗集料捣实密度Dca 和混合料粗集料密度Dcm计算ATB25 混合料中粗集料嵌挤状况的参数SSC</p><p>$$<br>SSC=\frac{Dcm}{Dca}*100<br>$$</p><p>式中, SSC 为混合料中粗集料嵌挤状况的量度; Dcm 为混合料粗集料密度; Dca 为粗集料捣实密度。试验结果如下：</p><table><thead><tr><th>级配</th><th>Dca,13.2以上粗集料捣实松方密度</th><th>沥青用量</th><th>混合料毛体积密度</th><th>粗集料13.2通过率</th><th>Dcm,混合料中粗集料密度</th><th>SSC,%</th><th>要求</th></tr></thead><tbody><tr><td>1</td><td>1.299</td><td>4.31</td><td>2.508</td><td>43.2</td><td>1.03676</td><td>79.812</td><td>&gt;80</td></tr><tr><td>2</td><td>1.388</td><td>3.75</td><td>2.575</td><td>47.1</td><td>1.16734</td><td>84.103</td><td>&gt;80</td></tr><tr><td>3</td><td>1.386</td><td>3.57</td><td>2.603</td><td>50.8</td><td>1.27512</td><td>92.066</td><td>&gt;80</td></tr></tbody></table><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">试验结果中可以看出, 中级配2 号级配和细级配3 号级配能够满足设计要求.</span><br></pre></td></tr></table></figure><hr>]]></content>
      
      <categories>
          
          <category> 沥青混合料 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 级配 </tag>
            
            <tag> 沥青混合料 </tag>
            
            <tag> 配合比 </tag>
            
            <tag> SSC </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>沥青混合料贝雷参数与VMA模型建立</title>
      <link href="//2013/%E6%B2%A5%E9%9D%92%E6%B7%B7%E5%90%88%E6%96%99%E8%B4%9D%E9%9B%B7%E5%8F%82%E6%95%B0%E4%B8%8EVMA%E6%A8%A1%E5%9E%8B%E5%BB%BA%E7%AB%8B.html"/>
      <url>//2013/%E6%B2%A5%E9%9D%92%E6%B7%B7%E5%90%88%E6%96%99%E8%B4%9D%E9%9B%B7%E5%8F%82%E6%95%B0%E4%B8%8EVMA%E6%A8%A1%E5%9E%8B%E5%BB%BA%E7%AB%8B.html</url>
      <content type="html"><![CDATA[<h2 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h2><p>公路沥青混合料配合比设计中矿料间隙率（VMA）是一项非常重要的技术指标，现行规范对不同类型的沥青混合料提出了最小VMA值要求，本文通过近年热门的沥青混合料级配选定方法-贝雷法，结合我司在福建省建设的8条相同结构层的高速公路路面工程，提取其中一层配合比设计的VMA参数与其对应级配线通过计算贝雷参数CA、Fac和Faf，应用SPSS统计软件进行回归预测模型的建立。通过新建项目对该模型进行验证并评估应用价值。</p><h2 id="贝雷法概述"><a href="#贝雷法概述" class="headerlink" title="贝雷法概述"></a>贝雷法概述</h2><p>贝雷法是由美国伊利诺州交通部的RobertD.Bailey发明的一种确定沥青混合料级配的方法，其的主要设计思想是：粗集料相互嵌挤所形成的空隙由细集料来填充，这些集料即相互嵌挤形成次级骨架，同时又形成更小一级的空隙结构，这又需要更细的集料来填充，这样逐级填充，从而形成多级嵌挤结构。 贝雷法的数学模型是平面圆，也即将集料的形状假设为圆，再平面化。粗细集料分界点就成为级配设计的出发点。当三个圆球相互嵌挤，接触面分别是球面或平面时贝雷分析了四种可能的组合，所形成的空隙率分别是圆直径的0.15、0.20、0.24、0.29倍。贝雷法取其平均值以最大公称尺寸（D）的0.22倍对应的筛孔孔径作为混合料中粗细集料的分界点,大于分界点的集料是粗集料，小于分界点的集料是细集料，同样，细集料也按照此原理分成细集料中的粗集料与细集料中的细集料，并形成依次的填充状态。</p><h2 id="贝雷参数确定"><a href="#贝雷参数确定" class="headerlink" title="贝雷参数确定"></a>贝雷参数确定</h2><p>以沈海复线高速公司莆田B1合同段ATB-25柔性基层沥青路面为例，粗细集料分档分别为19-26.5：9.5-19：4.75-9.5：0-4.75：矿粉=18：36：14：30：2，其设计级配如表所示。</p><table><thead><tr><th>参数</th><th>31.5</th><th>26.5</th><th>16</th><th>13.2</th><th>9.5</th><th>4.75</th><th>2.36</th><th>1.18</th><th>0.6</th><th>0.3</th><th>0.15</th><th>0.075</th></tr></thead><tbody><tr><td>设计级配</td><td>100</td><td>94.5</td><td>73.3</td><td>59.7</td><td>52.4</td><td>44.1</td><td>29.7</td><td>20.5</td><td>15.6</td><td>10.8</td><td>7.9</td><td>6.0</td></tr><tr><td>上限</td><td>100</td><td>100</td><td>80</td><td>62</td><td>52</td><td>40</td><td>32</td><td>25</td><td>18</td><td>14</td><td>10</td><td>6</td></tr><tr><td>下限</td><td>90</td><td>60</td><td>48</td><td>42</td><td>32</td><td>20</td><td>15</td><td>10</td><td>8</td><td>5</td><td>3</td><td>2</td></tr></tbody></table><a id="more"></a><p>由设计级配表得公称最大粒径（ NMPS）为26.5mm，通过0.22倍的因子计算级配控制点得相应通过率见下表（<code>级配控制点汇总表</code>）。</p><table><thead><tr><th>级配控制点</th><th>计算筛孔（mm）</th><th>套用筛孔（mm）</th><th>通过率（%）</th></tr></thead><tbody><tr><td>NMPS</td><td>26.5</td><td>26.5</td><td>94.5</td></tr><tr><td>NMPS/2</td><td>13.2</td><td>13.2</td><td>52.4</td></tr><tr><td>PCS</td><td>5.83</td><td>4.75</td><td>29.7</td></tr><tr><td>SCS</td><td>1.05</td><td>1.18</td><td>15.6</td></tr><tr><td>TCS</td><td>0.26</td><td>0.3</td><td>7.9</td></tr></tbody></table><ul><li><p>粗细集料的分界点（PCS）PCS=NMPS<em>0.22=26.5</em>0.22=5.83≈4.75mm<br><code>式中：PCS为第一控制筛孔，粗细集料分界筛孔。</code></p></li><li><p>细集料的分界点（SCS、TCS）<br>SCS=PCS<em>0.22=4.75</em>0.22=1.05≈1.18mm；TCS=SCS<em>0.22=1.18</em>0.22=0.26≈0.3mm<br><code>式中：SCS为第二控制筛孔，TCS为第三控制筛孔。</code></p></li></ul><h2 id="检验参数计算"><a href="#检验参数计算" class="headerlink" title="检验参数计算"></a>检验参数计算</h2><ol><li><strong>CA比</strong>： </li></ol><p>$$<br>  CA=\frac{P_{NMPS/2}-P_{PCS}}{100-P_{NMPS/2}}=0.486<br>$$</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">式中:  为第一控制筛孔的通过率，%。 为最大公称粒径一半的通过率，%。</span><br></pre></td></tr></table></figure><ol start="2"><li><strong>FAc比</strong>：</li></ol><p>$$<br>F_{ac}=\frac{P_{Scs}}{P_{Pcs}}=0.525<br>$$</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">式中:  为第二控制筛孔的通过率，%。</span><br></pre></td></tr></table></figure><ol start="3"><li><strong>FAf比</strong>：</li></ol><p>$$<br>F_{af}=\frac{P_{Tcs}}{P_{Scs}}=0.506<br>$$</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">式中:  为第三控制筛孔的通过率，%。</span><br></pre></td></tr></table></figure><blockquote><p>以上计算参数参考李安，何昌轩，陈李锋《密级配沥青稳定碎石混合料性能研究》一文对ATB-25柔性基层相关贝雷参数范围的研究，参考范围见表3合成级配检验参数表。</p></blockquote><h2 id="VMA与贝雷参数预测模型建立"><a href="#VMA与贝雷参数预测模型建立" class="headerlink" title="VMA与贝雷参数预测模型建立"></a>VMA与贝雷参数预测模型建立</h2><p>本文笔者通过福建省8条高速公路采用ATB-25柔性基层沥青路面目标配合比选用的3条线级配线进行分析，并计算CA、FAc、FAf参数以及通过马氏试验计算出VMA<code>如下表4</code>所示。</p><table><thead><tr><th>项目</th><th>级配线</th><th>31.5</th><th>13.2</th><th>4.75</th><th>1.18</th><th>0.3</th><th>CA</th><th>FAc</th><th>Faf</th><th>VMA</th></tr></thead><tbody><tr><td>福泉高速</td><td>1#</td><td>100</td><td>56.4</td><td>35</td><td>21.5</td><td>9.6</td><td>0.491</td><td>0.614</td><td>0.447</td><td>12.7</td></tr><tr><td>福泉高速</td><td>2#</td><td>100</td><td>50.1</td><td>29.9</td><td>18.5</td><td>8.6</td><td>0.405</td><td>0.619</td><td>0.465</td><td>12.5</td></tr><tr><td>福泉高速</td><td>3#</td><td>100</td><td>45.2</td><td>24.9</td><td>15.6</td><td>7.6</td><td>0.37</td><td>0.627</td><td>0.487</td><td>12.6</td></tr><tr><td>龙长高速</td><td>1#</td><td>100</td><td>58.2</td><td>33.8</td><td>20.4</td><td>10.5</td><td>0.584</td><td>0.604</td><td>0.515</td><td>12.9</td></tr><tr><td>龙长高速</td><td>2#</td><td>100</td><td>53.7</td><td>30.9</td><td>18.8</td><td>9.7</td><td>0.492</td><td>0.608</td><td>0.516</td><td>13.1</td></tr><tr><td>龙长高速</td><td>3#</td><td>100</td><td>50.8</td><td>27</td><td>16.6</td><td>8.6</td><td>0.484</td><td>0.615</td><td>0.518</td><td>13.6</td></tr><tr><td>宁武高速</td><td>1#</td><td>100</td><td>57.6</td><td>34.7</td><td>17.5</td><td>8.5</td><td>0.54</td><td>0.504</td><td>0.486</td><td>12.9</td></tr><tr><td>宁武高速</td><td>2#</td><td>100</td><td>52.6</td><td>29.9</td><td>15.3</td><td>7.7</td><td>0.479</td><td>0.512</td><td>0.503</td><td>13.2</td></tr><tr><td>宁武高速</td><td>3#</td><td>100</td><td>47.1</td><td>24</td><td>12.6</td><td>6.6</td><td>0.437</td><td>0.525</td><td>0.524</td><td>13.5</td></tr><tr><td>泉三高速</td><td>1#</td><td>100</td><td>57.7</td><td>34.4</td><td>17.3</td><td>7.9</td><td>0.551</td><td>0.503</td><td>0.457</td><td>13.4</td></tr><tr><td>泉三高速</td><td>2#</td><td>100</td><td>52.7</td><td>29.7</td><td>15</td><td>6.7</td><td>0.486</td><td>0.505</td><td>0.447</td><td>13.8</td></tr><tr><td>泉三高速</td><td>3#</td><td>100</td><td>47.8</td><td>25</td><td>13.5</td><td>6.3</td><td>0.437</td><td>0.54</td><td>0.467</td><td>13.4</td></tr><tr><td>泉夏高速</td><td>1#</td><td>100</td><td>58.1</td><td>36.7</td><td>19.8</td><td>10.4</td><td>0.511</td><td>0.54</td><td>0.525</td><td>12.4</td></tr><tr><td>泉夏高速</td><td>2#</td><td>100</td><td>50.7</td><td>28.9</td><td>15.5</td><td>8</td><td>0.442</td><td>0.536</td><td>0.516</td><td>13.4</td></tr><tr><td>泉夏高速</td><td>3#</td><td>100</td><td>46.4</td><td>25.1</td><td>13.3</td><td>6.9</td><td>0.397</td><td>0.53</td><td>0.519</td><td>13.7</td></tr><tr><td>绕城高速</td><td>1#</td><td>100</td><td>58.4</td><td>33.8</td><td>19.7</td><td>9.5</td><td>0.591</td><td>0.583</td><td>0.482</td><td>13</td></tr><tr><td>绕城高速</td><td>2#</td><td>100</td><td>52.7</td><td>29.2</td><td>17.3</td><td>8.8</td><td>0.497</td><td>0.593</td><td>0.509</td><td>13</td></tr><tr><td>绕城高速</td><td>3#</td><td>100</td><td>46.7</td><td>24.3</td><td>14.9</td><td>8</td><td>0.42</td><td>0.613</td><td>0.537</td><td>13.7</td></tr><tr><td>邵三高速</td><td>1#</td><td>100</td><td>58.2</td><td>33.8</td><td>20.4</td><td>10.5</td><td>0.584</td><td>0.604</td><td>0.515</td><td>12.9</td></tr><tr><td>邵三高速</td><td>2#</td><td>100</td><td>53.7</td><td>30.9</td><td>18.8</td><td>9.7</td><td>0.492</td><td>0.608</td><td>0.516</td><td>13.1</td></tr><tr><td>邵三高速</td><td>3#</td><td>100</td><td>50.8</td><td>27</td><td>16.6</td><td>8.6</td><td>0.484</td><td>0.615</td><td>0.518</td><td>13.4</td></tr><tr><td>永宁高速</td><td>1#</td><td>100</td><td>58.1</td><td>34.9</td><td>16.3</td><td>8.2</td><td>0.554</td><td>0.467</td><td>0.503</td><td>12.3</td></tr><tr><td>永宁高速</td><td>2#</td><td>100</td><td>53.9</td><td>31.1</td><td>14.6</td><td>7.4</td><td>0.495</td><td>0.47</td><td>0.507</td><td>12.8</td></tr><tr><td>永宁高速</td><td>3#</td><td>100</td><td>50.9</td><td>28.2</td><td>13.5</td><td>6.9</td><td>0.462</td><td>0.479</td><td>0.511</td><td>13.4</td></tr></tbody></table><p>影响VMA的因素有非常多，本文主要通过SPSS（Statistical Product and Service Solutions）统计软件建立贝雷参数与VMA的回归模型进行分析，检验预测模型的回归效果。通过实际应用检验回归预测模型的可行性。</p><p>通过SPSS非线性回归分析进行模型拟合，因变量为ＶＭＡ，采用Levenverg-Marquardt估计方法，设置平方和收敛性和参数收敛性同为1E-8，计算出迭代数为5.1时连续残差平方和之间的相对减少量最多为 SSCON = 1E-8系统停止运行，如表5所示。</p><p>模型公式：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ＶＭＡ=a+b*CA+c*FAC+d*FAF+e*CA*CA+f*FAC*FAC+g*FAF*FAF+h*CA*FAC+j*CA*FAF+i*FAC*FAF</span><br></pre></td></tr></table></figure></p><table><thead><tr><th>迭代数a</th><th>残差平方和</th><th>参数</th><th></th><th></th><th></th><th></th><th></th><th></th><th></th><th></th><th></th></tr></thead><tbody><tr><td>a</td><td>b</td><td>c</td><td>d</td><td>e</td><td>f</td><td>g</td><td>h</td><td>j</td><td>i</td><td></td><td></td></tr><tr><td>1</td><td>4130.71</td><td>0</td><td>0</td><td>0</td><td>0</td><td>0</td><td>0</td><td>0</td><td>0</td><td>0</td><td>0</td></tr><tr><td>1.1</td><td>2.034</td><td>9.008</td><td>11.493</td><td>2.41</td><td>5.956</td><td>-11.144</td><td>-27.776</td><td>0.02</td><td>30.581</td><td>-40.877</td><td>25.938</td></tr><tr><td>2</td><td>2.034</td><td>9.008</td><td>11.493</td><td>2.41</td><td>5.956</td><td>-11.144</td><td>-27.776</td><td>0.02</td><td>30.581</td><td>-40.877</td><td>25.938</td></tr><tr><td>2.1</td><td>0.757</td><td>17.531</td><td>32.642</td><td>-42.532</td><td>4.73</td><td>-9.511</td><td>-36.562</td><td>-12.172</td><td>55.723</td><td>-116.771</td><td>111.706</td></tr><tr><td>3</td><td>0.757</td><td>17.531</td><td>32.642</td><td>-42.532</td><td>4.73</td><td>-9.511</td><td>-36.562</td><td>-12.172</td><td>55.723</td><td>-116.771</td><td>111.706</td></tr><tr><td>3.1</td><td>0.278</td><td>53.193</td><td>22.598</td><td>-167.271</td><td>13.287</td><td>-6.244</td><td>23.752</td><td>-54.54</td><td>92.085</td><td>-146.134</td><td>193.089</td></tr><tr><td>4</td><td>0.278</td><td>53.193</td><td>22.598</td><td>-167.271</td><td>13.287</td><td>-6.244</td><td>23.752</td><td>-54.54</td><td>92.085</td><td>-146.134</td><td>193.089</td></tr><tr><td>4.1</td><td>0.264</td><td>64.096</td><td>15.966</td><td>-192.224</td><td>4.181</td><td>-4.69</td><td>36.498</td><td>-54.002</td><td>99.962</td><td>-145.145</td><td>207.1</td></tr><tr><td>5</td><td>0.264</td><td>64.096</td><td>15.966</td><td>-192.224</td><td>4.181</td><td>-4.69</td><td>36.498</td><td>-54.002</td><td>99.962</td><td>-145.145</td><td>207.1</td></tr><tr><td>5.1</td><td>0.264</td><td>64.094</td><td>15.966</td><td>-192.224</td><td>4.188</td><td>-4.691</td><td>36.498</td><td>-54.008</td><td>99.962</td><td>-145.146</td><td>207.1</td></tr></tbody></table><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">注：导数是通过数字计算的。 主迭代数在小数左侧显示，次迭代数在小数右侧显示。</span><br></pre></td></tr></table></figure><p>PSS统计参数评估值可以分析预测模型影响显著的变量有i、c和j，分别为FAc<em>FAf、FAC、CA</em>FAf，而影响不显著的变量有d,e分别为FAf和CA<em>CA（<code>见下表，未调整前参数估计值表</code>），模型的拟合优度检验结果显示Ｒ2为0.937，采用德宾-沃森统计量</em>(Durbin-Watson)检验残差是否存在自相关，其取值范围介于0~4之间，其值越接近2，说明变量之间是相互独立的, 本文拟合优度检验结果Durbin-Watson为２.689. </p><table><thead><tr><th>参数</th><th>估计</th><th>标准误</th><th>95% 置信区间下限</th><th>95% 置信区间上限</th></tr></thead><tbody><tr><td>a</td><td>64.096</td><td>20.952</td><td>19.159</td><td>109.033</td></tr><tr><td>b</td><td>15.966</td><td>17.448</td><td>-21.457</td><td>53.388</td></tr><tr><td>c</td><td>-192.224</td><td>30.409</td><td>-257.445</td><td>-127.002</td></tr><tr><td>d</td><td>4.181</td><td>66.03</td><td>-137.44</td><td>145.802</td></tr><tr><td>e</td><td>-4.69</td><td>7.986</td><td>-21.82</td><td>12.439</td></tr><tr><td>f</td><td>36.498</td><td>18.385</td><td>-2.933</td><td>75.929</td></tr><tr><td>g</td><td>-54.002</td><td>62.309</td><td>-187.641</td><td>79.637</td></tr><tr><td>h</td><td>99.962</td><td>13.49</td><td>71.029</td><td>128.895</td></tr><tr><td>j</td><td>-145.145</td><td>26.929</td><td>-202.902</td><td>-87.387</td></tr><tr><td>i</td><td>207.1</td><td>25.298</td><td>152.842</td><td>261.359</td></tr></tbody></table><p>笔者决定取消FAf和CA*CA变量并重新调整模型，应用SPSS得出参数估计值（见下表，调整后参数估计值表）。</p><table><thead><tr><th>参数</th><th>估计</th><th>标准误</th><th>95% 置信区间下限</th><th>95% 置信区间上限</th></tr></thead><tbody><tr><td>a</td><td>67.112</td><td>9.472</td><td>47.032</td><td>87.192</td></tr><tr><td>b</td><td>10.898</td><td>11.994</td><td>-14.528</td><td>36.324</td></tr><tr><td>c</td><td>-194.906</td><td>28.478</td><td>-255.276</td><td>-134.535</td></tr><tr><td>f</td><td>37.717</td><td>17.286</td><td>1.073</td><td>74.362</td></tr><tr><td>g</td><td>-50.027</td><td>18.199</td><td>-88.607</td><td>-11.446</td></tr><tr><td>h</td><td>101.346</td><td>12.455</td><td>74.942</td><td>127.751</td></tr><tr><td>j</td><td>-145.783</td><td>20.564</td><td>-189.377</td><td>-102.189</td></tr><tr><td>i</td><td>208.213</td><td>23.89</td><td>157.567</td><td>258.858</td></tr></tbody></table><p>模型公式为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ＶＭＡ＝a+b*CA+c*FAC+f*FAC*FAC+g*FAF*FAF+h*CA*FAC+j*CA*FAF+i*FAC*FAFgmf</span><br></pre></td></tr></table></figure><p>调整后模型的拟合优度检验结果显示Ｒ2为0.935，durbin－watson为2.514.说明线性拟合两种方法测量的关系是适合的, 试验数据的误差为随机误差,所得参数估计值的相关性见下<code>表</code>。</p><table><thead><tr><th></th><th>a</th><th>b</th><th>c</th><th>f</th><th>g</th><th>h</th><th>j</th><th>i</th></tr></thead><tbody><tr><td>a</td><td>1</td><td>-0.604</td><td>-0.952</td><td>0.789</td><td>-0.568</td><td>0.774</td><td>0.154</td><td>0.615</td></tr><tr><td>b</td><td>-0.604</td><td>1</td><td>0.333</td><td>-0.155</td><td>0.661</td><td>-0.519</td><td>-0.799</td><td>-0.275</td></tr><tr><td>c</td><td>-0.952</td><td>0.333</td><td>1</td><td>-0.884</td><td>0.411</td><td>-0.715</td><td>0.12</td><td>-0.612</td></tr><tr><td>f</td><td>0.789</td><td>-0.155</td><td>-0.884</td><td>1</td><td>-0.038</td><td>0.596</td><td>-0.239</td><td>0.21</td></tr><tr><td>g</td><td>-0.568</td><td>0.661</td><td>0.411</td><td>-0.038</td><td>1</td><td>-0.154</td><td>-0.652</td><td>-0.836</td></tr><tr><td>h</td><td>0.774</td><td>-0.519</td><td>-0.715</td><td>0.596</td><td>-0.154</td><td>1</td><td>-0.097</td><td>0.246</td></tr><tr><td>j</td><td>0.154</td><td>-0.799</td><td>0.12</td><td>-0.239</td><td>-0.652</td><td>-0.097</td><td>1</td><td>0.134</td></tr><tr><td>i</td><td>0.615</td><td>-0.275</td><td>-0.612</td><td>0.21</td><td>-0.836</td><td>0.246</td><td>0.134</td><td>1</td></tr></tbody></table><p>通过线性回归置性区间采用95%水平值进行方差Anova分析，回归模型F值为318.923, P 值为0.000, 因此笔者采用的这个回归模型是有统计学意义的, 系数检验的结果见下表（<a href="">Anova</a>检验表）。</p><table><thead><tr><th>模型</th><th>平方和</th><th>df</th><th>均方</th><th>F</th><th>Sig.</th><th></th></tr></thead><tbody><tr><td>1</td><td>回归</td><td>3.681</td><td>1</td><td>3.681</td><td>318.923</td><td>.000b</td></tr><tr><td>残差</td><td>0.254</td><td>22</td><td>0.012</td><td></td><td></td><td></td></tr><tr><td>总计</td><td>3.935</td><td>23</td><td></td><td></td><td></td></tr></tbody></table><p>根据回归预测模型，因变量VMA，自变量CA、FAC、FAC^2、FAf^2、CA<em>FAC、CA</em>FAf及FAC*FAf得出回归公式。<br>回归公式:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">VMA=67.112+10.898.CA-194.898.FAC+37.717.FAC^2-50.027.FAf^2+101.346.CA.FAC-145.783.CA.FAf+208.213.FAC.FAf</span><br></pre></td></tr></table></figure><blockquote><p>其中R2为0.935，通过案例诊断分析最小残差为-0.00193，预测值为12.9137，最大残差为-0.25949，预测值为13.5685。VMA的实际值和预测值结果诊断见下<code>表（案例诊断表）</code>。</p></blockquote><table><thead><tr><th>案例数目</th><th>标准残差</th><th>实际VMA</th><th>[预测VMA ]</th><th>残差</th></tr></thead><tbody><tr><td>1</td><td>-0.172</td><td>12.71</td><td>12.7266</td><td>-0.01851</td></tr><tr><td>2</td><td>-1.328</td><td>12.4</td><td>12.5395</td><td>-0.14268</td></tr><tr><td>3</td><td>0.93</td><td>12.73</td><td>12.6331</td><td>0.09986</td></tr><tr><td>4</td><td>-0.018</td><td>12.91</td><td>12.9137</td><td>[-0.00193]</td></tr><tr><td>5</td><td>1.152</td><td>13.22</td><td>13.1008</td><td>0.12373</td></tr><tr><td>6</td><td>-2.415</td><td>13.31</td><td>13.5685</td><td>[-0.25949]</td></tr><tr><td>7</td><td>-0.516</td><td>12.86</td><td>12.9137</td><td>-0.05542</td></tr><tr><td>8</td><td>-0.681</td><td>13.12</td><td>13.1944</td><td>-0.07311</td></tr><tr><td>9</td><td>-1.053</td><td>13.36</td><td>13.475</td><td>-0.11312</td></tr><tr><td>10</td><td>0.41</td><td>13.43</td><td>13.3814</td><td>0.044</td></tr><tr><td>11</td><td>0.497</td><td>13.81</td><td>13.7556</td><td>0.05341</td></tr><tr><td>12</td><td>0.032</td><td>13.38</td><td>13.3814</td><td>0.00345</td></tr><tr><td>13</td><td>0.698</td><td>12.52</td><td>12.446</td><td>0.07494</td></tr><tr><td>14</td><td>-0.569</td><td>13.32</td><td>13.3814</td><td>-0.06114</td></tr><tr><td>15</td><td>1.414</td><td>13.81</td><td>13.6621</td><td>0.15193</td></tr><tr><td>16</td><td>0.078</td><td>13.02</td><td>13.0073</td><td>0.00836</td></tr><tr><td>17</td><td>0.725</td><td>13.09</td><td>13.0073</td><td>0.07789</td></tr><tr><td>18</td><td>0.442</td><td>13.71</td><td>13.6621</td><td>0.04749</td></tr><tr><td>19</td><td>-0.018</td><td>12.91</td><td>12.9137</td><td>-0.00193</td></tr><tr><td>20</td><td>1.152</td><td>13.22</td><td>13.1008</td><td>0.12373</td></tr><tr><td>21</td><td>-0.674</td><td>13.31</td><td>13.3814</td><td>-0.0724</td></tr><tr><td>22</td><td>-1.386</td><td>12.2</td><td>12.3524</td><td>-0.14888</td></tr><tr><td>23</td><td>1.61</td><td>12.99</td><td>12.8202</td><td>0.17301</td></tr><tr><td>24</td><td>-0.309</td><td>13.35</td><td>13.3814</td><td>-0.0332</td></tr></tbody></table><p>从案例诊断表可以看出24组级配所预测的VMA与实际VMA均相差不大，回归方程为二次关系，回归效果显著可进行实际工程应用。</p><p>因此我们进行沥青混合料配合比设计时，通过选定的级配线计算出贝雷参数再通过回归模型计算出VMA的预测值，进行判断该级配VMA的预测值是否符合公路路面施工技术规范规定最小VMA要求。从而优化沥青混合料配合比设计过程。</p><h2 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h2><p>贝雷法在沥青混合料中的应用，使配合比设计级配的选定有了进一步的认识而更好的优化级配线，笔者建议先计算出CA、FAc、FAf三个参数后再根据已定级配线反算松装密度的K值修正百分比，再评价级配骨架是否紧密且易于施工。</p><p>笔者通过SPSS统计软件的非线性回归分析变量参数并采用方差Anovaa方法确定预测公式如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">VMA=67.112+10.898.CA-194.898.FAC+37.717.FAC^2-50.027.FAf^2+101.346.CA.FAC-145.783.CA.FAf+208.213.FAC.Faf.</span><br></pre></td></tr></table></figure></p><p>通过同行很多研究表明VMA指标更加依赖于集料级配线，且集料公称最大粒径对VMA的影响非常大，本文仅通过ATB-25柔性基层公称最大粒径为26.5mm且不考虑沥青用量影响情况下所进行的回归预测模型的建立，该模型使配合比设计人员在ATB-25沥青混合料级配选线阶段通过计算贝雷参数并预测该级配的VMA值，判断是否合理并作相应调整。通过结合贝雷参数与VMA预测模型的建立使沥青混合料配合计设计更加科学，同时其他类型的沥青混合料配合比设计也可通过此方法建立预测模型。因此非常具有实际工程的应用价值。</p><h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[1]William R V , William J P, Samuel H C.Bailey method for gradation selection in HMAmixture design[R] .Transportation Research Circular Number E- C044,2002.</span><br><span class="line">[2]李安，何昌轩，陈李锋.密级配沥青稳定碎石混合料性能研究[J].公路，2010,(01)</span><br><span class="line">[3]谢志华. 谈谈 Durbin-Watson检验[J].预测，1987,(06)</span><br></pre></td></tr></table></figure><hr>]]></content>
      
      <categories>
          
          <category> 沥青混合料 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 公路 </tag>
            
            <tag> 沥青混合料 </tag>
            
            <tag> 论文 </tag>
            
            <tag> 贝雷参数 </tag>
            
            <tag> VMA </tag>
            
            <tag> 模型 </tag>
            
            <tag> SPSS </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>水泥稳定碎石及级配碎石生产拌和楼标定</title>
      <link href="//2012/%E6%B0%B4%E6%B3%A5%E7%A8%B3%E5%AE%9A%E7%A2%8E%E7%9F%B3%E5%8F%8A%E7%BA%A7%E9%85%8D%E7%A2%8E%E7%9F%B3%E7%94%9F%E4%BA%A7%E6%8B%8C%E5%92%8C%E6%A5%BC%E6%A0%87%E5%AE%9A.html"/>
      <url>//2012/%E6%B0%B4%E6%B3%A5%E7%A8%B3%E5%AE%9A%E7%A2%8E%E7%9F%B3%E5%8F%8A%E7%BA%A7%E9%85%8D%E7%A2%8E%E7%9F%B3%E7%94%9F%E4%BA%A7%E6%8B%8C%E5%92%8C%E6%A5%BC%E6%A0%87%E5%AE%9A.html</url>
      <content type="html"><![CDATA[<h2 id="目标"><a href="#目标" class="headerlink" title="目标"></a>目标</h2><p>通过各料仓在规定时间（如3min）流出的料（单档料）与理论上应流出的质量比较。在调速R值，使其满足碎石允许偏差为理论质量的±3%，水泥以实际滴定的剂量为准。要求允许偏差小于±1%。<br>R值调整公式（非线性）设计质量÷实际质量×R值=新R值（经验公式）R值一经确定不宜随意调动，否则会使配料精度变差，导致级配失调。电脑的屏幕显示可以跟配合比一样，但可以通过改变R值来改变料的流量。</p><h2 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h2><p>沈海复线水稳1号拌和楼的生产能力是500T/h为例.</p><h2 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h2><p><img src="http://p5mgr4bgm.bkt.clouddn.com/屏幕快照 2018-04-06 下午4.40.33.png" alt="屏幕快照 2018-04-06 下午4.40.33-w600"></p><p><code>注拌和楼的转速不能超过1500转/分，否则料门往上提。</code></p><p>拌和楼配合比的单位符号为‰，如500‰代表配合比为50%，总产量单位为吨/小时，R的单位为1%，即100代表1，当生产输入相应的配比及R值后，会显示出相应的转速。如总产量为500T/h ，配合比为25%，R值为761.则转速N=Q×R=500×（250÷1000）×（761÷100）=951.25≈951。</p><p>用转载机和一辆货车配合。采用装载机接料，先按经验固定设置一个R值，以3min为准称取单档料的输出量进行过磅。看是否与理论相符合，不符合则通过 （设计质量÷实际质量×R值=新R值）来调整。重新进行设定R值，再进行过磅。计算没分钟的各仓比例对照配合比的比例通过确定R值后，关键步骤：试拌混合料，开动拌和机，突然停机，在传送带上截取混合料进行筛分试验，当结果不乐观时，进行微调比例，以保证级配符合设计要求。</p>]]></content>
      
      <categories>
          
          <category> 技术文档 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 拌和楼标定 </tag>
            
            <tag> 水泥稳定碎石 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>体积法预估最佳沥青用量在混合料配合比设计中的应用</title>
      <link href="//2012/%E4%BD%93%E7%A7%AF%E6%B3%95%E9%A2%84%E4%BC%B0%E6%9C%80%E4%BD%B3%E6%B2%A5%E9%9D%92%E7%94%A8%E9%87%8F%E5%9C%A8%E6%B7%B7%E5%90%88%E6%96%99%E9%85%8D%E5%90%88%E6%AF%94%E8%AE%BE%E8%AE%A1%E4%B8%AD%E7%9A%84%E5%BA%94%E7%94%A8%20.html"/>
      <url>//2012/%E4%BD%93%E7%A7%AF%E6%B3%95%E9%A2%84%E4%BC%B0%E6%9C%80%E4%BD%B3%E6%B2%A5%E9%9D%92%E7%94%A8%E9%87%8F%E5%9C%A8%E6%B7%B7%E5%90%88%E6%96%99%E9%85%8D%E5%90%88%E6%AF%94%E8%AE%BE%E8%AE%A1%E4%B8%AD%E7%9A%84%E5%BA%94%E7%94%A8%20.html</url>
      <content type="html"><![CDATA[<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">出版源-《公路工程》第37卷，第5期，2012年10月 文章编号:1674—0610( 2012) 05—0001—04</span><br></pre></td></tr></table></figure><h2 id="内容摘要"><a href="#内容摘要" class="headerlink" title="内容摘要"></a>内容摘要</h2><blockquote><p>本文选取福建路桥建设有限公司从2002年福宁高速公路B2段至2010年永宁高速公路8条高速公路、8个沥青混合料类型及20多个热拌沥青混合料配合比设计中最佳沥青用量的选定进行跟踪与剖析，对热拌沥青混合料配合比设计中如何使用体积法预估沥青用量从理论上做了详细阐述，并经过京珠复线湖南桂武高速公路路面34合同段superpave-25沥青混合料下面层目标配合比设计进行了的检验，证明该方法是准确可行的。</p></blockquote><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>公路路面工程使用沥青混合料柔性路面，混合料中沥青用量的大小对路用性能有非常大的的影响。当沥青用量过大时易导致成本提高、泛油和车辙，沥青用量过小时易出现耐久性、水损坏和沥青老化等现象，从而降低路面使用寿命提高养护成本。</p><p><img src="http://p5mgr4bgm.bkt.clouddn.com/15227410309064.jpg" alt="图一-w500"></p> <a id="more"></a><h2 id="体积参数"><a href="#体积参数" class="headerlink" title="体积参数"></a>体积参数</h2><p>设计沥青混合料配合比时应先确定合理的设计<code>空隙率</code>（或空气体积率）<strong>VV</strong>（%）（即压实沥青混合料中孔隙占沥青混合料总体积的百分率），再通过设计空隙率及矿料的公称最大粒径（mm）确定最小矿料间隙率<strong>VMA</strong>（%）（矿料表面沥青膜厚度的表征）。而压实沥青混合料中的体积由矿料实体+闭口体积<code>①</code>、矿料表面开口空隙未吸收沥青的毛体积<code>②</code>、矿料表面开口空隙吸收沥青的体积<code>③</code>、形成结构沥青的有效沥青体积<code>④</code>和空气体积所组成<code>⑤</code>。</p><p><img src="http://p5mgr4bgm.bkt.clouddn.com/15227411904451.jpg" alt="图二-w500"></p><p>可以看出理论沥青混合料的配合比设计最佳沥用量，其实，就是满足设计空隙率及最小VMA条件下的矿料表面开口空隙吸收的沥青的体积<code>③</code>+形成结构沥青的有效沥青体积的体积之和<code>④</code>。在单体体积中只须知道<code>③</code>、<code>④</code>的体积再乘以沥青相对密度便能计算出混合料中沥青用量。</p><p>集料毛体积<strong>Vsb</strong>为表面轮廓线范围内的全部毛体积，包含了材料实体、开口及闭口孔隙。沥青混合料中有效体积<strong>Vse</strong>(<em>采用有效相对密度计算</em>)包括材料实体体积与表面空隙没有被沥青填充的体积。因此矿料表面开口空隙吸收沥青的体积<code>③</code><strong>Vba</strong>为<strong>Vsb</strong>-<strong>Vse</strong>之差。形成结构沥青的有效沥青体积<code>④</code><strong>Vbe</strong>为矿料间隙率<strong>VMA</strong>-空隙率<strong>VV</strong>之差。<br>最终单位体积沥青混合料的沥青用量：<br>$$<br>Pb^1 =(Vb_a+Vb_e)* γ_b<br>$$</p><p><img src="http://p5mgr4bgm.bkt.clouddn.com/屏幕快照 2018-04-03 下午3.44.13.png" alt="屏幕快照 2018-04-03 下午3.44.13-w400"></p><h3 id="实例计算"><a href="#实例计算" class="headerlink" title="实例计算"></a>实例计算</h3><p>配合比设计阶段我们要进行原材料密度试验同时设计优化矿料级配确实各档原材料的比例。通过沥青混合料的类型设计空隙率及选择<strong>VMA</strong>。</p><table><thead><tr><th>原材料</th><th>原材料比例（%）</th><th>毛体积相对密度</th><th>表观相对密度</th></tr></thead><tbody><tr><td>1#料</td><td>24</td><td>2.678</td><td>2.711</td></tr><tr><td>2#料</td><td>35</td><td>2.665</td><td>2.704</td></tr><tr><td>3#料</td><td>9</td><td>2.631</td><td>2.695</td></tr><tr><td>4#料</td><td>30</td><td>2.588</td><td>2.662</td></tr><tr><td>矿粉</td><td>2</td><td>2.605</td><td>2.605</td></tr></tbody></table><p>假设1m3沥青混合料，设计空隙率<strong>Va</strong>=4.5%；<strong>VMAmin</strong>=13.0%；沥青相对密度<strong>γb</strong>=1.028。计算步骤如下:</p><p><img src="http://p5mgr4bgm.bkt.clouddn.com/15227419249319.jpg" alt="1-w300"></p><ol><li><p>矿料料合成毛体积密度:<br>$$ Gsb =\frac{100}{\frac{p_1}{Gsb_1}+\frac{p_2}{Gsb_2}+…+\frac{p_n}{Gsb_n}} =\frac{100}{\frac{24}{2.678}+\frac{35}{2.665}+\frac{9}{2.631}+\frac{30}{2.588}+\frac{2}{2.605}} =2.640 $$</p></li><li><p>矿料料合成表观密度:<br>$$ Gsa =\frac{100}{\frac{p_1}{Gsa_1}+\frac{p_2}{Gsa_2}+…+\frac{p_n}{Gsa_n}} =\frac{100}{\frac{24}{2.711}+\frac{35}{2.704}+\frac{9}{2.695}+\frac{30}{2.662}+\frac{2}{2.605}} =2.690 $$</p></li><li><p>确定矿料的有效相对密度:<br>$$ G_{se} =C.G_{sa}+(1-C).G_{sb}=2.677 $$<br>$$ C =0.033{W_x}^2-0.2936W_x+0.9339=0.744 $$<br>$$ W_x =(\frac{1}{G_{sb}}- \frac{1}{G_{sa}})*100 =0.704$$</p></li><li><p>有效沥青体积<br>$$ V_{be}=VMA-VV=0.085 $$</p></li><li><p>1m^3 矿料体积<br>$$ V_{sb}=1-VMA=0.87 $$</p></li><li><p>1m^3矿料质量（kg）<br>$$ M_s=V_{sb}.G{sb}.1000 =2296.8{kg} $$</p></li><li><p>有效矿料体积<br>$$ V_{se}=\frac{M_s}{V_{se}*1000} =0.858 $$ </p></li><li><p>矿料表面开口空隙吸收沥青的体积<br>$$ V_{ba}=V_{sb}-V_{se}=0.012 $$</p></li><li><p>计算沥青用量Mb＇（kg）<br>$$ {M_b}^`=(V_{ba}+V_{be}).r_b.1000=99.72{kg} $$</p></li><li><p>1m^3混合料质量（kg）<br>$$ P_{mm}={P_b}^`+P_s=2396.5{kg}$$</p></li></ol><ol start="11"><li>计算沥青用量Pb＇（%）（<em>占混合料总量的百分比</em>）=Mb`/P<em>100=99.7/2396.5</em>100=4.16%</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">最后，还可以计算出沥青混合料试件毛体积相对密度γf=2.396；计算最大理论相对密度Gmm=2.509；饱和度VFA=65.4%等。</span><br></pre></td></tr></table></figure><h2 id="计算沥青用量与最佳沥青用量比较"><a href="#计算沥青用量与最佳沥青用量比较" class="headerlink" title="计算沥青用量与最佳沥青用量比较"></a>计算沥青用量与最佳沥青用量比较</h2><p>沥青配合比设计中通过体积法上述公式可以计算预估沥青用量。同时，笔者通过2002年福宁高速公路B2段至2010年永宁高速公路8条高速公路、8个沥青混合料类型及20个热拌沥青混合料配合比设计中所确定的最佳沥青用量与体积法计算沥青用量进行了比较。如下图：</p><table><thead><tr><th>路段</th><th>混合料类型</th><th>γsb</th><th>γsa</th><th>γse</th><th>VMA(%)</th><th>(VV)%</th><th>最佳沥青用量(%)</th><th>计算沥青用量(%)</th><th>油量偏差(%)</th></tr></thead><tbody><tr><td>邵三高速</td><td>ATB-25</td><td>2.638</td><td>2.713</td><td>2.669</td><td>13</td><td>5</td><td>3.8</td><td>3.87</td><td>-0.07</td></tr><tr><td>永宁高速B2</td><td>ATB-25</td><td>2.645</td><td>2.706</td><td>2.668</td><td>13</td><td>5.1</td><td>3.7</td><td>3.7</td><td>0</td></tr><tr><td>龙长高速B4</td><td>ATB-25</td><td>2.638</td><td>2.713</td><td>2.669</td><td>13</td><td>5</td><td>3.8</td><td>3.89</td><td>-0.09</td></tr><tr><td>泉厦高速</td><td>ATB-25</td><td>2.641</td><td>2.683</td><td>2.664</td><td>13.2</td><td>4.8</td><td>3.9</td><td>3.94</td><td>-0.04</td></tr><tr><td>福泉高速</td><td>ATB-25</td><td>2.603</td><td>2.651</td><td>2.628</td><td>13.3</td><td>5.1</td><td>3.9</td><td>3.96</td><td>-0.06</td></tr><tr><td>绕城高速</td><td>ATB-25</td><td>2.644</td><td>2.693</td><td>2.666</td><td>13</td><td>4.7</td><td>3.9</td><td>3.87</td><td>0.03</td></tr><tr><td>邵三高速</td><td>AC-20</td><td>2.622</td><td>2.682</td><td>2.653</td><td>13.9</td><td>4.7</td><td>4.4</td><td>4.45</td><td>-0.05</td></tr><tr><td>泉厦高速</td><td>AC-20</td><td>2.636</td><td>2.684</td><td>2.672</td><td>13.8</td><td>4.6</td><td>4.5</td><td>4.49</td><td>0.01</td></tr><tr><td>福泉高速</td><td>AC-20</td><td>2.597</td><td>2.651</td><td>2.636</td><td>14</td><td>4.8</td><td>4.6</td><td>4.61</td><td>-0.01</td></tr><tr><td>永宁高速B4</td><td>AC-20</td><td>2.65</td><td>2.701</td><td>2.688</td><td>14</td><td>4.6</td><td>4.7</td><td>4.63</td><td>0.07</td></tr><tr><td>京福高速</td><td>AC-20</td><td>2.643</td><td>2.663</td><td>2.646</td><td>13.5</td><td>4.1</td><td>4.2</td><td>4.2</td><td>0</td></tr><tr><td>绕城高速</td><td>AC-20</td><td>2.639</td><td>2.696</td><td>2.68</td><td>13.8</td><td>4.5</td><td>4.6</td><td>4.58</td><td>0.02</td></tr><tr><td>粤赣高速</td><td>AC-20</td><td>2.707</td><td>2.759</td><td>2.746</td><td>13.5</td><td>4.2</td><td>4.4</td><td>4.47</td><td>-0.07</td></tr><tr><td>泉三高SM4</td><td>AC-20</td><td>2.675</td><td>2.725</td><td>2.712</td><td>13.9</td><td>4.7</td><td>4.4</td><td>4.44</td><td>-0.04</td></tr><tr><td>邵三高速</td><td>AC-16</td><td>2.605</td><td>2.668</td><td>2.649</td><td>13.8</td><td>4.5</td><td>4.5</td><td>4.69</td><td>-0.19</td></tr><tr><td>绕城高速</td><td>AC-16</td><td>2.625</td><td>2.683</td><td>2.666</td><td>14.8</td><td>4.4</td><td>5.1</td><td>5.11</td><td>-0.01</td></tr><tr><td>京福高速</td><td>AK-16</td><td>2.862</td><td>2.917</td><td>2.869</td><td>14.8</td><td>4.5</td><td>4.3</td><td>4.24</td><td>0.06</td></tr><tr><td>龙长高速B4</td><td>AC-13</td><td>2.614</td><td>2.667</td><td>2.653</td><td>14.4</td><td>5</td><td>4.7</td><td>4.67</td><td>0.03</td></tr><tr><td>泉三高速SM4</td><td>AC-13</td><td>2.689</td><td>2.744</td><td>2.729</td><td>14.8</td><td>4.8</td><td>4.8</td><td>4.81</td><td>-0.01</td></tr><tr><td>泉厦高速</td><td>SMA-13</td><td>2.65</td><td>2.688</td><td>2.68</td><td>16.5</td><td>3.7</td><td>6</td><td>6.02</td><td>-0.02</td></tr><tr><td>福泉高速</td><td>SMA-13</td><td>2.586</td><td>2.646</td><td>2.628</td><td>16.6</td><td>3.8</td><td>6.2</td><td>6.33</td><td>-0.13</td></tr><tr><td>邵三高速</td><td>AC-25</td><td>2.625</td><td>2.684</td><td>2.667</td><td>13.1</td><td>4.7</td><td>4</td><td>4.22</td><td>-0.22</td></tr><tr><td>京福高速</td><td>AC-25</td><td>2.624</td><td>2.662</td><td>2.63</td><td>13.4</td><td>4.1</td><td>4.1</td><td>4.12</td><td>-0.02</td></tr><tr><td>粤赣高速</td><td>ATB-30</td><td>2.715</td><td>2.76</td><td>2.742</td><td>12.7</td><td>5.4</td><td>3.2</td><td>3.3</td><td>-0.1</td></tr></tbody></table><p>通过图表，我们可以得出体积法计算的沥青用量与混合料类型关系不大，而矿料合成毛体积相对密度及矿料合成表观相对密度对计算预估沥青用量有直接的影响。最大偏差为邵三高速公路（AC-25）体积法计算的沥青用量为4.22%，最佳沥青用量为4.00%，偏差-0.22%。其他配合比总平均偏差为-0.04%。因此，沥青混合料配合比设计中应用体积法预估沥青用量适用大部分热拌沥青混合料配合比设计。由于地区气候的不同对最佳沥青用量的选定存在差异。还须对计算的沥青用量与最佳沥青用量建立数学模型确定回归议程式。</p><h2 id="回归方程式的确立"><a href="#回归方程式的确立" class="headerlink" title="回归方程式的确立"></a>回归方程式的确立</h2><p>对上述数据进行建模（最大二乘法），得出本检测中心使用体积法的经验公式，下表可以看出，本次样本数量为26组，样本均方差：0.4324；回归均方差：10.5331；可决系数：0.9871；F检验值为1836.0182，当显著性水平0.01的F临界值：7.8229，F值检验结论为回归方程线性关系特别显著；T检验值为42.8488，当显著性水平0.01的T临界值2.7969，T值检验结论为回归系数特别显著大于0。所以回归方程特征呈线性关系。</p><p><img src="http://p5mgr4bgm.bkt.clouddn.com/15227475053573.jpg" alt="ss-w300"></p><blockquote><p>最终的经验公式为：Pb=0.996 Pb’-0.0259，Pb’为体积法计算的理论沥青用量，Pb为修正后的预估沥青用量。</p></blockquote><h2 id="检验计算"><a href="#检验计算" class="headerlink" title="检验计算"></a>检验计算</h2><p>笔者通过桂武高速公路路面34合同段superpave-25沥青混合料下面层目标配合比设计对体积法预估沥青用量进行检验,superpave-25沥青混合料下面层目标配合比设计通过委托江苏省交通规划设计院股份有限公司工程质量检测中心进行，依据美国superpave沥青混合设计标准进行设计，并依据我国《公路路面施工技术规范》（JTG F40-2004）的要求进行马歇尔试验验证，在工程设计级配范围内设计供优选用的1~3组不同的矿料级配，最终确定一条设计级配线，其中矿料合成毛体积相对密度γsb=2.663；矿料合成表观相对密γsa=2.706；矿料有效密度γse=2.698。设计空隙率VV=4.0%；最小VMA=12.1%；沥青相对密度γb=1.032。在选定设计级配的基础上，以3.5、4.0%、4.5%和5.0%四种沥青用量进行试验，确定沥青用量3.9%做为最佳沥青用量。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ol><li>用体积法计算出预估沥青用量通过修正后的预估沥青用量与最佳沥青相近，准确性较高；避免了以往经验或已建类似工程所带来的误差。</li><li>体积法计算出的参数，可以做为试验人员配合比设计初的参考值，当试验出来结果与理论计算的结果相差较大时，应找出原因使配合比设计过程当中能进行方面参考。</li><li>矿料合成毛体积相对密度及合成相对表观密度对计算预估沥青用量有直接的影响，应提高集料密度试验的准确性。</li><li>多孔性集料的配合比设计未验证。</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">参考文献：</span><br><span class="line">中华人民共和国交通部. 《公路沥青路面施工技术规范》JTG F40-2004 ［S］.北京:人民交通出版社,2004 </span><br><span class="line">《公路沥青路面施工技术规范实施手册》 李福普 沈金安 编著   北京：人民交通出版社,2004</span><br></pre></td></tr></table></figure><hr>]]></content>
      
      <categories>
          
          <category> 配合比 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 公路 </tag>
            
            <tag> 沥青 </tag>
            
            <tag> 配合比设计 </tag>
            
            <tag> 沥青混合料 </tag>
            
            <tag> 体积法 </tag>
            
            <tag> 论文 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>基于Excel VBA应用三次样条插值法开发CBR曲线</title>
      <link href="//2010/%E5%9F%BA%E4%BA%8EExcel%20VBA%E5%BA%94%E7%94%A8%E4%B8%89%E6%AC%A1%E6%A0%B7%E6%9D%A1%E6%8F%92%E5%80%BC%E6%B3%95%E5%BC%80%E5%8F%91CBR%E6%9B%B2%E7%BA%BF.html"/>
      <url>//2010/%E5%9F%BA%E4%BA%8EExcel%20VBA%E5%BA%94%E7%94%A8%E4%B8%89%E6%AC%A1%E6%A0%B7%E6%9D%A1%E6%8F%92%E5%80%BC%E6%B3%95%E5%BC%80%E5%8F%91CBR%E6%9B%B2%E7%BA%BF.html</url>
      <content type="html"><![CDATA[<h2 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h2><p>CBR又称加州承载比，是California Bearing Ration的缩写，由美国加利福尼亚州公路局首先提出来，用于评定路基土和路面材料的强度指标。在国外多采用CBR作为路面材料和路基土的设计参数。</p><p>我国现行沥青和水泥混凝土路面设计规范，对路面、路基的设计参数系采用回弹模量指标，而在境外修建的公路工程多采用CBR指标。为了进一步积累经验用于实际，以促进国际学术交流，参考了国内外的情况，将CBR指标列入《公路路基设计规范》（JTG D30-2004）和《公路路基施工技术规范》（JTG F10-2006），作为路基填料选择的依据。</p><p>CBR数据是根据试验检测得出系列结果,以贯入量L为纵坐标,以单位压力P为横坐标,在直角坐标系上标出这些点,根据点的位置,用模糊数学(线形回归)的理论,推出曲线的公式,根据公式,将这些点绘制出一个圆滑的关系曲线,必要时进行原点修正。然后就可以根据曲线得出贯入量L=2.5mm 和贯入量L=5.0mm 时候单位压力P的数值了。</p> <a id="more"></a><p>介绍了<strong>CBR制图</strong>基本情况，在试验检测中对L-P分析曲线图常遇到以下问题：</p><h2 id="L-P分析曲线的制图及数据精确度？"><a href="#L-P分析曲线的制图及数据精确度？" class="headerlink" title="L-P分析曲线的制图及数据精确度？"></a>L-P分析曲线的制图及数据精确度？</h2><p>目前，试验检测工程师对L-P分析曲线的绘制都是应用Excel的制图功能实现的，但Excel制图中存在一个问题就是贯入量L=2.5mm和贯入量L=5.0mm所对应P的数据无法直接计算出来，还是要用内插计算（已影响精度）。如果个别数据不是很理想时，可能出现“弹簧”现象而且曲线也不够平滑。</p><h2 id="什么是原点修正，如何在图中表示出来？"><a href="#什么是原点修正，如何在图中表示出来？" class="headerlink" title="什么是原点修正，如何在图中表示出来？"></a>什么是原点修正，如何在图中表示出来？</h2><p>下图曲线1是适合的，曲线2在接近原点的一段出现凹曲线,这是由于试验过程中由于试件表面不平贯入阻力没有成比例的增加造成的。对此需要进行修正。<strong>修正方法:在变曲率点引一切线,与纵坐标交与O′点,O′即为修正后的原点</strong>。</p><p><img src="http://p5mgr4bgm.bkt.clouddn.com/5fe99087h8c5acaf6d1ab&amp;690.jpeg" alt="5fe99087h8c5acaf6d1ab_690"></p><p>什么是三次样条插值法,浏览《<strong>三次样条函数计算</strong>》或网络查找.</p><p>以下是基于Excel VBA 应用三次样条插值法原理开发的L-P曲线图，能够自动计算曲线任意点对应的x,y值，同时自动计算出贯入量L=2.5mm 和贯入量L=5.0mm 时候单位压力P的精确数值。曲线稳定性与光滑性好。</p><p><img src="http://p5mgr4bgm.bkt.clouddn.com/5fe99087h746f9c204906&amp;690.jpeg" alt="5fe99087h746f9c204906_690"></p><p>VBA代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br></pre></td><td class="code"><pre><span class="line">Public x() As Double</span><br><span class="line">Public y() As Double</span><br><span class="line">Public N As Integer</span><br><span class="line">Public yp1, ypn As Double</span><br><span class="line">Public y2() As Double</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"><span class="string">'初始化数据</span></span><br><span class="line"><span class="string">Sub initdata()</span></span><br><span class="line"><span class="string">Dim i As Integer</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">'</span>判断点数</span><br><span class="line">N = [b1]</span><br><span class="line"></span><br><span class="line"><span class="string">'定义动态数组大小</span></span><br><span class="line"><span class="string">ReDim x(N)</span></span><br><span class="line"><span class="string">ReDim y(N)</span></span><br><span class="line"><span class="string">ReDim y2(N)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">'</span>赋值</span><br><span class="line">For i = <span class="number">1</span> To N</span><br><span class="line">    x(i) = Cells(i + <span class="number">2</span>, <span class="number">1</span>)</span><br><span class="line">    y(i) = Cells(i + <span class="number">2</span>, <span class="number">2</span>)</span><br><span class="line">Next i</span><br><span class="line"></span><br><span class="line"><span class="string">'头尾点的一介导数</span></span><br><span class="line"><span class="string">'</span>yp1 = (y(<span class="number">2</span>) - y(<span class="number">1</span>)) / (x(<span class="number">2</span>) - x(<span class="number">1</span>))</span><br><span class="line"><span class="string">'ypn = (y(N) - y(N - 1)) / (x(N) - x(N - 1))</span></span><br><span class="line"><span class="string">yp1 = 0</span></span><br><span class="line"><span class="string">ypn = 0</span></span><br><span class="line"><span class="string">End Sub</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">'</span>求二阶导</span><br><span class="line">Sub spline()</span><br><span class="line">Dim u(<span class="number">500</span>) As Double</span><br><span class="line">Dim aaa, sig, bbb, ccc, p, qn, un As Double</span><br><span class="line">Dim i, k As Integer</span><br><span class="line"></span><br><span class="line">If yp1 &gt; <span class="number">9.9E+29</span> Then</span><br><span class="line">    y2(<span class="number">1</span>) = <span class="number">0</span></span><br><span class="line">    u(<span class="number">1</span>) = <span class="number">0</span></span><br><span class="line">Else</span><br><span class="line">    y2(<span class="number">1</span>) = <span class="number">-0.5</span></span><br><span class="line">    aaa = (y(<span class="number">2</span>) - y(<span class="number">1</span>)) / (x(<span class="number">2</span>) - x(<span class="number">1</span>))</span><br><span class="line">    u(<span class="number">1</span>) = (<span class="number">3</span> / (x(<span class="number">2</span>) - x(<span class="number">1</span>))) * (aaa - yp1)</span><br><span class="line">End If</span><br><span class="line"></span><br><span class="line">For i = <span class="number">2</span> To N - <span class="number">1</span></span><br><span class="line">    sig = (x(i) - x(i - <span class="number">1</span>)) / (x(i + <span class="number">1</span>) - x(i - <span class="number">1</span>))</span><br><span class="line">    p = sig * y2(i - <span class="number">1</span>) + <span class="number">2</span></span><br><span class="line">    y2(i) = (sig - <span class="number">1</span>) / p</span><br><span class="line">    aaa = (y(i + <span class="number">1</span>) - y(i)) / (x(i + <span class="number">1</span>) - x(i))</span><br><span class="line">    bbb = (y(i) - y(i - <span class="number">1</span>)) / (x(i) - x(i - <span class="number">1</span>))</span><br><span class="line">    ccc = x(i + <span class="number">1</span>) - x(i - <span class="number">1</span>)</span><br><span class="line">    u(i) = (<span class="number">6</span> * (aaa - bbb) / ccc - sig * u(i - <span class="number">1</span>)) / p</span><br><span class="line">Next i</span><br><span class="line"></span><br><span class="line">If yp1 &gt; <span class="number">9.9E+29</span> Then</span><br><span class="line">    qn = <span class="number">0</span></span><br><span class="line">    un = <span class="number">0</span></span><br><span class="line">Else</span><br><span class="line">    qn = <span class="number">0.5</span></span><br><span class="line">    aaa = ypn - (y(N) - y(N - <span class="number">1</span>)) / (x(N) - x(N - <span class="number">1</span>))</span><br><span class="line">    un = (<span class="number">3</span> / (x(N) - x(N - <span class="number">1</span>))) * aaa</span><br><span class="line">End If</span><br><span class="line"></span><br><span class="line">y2(N) = (un - qn * u(N - <span class="number">1</span>)) / (qn * y2(N - <span class="number">1</span>) + <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">For k = N - <span class="number">1</span> To <span class="number">1</span> Step <span class="number">-1</span></span><br><span class="line">    y2(k) = y2(k) * y2(k + <span class="number">1</span>) + u(k)</span><br><span class="line">Next k</span><br><span class="line"></span><br><span class="line">End Sub</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Sub splint(px As Double, py As Double)</span><br><span class="line">Dim k, klo, khi As Integer</span><br><span class="line">Dim h, a, b, aaa, bbb, q, qq As Double</span><br><span class="line">klo = <span class="number">1</span></span><br><span class="line">khi = N</span><br><span class="line"></span><br><span class="line"><span class="string">'二分法</span></span><br><span class="line"><span class="string">L1: If khi - klo &gt; 1 Then</span></span><br><span class="line"><span class="string">        k = Int((khi + klo) / 2)</span></span><br><span class="line"><span class="string">        If x(k) &gt; px Then</span></span><br><span class="line"><span class="string">            khi = k</span></span><br><span class="line"><span class="string">        Else</span></span><br><span class="line"><span class="string">            klo = k</span></span><br><span class="line"><span class="string">        End If</span></span><br><span class="line"><span class="string">        GoTo L1</span></span><br><span class="line"><span class="string">    End If</span></span><br><span class="line"><span class="string">h = x(khi) - x(klo)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">If h = 0 Then</span></span><br><span class="line"><span class="string">    Exit Sub</span></span><br><span class="line"><span class="string">End If</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">a = (x(khi) - px) / h</span></span><br><span class="line"><span class="string">b = (px - x(klo)) / h</span></span><br><span class="line"><span class="string">aaa = a * y(klo) + b * y(khi)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">If a = 0 Then</span></span><br><span class="line"><span class="string">    q = 0</span></span><br><span class="line"><span class="string">Else</span></span><br><span class="line"><span class="string">    If a &gt; 0 Then</span></span><br><span class="line"><span class="string">        q = Exp(3 * Log(a))</span></span><br><span class="line"><span class="string">    Else</span></span><br><span class="line"><span class="string">        q = -Exp(3 * Log(-a))</span></span><br><span class="line"><span class="string">    End If</span></span><br><span class="line"><span class="string">End If</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">If b = 0 Then</span></span><br><span class="line"><span class="string">    qq = 0</span></span><br><span class="line"><span class="string">Else</span></span><br><span class="line"><span class="string">    If b &gt; 0 Then</span></span><br><span class="line"><span class="string">        qq = Exp(3 * Log(b))</span></span><br><span class="line"><span class="string">    Else</span></span><br><span class="line"><span class="string">        qq = -Exp(3 * Log(-b))</span></span><br><span class="line"><span class="string">    End If</span></span><br><span class="line"><span class="string">End If</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">bbb = (q - a) * y2(klo) + (qq - b) * y2(khi)</span></span><br><span class="line"><span class="string">py = aaa + bbb * (h * h) / 6</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">End Sub</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">'</span>求值</span><br><span class="line">Sub caldata()</span><br><span class="line">Dim i As Integer</span><br><span class="line">Dim j As Integer</span><br><span class="line">Dim z As Integer</span><br><span class="line">Dim MY_Y As Double</span><br><span class="line">Dim q As Double</span><br><span class="line">Dim PList() As Double</span><br><span class="line"></span><br><span class="line">Call initdata</span><br><span class="line">Call spline</span><br><span class="line"></span><br><span class="line">ReDim PList((N - <span class="number">1</span>) * <span class="number">40</span> + <span class="number">1</span>, <span class="number">4</span>)</span><br><span class="line"></span><br><span class="line">For i = <span class="number">1</span> To N - <span class="number">1</span></span><br><span class="line">    PList((i - <span class="number">1</span>) * <span class="number">40</span> + <span class="number">1</span>, <span class="number">1</span>) = x(i)</span><br><span class="line">    PList((i - <span class="number">1</span>) * <span class="number">40</span> + <span class="number">1</span>, <span class="number">2</span>) = y(i)</span><br><span class="line">   </span><br><span class="line">    If i = <span class="number">1</span> Then</span><br><span class="line">        PList((i - <span class="number">1</span>) * <span class="number">40</span> + <span class="number">1</span>, <span class="number">3</span>) = <span class="number">0</span></span><br><span class="line">    Else</span><br><span class="line">        PList((i - <span class="number">1</span>) * <span class="number">40</span> + <span class="number">1</span>, <span class="number">3</span>) = (PList((i - <span class="number">1</span>) * <span class="number">40</span> + <span class="number">1</span>, <span class="number">2</span>) - PList((i - <span class="number">1</span>) * <span class="number">40</span>, <span class="number">2</span>)) / (PList((i - <span class="number">1</span>) * <span class="number">40</span> + <span class="number">1</span>, <span class="number">1</span>) - PList((i - <span class="number">1</span>) * <span class="number">40</span>, <span class="number">1</span>))</span><br><span class="line">    End If</span><br><span class="line">   </span><br><span class="line">    PList((i - <span class="number">1</span>) * <span class="number">40</span> + <span class="number">1</span>, <span class="number">4</span>) = y2(i)</span><br><span class="line">   </span><br><span class="line">    For j = <span class="number">2</span> To <span class="number">40</span></span><br><span class="line">       </span><br><span class="line">        PList((i - <span class="number">1</span>) * <span class="number">40</span> + j, <span class="number">1</span>) = PList((i - <span class="number">1</span>) * <span class="number">40</span> + j - <span class="number">1</span>, <span class="number">1</span>) + (x(i + <span class="number">1</span>) - x(i)) / <span class="number">40</span></span><br><span class="line">        Call splint(PList((i - <span class="number">1</span>) * <span class="number">40</span> + j, <span class="number">1</span>), MY_Y)</span><br><span class="line">        PList((i - <span class="number">1</span>) * <span class="number">40</span> + j, <span class="number">2</span>) = MY_Y</span><br><span class="line">        PList((i - <span class="number">1</span>) * <span class="number">40</span> + j, <span class="number">3</span>) = (PList((i - <span class="number">1</span>) * <span class="number">40</span> + j, <span class="number">2</span>) - PList((i - <span class="number">1</span>) * <span class="number">40</span> + j - <span class="number">1</span>, <span class="number">2</span>)) / (PList((i - <span class="number">1</span>) * <span class="number">40</span> + j, <span class="number">1</span>) - PList((i - <span class="number">1</span>) * <span class="number">40</span> + j - <span class="number">1</span>, <span class="number">1</span>))</span><br><span class="line">        PList((i - <span class="number">1</span>) * <span class="number">40</span> + j, <span class="number">4</span>) = (PList((i - <span class="number">1</span>) * <span class="number">40</span> + j, <span class="number">3</span>) - PList((i - <span class="number">1</span>) * <span class="number">40</span> + j - <span class="number">1</span>, <span class="number">3</span>)) / (PList((i - <span class="number">1</span>) * <span class="number">40</span> + j, <span class="number">1</span>) - PList((i - <span class="number">1</span>) * <span class="number">40</span> + j - <span class="number">1</span>, <span class="number">1</span>))</span><br><span class="line">       </span><br><span class="line">    Next j</span><br><span class="line">   </span><br><span class="line">Next i</span><br><span class="line"></span><br><span class="line"><span class="string">'最后一点</span></span><br><span class="line"><span class="string">PList((N - 1) * 40 + 1, 1) = x(N)</span></span><br><span class="line"><span class="string">PList((N - 1) * 40 + 1, 2) = y(N)</span></span><br><span class="line"><span class="string">PList((N - 1) * 40 + 1, 3) = 0</span></span><br><span class="line"><span class="string">PList((N - 1) * 40 + 1, 4) = y2(N)</span></span><br><span class="line"><span class="string">'</span>计算<span class="number">2.5</span>mm的P值</span><br><span class="line">Call splint(<span class="number">2.5</span>, MY_Y)</span><br><span class="line">Cells(<span class="number">1</span>, <span class="number">8</span>) = MY_Y</span><br><span class="line"><span class="string">'计算5.0mm的P值</span></span><br><span class="line"><span class="string">Call splint(5, MY_Y)</span></span><br><span class="line"><span class="string">Cells(1, 10) = MY_Y</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Range("K:L").Select</span></span><br><span class="line"><span class="string">Selection.ClearContents</span></span><br><span class="line"><span class="string">Range("a3").Select</span></span><br><span class="line"><span class="string">For i = 1 To (N - 1) * 40 + 1</span></span><br><span class="line"><span class="string">    Cells(i + 2, 11) = PList(i, 1)</span></span><br><span class="line"><span class="string">    Cells(i + 2, 12) = PList(i, 2)</span></span><br><span class="line"><span class="string">Next i</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Range("e4:h4").Select</span></span><br><span class="line"><span class="string">Selection.ClearContents</span></span><br><span class="line"><span class="string">Range("a3").Select</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Dim la, lb As Integer</span></span><br><span class="line"><span class="string">For i = 2 To (N - 1) * 40 - 1</span></span><br><span class="line"><span class="string"> '</span>查找变曲率点</span><br><span class="line">    If PList(i, <span class="number">4</span>) = <span class="number">0</span> Then</span><br><span class="line">  <span class="string">'x</span></span><br><span class="line"><span class="string">        Cells(4, 5) = PList(i, 1)</span></span><br><span class="line"><span class="string">  '</span>y</span><br><span class="line">        Cells(<span class="number">4</span>, <span class="number">6</span>) = PList(i, <span class="number">2</span>)</span><br><span class="line">  <span class="string">'y'</span></span><br><span class="line">        Cells(<span class="number">4</span>, <span class="number">7</span>) = PList(i, <span class="number">3</span>)</span><br><span class="line">  <span class="string">'y'</span><span class="string">'</span></span><br><span class="line"><span class="string">        Cells(4, 8) = PList(i, 4)</span></span><br><span class="line"><span class="string">  '</span>变曲率点致O<span class="string">'直线参数，y=ax+b b=lb,a=la</span></span><br><span class="line"><span class="string">        lb = PList(i, 2) - PList(i, 1) * PList(i, 3)</span></span><br><span class="line"><span class="string">        la = lb / PList(i, 3)</span></span><br><span class="line"><span class="string">        Exit For</span></span><br><span class="line"><span class="string">    Else</span></span><br><span class="line"><span class="string">        If PList(i, 4) * PList(i + 1, 4) &lt; 0 Then</span></span><br><span class="line"><span class="string">            If Abs(PList(i, 4)) &lt; Abs(PList(i + 1, 4)) Then</span></span><br><span class="line"><span class="string">                Cells(4, 5) = PList(i, 1)</span></span><br><span class="line"><span class="string">                Cells(4, 6) = PList(i, 2)</span></span><br><span class="line"><span class="string">                Cells(4, 7) = PList(i, 3)</span></span><br><span class="line"><span class="string">                Cells(4, 8) = PList(i, 4)</span></span><br><span class="line"><span class="string">                lb = PList(i, 2) - PList(i, 1) * PList(i, 3)</span></span><br><span class="line"><span class="string">                la = lb / PList(i, 3)</span></span><br><span class="line"><span class="string">                Exit For</span></span><br><span class="line"><span class="string">            Else</span></span><br><span class="line"><span class="string">                Cells(4, 5) = PList(i + 1, 1)</span></span><br><span class="line"><span class="string">                Cells(4, 6) = PList(i + 1, 2)</span></span><br><span class="line"><span class="string">                Cells(4, 7) = PList(i + 1, 3)</span></span><br><span class="line"><span class="string">                Cells(4, 8) = PList(i + 1, 4)</span></span><br><span class="line"><span class="string">                lb = PList(i + 1, 2) - PList(i + 1, 1) * PList(i + 1, 3)</span></span><br><span class="line"><span class="string">                la = lb / PList(i + 1, 3)</span></span><br><span class="line"><span class="string">                Exit For</span></span><br><span class="line"><span class="string">            End If</span></span><br><span class="line"><span class="string">        End If</span></span><br><span class="line"><span class="string">    End If</span></span><br><span class="line"><span class="string">Next i</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">'</span>修正后<span class="number">2.5</span>mm,<span class="number">5.0</span>mm的P值</span><br><span class="line">Call splint(<span class="number">2.5</span> - la, MY_Y)</span><br><span class="line">Cells(<span class="number">1</span>, <span class="number">8</span>) = MY_Y</span><br><span class="line">Call splint(<span class="number">5</span> - la, MY_Y)</span><br><span class="line">Cells(<span class="number">1</span>, <span class="number">10</span>) = MY_Y</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="string">'图表美化，不用了解</span></span><br><span class="line"><span class="string">Call Macro1</span></span><br><span class="line"><span class="string">End Sub</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Sub Macro1()</span></span><br><span class="line"><span class="string">   Dim a, b, c, d, e</span></span><br><span class="line"><span class="string">   a = Range("f1")</span></span><br><span class="line"><span class="string">   b = Range("d1")</span></span><br><span class="line"><span class="string">   c = Range("e18")</span></span><br><span class="line"><span class="string">   d = Range("f18")</span></span><br><span class="line"><span class="string">      ActiveSheet.ChartObjects("图表 7").Activate</span></span><br><span class="line"><span class="string">    ActiveChart.Axes(xlValue).Select</span></span><br><span class="line"><span class="string">    With ActiveChart.Axes(xlValue)</span></span><br><span class="line"><span class="string">        If a - (a + b) / 10 &lt;= 0 Then .MinimumScale = 0 Else .MinimumScale = a - (a + b) / 10</span></span><br><span class="line"><span class="string">        .MaximumScale = Int(b + (a + b) / 10)</span></span><br><span class="line"><span class="string">        .MinorUnit = ((a + b) / 20)</span></span><br><span class="line"><span class="string">        .MajorUnit = ((a + b) / 10)</span></span><br><span class="line"><span class="string">        .Crosses = xlAutomatic</span></span><br><span class="line"><span class="string">        .ReversePlotOrder = True</span></span><br><span class="line"><span class="string">        .ScaleType = xlLinear</span></span><br><span class="line"><span class="string">        .DisplayUnit = xlNone</span></span><br><span class="line"><span class="string">    End With</span></span><br><span class="line"><span class="string">    ActiveChart.Axes(xlCategory).MajorGridlines.Select</span></span><br><span class="line"><span class="string">    With ActiveChart.Axes(xlCategory)</span></span><br><span class="line"><span class="string">        If c - (c + d) / 10 &lt;= 0 Then .MinimumScale = 0 Else .MinimumScale = c - (c + d) / 10 &lt; 0</span></span><br><span class="line"><span class="string">        .MaximumScale = Int(d + (c + d) / 10)</span></span><br><span class="line"><span class="string">        .MinorUnit = (c + d) / 20</span></span><br><span class="line"><span class="string">        .MajorUnit = (c + d) / 10</span></span><br><span class="line"><span class="string">        .Crosses = xlAutomatic</span></span><br><span class="line"><span class="string">        .ReversePlotOrder = False</span></span><br><span class="line"><span class="string">        .ScaleType = xlLinear</span></span><br><span class="line"><span class="string">        .DisplayUnit = xlNone</span></span><br><span class="line"><span class="string">    End With</span></span><br><span class="line"><span class="string">End Sub</span></span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">作者：江锦朝，如果需要文件留下Email,希望与大家交个朋友。</span><br></pre></td></tr></table></figure><hr>]]></content>
      
      <categories>
          
          <category> VBA </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 函数 </tag>
            
            <tag> Excel </tag>
            
            <tag> VBA </tag>
            
            <tag> 试验 </tag>
            
            <tag> CBR </tag>
            
            <tag> 三次样条插值法 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>利用VBA+加载宏制作‘奇进偶不进’修约函数</title>
      <link href="//2010/%E5%88%A9%E7%94%A8VBA+%E5%8A%A0%E8%BD%BD%E5%AE%8F%E5%88%B6%E4%BD%9C%E2%80%98%E5%A5%87%E8%BF%9B%E5%81%B6%E4%B8%8D%E8%BF%9B%E2%80%99%E4%BF%AE%E7%BA%A6%E5%87%BD%E6%95%B0.html"/>
      <url>//2010/%E5%88%A9%E7%94%A8VBA+%E5%8A%A0%E8%BD%BD%E5%AE%8F%E5%88%B6%E4%BD%9C%E2%80%98%E5%A5%87%E8%BF%9B%E5%81%B6%E4%B8%8D%E8%BF%9B%E2%80%99%E4%BF%AE%E7%BA%A6%E5%87%BD%E6%95%B0.html</url>
      <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>以前就有不少朋友问我试验上经常用到的奇进偶不进在Excel中怎么处理，方法比较多。常见就是在单元格中直接编写判断语句（IF).</p><p>函数如下：</p><p><img src="http://p5mgr4bgm.bkt.clouddn.com/5fe99087h8c857d40861d&amp;690.jpeg" alt="5fe99087h8c857d40861d_690"><br>或<br><img src="http://p5mgr4bgm.bkt.clouddn.com/5fe99087h8c857fa9d198&amp;690.jpeg" alt="5fe99087h8c857fa9d198_690"></p> <a id="more"></a><p><strong>但以上代码有几个缺点：</strong></p><ol><li><p>代码偏长修改容易出错；</p></li><li><p>无法像自带函数（sum、abs)简易通用；</p></li><li><p>因为Excel的BUG原因，理论上数字=0 有时会得到0.000000143056 所以会出现修约有误现象，本人以前就遇过代码没错，结果出错的现象。</p></li></ol><p>今天花点时间写个，像<code>sum</code>,<code>abs</code>，<code>round</code>等函数一样调用简单方便而且各个报表都能通用，参数修改方便不易出错。如图：</p><p><img src="http://p5mgr4bgm.bkt.clouddn.com/5fe99087h8c8533442412&amp;690.jpeg" alt="5fe99087h8c8533442412_690"></p><p>首先了解下加载宏.加载宏可以扩展EXCEL的功能，将代码写在加载宏中和写在普通的工作簿中相比，有如下优点：</p><ul><li>加载宏对所有打开的EXCEL文件都生效。普通工作簿的代码一般只在特定的工作簿中才生效。</li><li>加载宏不受宏安全级的限制，也不会有宏运行的提示。即使将安全级设为“非常高”，加载宏就象EXCEL本身固有的功能一样工作。同样，它也不会被按住的Shift屏蔽。</li><li>加载宏在运行时其工作簿窗口是隐藏的，因此普通用户并不会感觉到它的存在。</li></ul><p>加载宏函数似乎是制作加载宏中最简单的，通常它只需要在模块中写一段Function代码，它就会和EXCEL自身的函数一样使用，并且出现在“插入函数”对话框的列表中。因此今天我们就用Function来实现上述功能。</p><h2 id="编写代码"><a href="#编写代码" class="headerlink" title="编写代码"></a>编写代码</h2><p>在VBA代码编辑窗口中，点击菜单命令“插入→模块”，得到“模块1”编辑窗口， 在其中输入如下自定义函数的代码，如图所示。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Function</span> Mround(ByVal X As Double, Optional ByVal Factor As Double = <span class="number">1</span>) As Double</span><br><span class="line">Dim Temp As Double, FixTemp As Double</span><br><span class="line"></span><br><span class="line"><span class="string">'X 要修约的数</span></span><br><span class="line"><span class="string">'</span>Factor 保留小数位数(如:<span class="number">1000</span>，<span class="number">100</span>，<span class="number">10</span>，<span class="number">1</span>，<span class="number">0.1</span>,<span class="number">0.01</span>)</span><br><span class="line">If (Factor &gt; <span class="number">1</span> And Factor Mod <span class="number">10</span> &lt;&gt; <span class="number">0</span>) Or (Factor &lt; <span class="number">1</span> And <span class="number">1</span> / Factor Mod <span class="number">10</span> &lt;&gt; <span class="number">0</span>) Then Factor = Application.InputBox(Prompt:=<span class="string">"输入正确的参数（如:100，10，1，0.1,0.01）："</span>, <span class="attr">Type</span>:=<span class="number">1</span>)</span><br><span class="line">If Factor &lt;&gt; <span class="number">0</span> Then</span><br><span class="line">    Factor = <span class="number">1</span> / Factor</span><br><span class="line">    Temp = X * Factor</span><br><span class="line">    FixTemp = Fix(Temp + <span class="number">0.5</span> * Sgn(X))</span><br><span class="line">        If Temp - Int(Temp) = <span class="number">0.5</span> Then</span><br><span class="line">            If FixTemp / <span class="number">2</span> &lt;&gt; Int(FixTemp / <span class="number">2</span>) Then</span><br><span class="line">            FixTemp = FixTemp - Sgn(X)</span><br><span class="line">            End If</span><br><span class="line">        End If</span><br><span class="line">    Mround = FixTemp / Factor</span><br><span class="line">Else</span><br><span class="line">    Mround = X</span><br><span class="line">End If</span><br><span class="line">End <span class="built_in">Function</span></span><br></pre></td></tr></table></figure><p><img src="http://p5mgr4bgm.bkt.clouddn.com/5fe99087h8c85b9ddf02b&amp;690.jpeg" alt="5fe99087h8c85b9ddf02b_690"></p><p>完成后，选择菜单中[<code>文件</code>]→[<code>关闭并返回到Microsoft Excel</code>]命令，返回到Excel工作表窗口。</p><p>现在，在E1单元格输入公式“=Mround(D1,0.1)”，回车后就可以看到结果了。拖动E1单元格的填充句柄向下复制公式，则可以轻松地得到所需要的结果，如图所示。</p><p><img src="http://p5mgr4bgm.bkt.clouddn.com/5fe99087h8c85cf6f0de7&amp;690.jpeg" alt="5fe99087h8c85cf6f0de7_690"></p><h2 id="Excel中加载宏"><a href="#Excel中加载宏" class="headerlink" title="Excel中加载宏"></a>Excel中加载宏</h2><p>函数“Mround”是我们自定义的函数，它可以象Excel本身自带的函数一样使用。但是在默认的情况下它只能在当前工作薄使用。如果我们需要经常在其它工作薄中使用该函数，则点击“Office按钮”，在弹出的菜单中点击“另存为→其它格式”命令，打开“另存为”对话框，在“保存类型”下拉列表中选择“Excel加载宏”，然后输入一个文件名，如“Mround”，如图所示。单击“确定”后文件就被保存为加载宏。</p><p> <img src="http://p5mgr4bgm.bkt.clouddn.com/5fe99087h8c85e40d578b&amp;690.jpeg" alt="5fe99087h8c85e40d578b_690"></p><p>再点击“Office按钮”，点击右下角的“Excel选项”按钮，打开“Excel选项”对话框，点击左侧的“加载项”项目，然后右侧“管理”下拉列表中选择“Excel加载项”，单击其右侧的“转到”按钮。打开“加载宏”对话框，勾选“可用加载宏”列表框中的“Mround”复选框，如下图所示，单击“确定”按钮后，就可以在本机上的所有工作薄中使用该自定义函数了。</p><p><img src="http://p5mgr4bgm.bkt.clouddn.com/5fe99087h8c85f7eb9fe8&amp;690.jpeg" alt="5fe99087h8c85f7eb9fe8_690"></p><p>如果您在这个对话框中看不到“Mround”复选项，可以点击“浏览”按钮查找。我们所保存的“Mround”加载宏会保存在“C:\Documents and Settings\用户名\Application Data\Microsoft\AddIns”文件夹中。如果我们想在其它的机器中使用此自定义函数，那么也需要将加载宏文件保存到其它机器中相应的文件夹中。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[Mround]函数说明：</span><br><span class="line"></span><br><span class="line">格式： Mround(ByVal X As Double, Optional ByVal Factor As Double = 1)，X：修约的数字；Factor：修约参数(如:1000，100，10，1，0.1,0.01)。如果Factor输入错误会影响修约结果，所以我加了一个提示框。</span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>从上面我们可以举一反三，可以编写击实试验得出的结果求最大干密度与最佳含水量,沥青针入度的结果判定等试验参数。如果想自己写的函数不被别人随意修改，可以进行封装成DLL文件。</p>]]></content>
      
      <categories>
          
          <category> VBA </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 函数 </tag>
            
            <tag> Excel </tag>
            
            <tag> VBA </tag>
            
            <tag> 试验 </tag>
            
            <tag> 加载宏 </tag>
            
            <tag> 奇进偶不进 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>VBA调用‘规划求解’自动合成矿料级配</title>
      <link href="//2010/VBA%E8%B0%83%E7%94%A8%E2%80%98%E8%A7%84%E5%88%92%E6%B1%82%E8%A7%A3%E2%80%99%E8%87%AA%E5%8A%A8%E5%90%88%E6%88%90%E7%9F%BF%E6%96%99%E7%BA%A7%E9%85%8D.html"/>
      <url>//2010/VBA%E8%B0%83%E7%94%A8%E2%80%98%E8%A7%84%E5%88%92%E6%B1%82%E8%A7%A3%E2%80%99%E8%87%AA%E5%8A%A8%E5%90%88%E6%88%90%E7%9F%BF%E6%96%99%E7%BA%A7%E9%85%8D.html</url>
      <content type="html"><![CDATA[<p>试验检测技术人员都知道，已知五、六档甚至七档集料计算合成成符合技术规范及级配关键点的控制要求,是非常消耗脑力和时间，特别是没有经验的检测人员更困难。因此我们可利用计算机的信息处理能力，为我们分忧解难。Excel是办公中最常用的办公软件之一，其功能非常强大，能利用好相关功能,会有意想不到的效果。</p><p>规划求解也称作“假设分析”，是一个非常好用的工具，经常用于查看更改某些单元格中的变量对工作表中公式结果的影响，例如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1. 根据已知结果倒推变量应赋予的初值：已知各档级配通过率及矿料的级配范围，可以用单变量求解、循环引用，也可规划求解得出配合比例。</span><br><span class="line">2. 根据已知参数和配比，寻找最佳组合方案：这种应用案例居多。</span><br></pre></td></tr></table></figure> <a id="more"></a><p>利用Excel2003提供的规划求解可以进行级配合成、最佳沥青用量的选定、沥青混合料拌和楼的标定等问题.</p><p>常规操作规划求解过程中,美中不足的是除了限制变量个数、求解时间有时候比较长外，还有是如果变量不多、算法也不难，但有许多需要求解的值，而每一次改变都要重复操作，弹出规划求解对话框、求解。</p><p><img src="http://p5mgr4bgm.bkt.clouddn.com/5fe99087h8c5f00300661&amp;690.jpeg" alt="5fe99087h8c5f00300661_690"></p><p>以上常规操作无法避免的问题，在利用VBA调用规划求解宏却可以很好的解决。从而更好的提高工作效率。通过工程上最常用的配合比级配比例的选定（例子为沥青混合料配合比）进行说明.</p><p>代码如下： </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"> Sub ww()</span><br><span class="line"></span><br><span class="line">    <span class="string">'取消密码保护</span></span><br><span class="line"><span class="string">    ActiveSheet.Unprotect Password:=123</span></span><br><span class="line"><span class="string">    Range("C4:C11").Select</span></span><br><span class="line"><span class="string">    Selection.ClearContents</span></span><br><span class="line"><span class="string">  </span></span><br><span class="line"><span class="string">  </span></span><br><span class="line"><span class="string">   '</span> 全部重设</span><br><span class="line">     SolverReset</span><br><span class="line">    <span class="string">'规划求解参数设置 Solverok setcell=设置目标单元格:</span></span><br><span class="line"><span class="string">    '</span>MaxMinVal 对应于是否要解决目标单元对最大值 (<span class="number">1</span>)、 最小值 (<span class="number">2</span>), 或特定值 (<span class="number">3</span>)</span><br><span class="line">    <span class="string">'ValueOf 指定要匹配目标单元值。 如果您设置 MaxMinVal 为 3, 必须指定该参数。</span></span><br><span class="line"><span class="string">    '</span>如果将设置为 <span class="number">1</span> 或 <span class="number">2</span>, MaxMinVal 才能省略该参数。</span><br><span class="line">    <span class="string">'ByChange 指定单元格或区域的单元格， 将更改</span></span><br><span class="line"><span class="string">    '</span>SolverAdd (CellRef, 关系, FormulaText)</span><br><span class="line">    <span class="string">'1 值是否小于或等于 =&lt;</span></span><br><span class="line"><span class="string">    '</span><span class="number">2</span> vaue 等于 (=)。</span><br><span class="line">    <span class="string">'3 值是否大于或等于 &gt;=</span></span><br><span class="line"><span class="string">    '</span><span class="number">4</span> 值是整数</span><br><span class="line">    <span class="string">'5 是二进制（值是零或一个）</span></span><br><span class="line"><span class="string">    '</span>FormulaText 引用一个或多个单元格构成右边的 constraint</span><br><span class="line">     Solverok setcell:=Range(<span class="string">"$D$12"</span>), <span class="attr">maxminval</span>:=<span class="number">3</span>, <span class="attr">ValueOf</span>:=<span class="number">100</span>, <span class="attr">bychange</span>:=Range(<span class="string">"c4:c11"</span>)</span><br><span class="line">     SolverAdd CellRef:=Range(<span class="string">"d12"</span>), <span class="attr">Relation</span>:=<span class="number">2</span>, <span class="attr">FormulaText</span>:=Range(<span class="string">"q12"</span>)</span><br><span class="line">     SolverAdd CellRef:=Range(<span class="string">"d12"</span>), <span class="attr">Relation</span>:=<span class="number">3</span>, <span class="attr">FormulaText</span>:=Range(<span class="string">"d17"</span>)</span><br><span class="line">     SolverAdd CellRef:=Range(<span class="string">"d12"</span>), <span class="attr">Relation</span>:=<span class="number">1</span>, <span class="attr">FormulaText</span>:=Range(<span class="string">"d16"</span>)</span><br><span class="line">     SolverAdd CellRef:=Range(<span class="string">"e12"</span>), <span class="attr">Relation</span>:=<span class="number">3</span>, <span class="attr">FormulaText</span>:=Range(<span class="string">"e17"</span>)</span><br><span class="line">     SolverAdd CellRef:=Range(<span class="string">"e12"</span>), <span class="attr">Relation</span>:=<span class="number">1</span>, <span class="attr">FormulaText</span>:=Range(<span class="string">"e16"</span>)</span><br><span class="line">     SolverAdd CellRef:=Range(<span class="string">"f12"</span>), <span class="attr">Relation</span>:=<span class="number">3</span>, <span class="attr">FormulaText</span>:=Range(<span class="string">"f17"</span>)</span><br><span class="line">     SolverAdd CellRef:=Range(<span class="string">"f12"</span>), <span class="attr">Relation</span>:=<span class="number">1</span>, <span class="attr">FormulaText</span>:=Range(<span class="string">"f16"</span>)</span><br><span class="line">     SolverAdd CellRef:=Range(<span class="string">"g12"</span>), <span class="attr">Relation</span>:=<span class="number">3</span>, <span class="attr">FormulaText</span>:=Range(<span class="string">"g17"</span>)</span><br><span class="line">     SolverAdd CellRef:=Range(<span class="string">"g12"</span>), <span class="attr">Relation</span>:=<span class="number">1</span>, <span class="attr">FormulaText</span>:=Range(<span class="string">"g16"</span>)</span><br><span class="line">     SolverAdd CellRef:=Range(<span class="string">"h12"</span>), <span class="attr">Relation</span>:=<span class="number">3</span>, <span class="attr">FormulaText</span>:=Range(<span class="string">"h17"</span>)</span><br><span class="line">     SolverAdd CellRef:=Range(<span class="string">"h12"</span>), <span class="attr">Relation</span>:=<span class="number">1</span>, <span class="attr">FormulaText</span>:=Range(<span class="string">"h16"</span>)</span><br><span class="line">     SolverAdd CellRef:=Range(<span class="string">"i12"</span>), <span class="attr">Relation</span>:=<span class="number">3</span>, <span class="attr">FormulaText</span>:=Range(<span class="string">"i17"</span>)</span><br><span class="line">     SolverAdd CellRef:=Range(<span class="string">"i12"</span>), <span class="attr">Relation</span>:=<span class="number">1</span>, <span class="attr">FormulaText</span>:=Range(<span class="string">"i16"</span>)</span><br><span class="line">     SolverAdd CellRef:=Range(<span class="string">"j12"</span>), <span class="attr">Relation</span>:=<span class="number">3</span>, <span class="attr">FormulaText</span>:=Range(<span class="string">"j17"</span>)</span><br><span class="line">     SolverAdd CellRef:=Range(<span class="string">"j12"</span>), <span class="attr">Relation</span>:=<span class="number">1</span>, <span class="attr">FormulaText</span>:=Range(<span class="string">"j16"</span>)</span><br><span class="line">     SolverAdd CellRef:=Range(<span class="string">"k12"</span>), <span class="attr">Relation</span>:=<span class="number">3</span>, <span class="attr">FormulaText</span>:=Range(<span class="string">"k17"</span>)</span><br><span class="line">     SolverAdd CellRef:=Range(<span class="string">"k12"</span>), <span class="attr">Relation</span>:=<span class="number">1</span>, <span class="attr">FormulaText</span>:=Range(<span class="string">"k16"</span>)</span><br><span class="line">     SolverAdd CellRef:=Range(<span class="string">"l12"</span>), <span class="attr">Relation</span>:=<span class="number">3</span>, <span class="attr">FormulaText</span>:=Range(<span class="string">"l17"</span>)</span><br><span class="line">     SolverAdd CellRef:=Range(<span class="string">"l12"</span>), <span class="attr">Relation</span>:=<span class="number">1</span>, <span class="attr">FormulaText</span>:=Range(<span class="string">"l16"</span>)</span><br><span class="line">     SolverAdd CellRef:=Range(<span class="string">"m12"</span>), <span class="attr">Relation</span>:=<span class="number">3</span>, <span class="attr">FormulaText</span>:=Range(<span class="string">"m17"</span>)</span><br><span class="line">     SolverAdd CellRef:=Range(<span class="string">"m12"</span>), <span class="attr">Relation</span>:=<span class="number">1</span>, <span class="attr">FormulaText</span>:=Range(<span class="string">"m16"</span>)</span><br><span class="line">     SolverAdd CellRef:=Range(<span class="string">"n12"</span>), <span class="attr">Relation</span>:=<span class="number">3</span>, <span class="attr">FormulaText</span>:=Range(<span class="string">"n17"</span>)</span><br><span class="line">     SolverAdd CellRef:=Range(<span class="string">"n12"</span>), <span class="attr">Relation</span>:=<span class="number">1</span>, <span class="attr">FormulaText</span>:=Range(<span class="string">"n16"</span>)</span><br><span class="line">     SolverAdd CellRef:=Range(<span class="string">"o12"</span>), <span class="attr">Relation</span>:=<span class="number">3</span>, <span class="attr">FormulaText</span>:=Range(<span class="string">"o17"</span>)</span><br><span class="line">     SolverAdd CellRef:=Range(<span class="string">"o12"</span>), <span class="attr">Relation</span>:=<span class="number">1</span>, <span class="attr">FormulaText</span>:=Range(<span class="string">"o16"</span>)</span><br><span class="line">     SolverAdd CellRef:=Range(<span class="string">"p12"</span>), <span class="attr">Relation</span>:=<span class="number">3</span>, <span class="attr">FormulaText</span>:=Range(<span class="string">"p17"</span>)</span><br><span class="line">     SolverAdd CellRef:=Range(<span class="string">"p12"</span>), <span class="attr">Relation</span>:=<span class="number">1</span>, <span class="attr">FormulaText</span>:=Range(<span class="string">"p16"</span>)</span><br><span class="line">      </span><br><span class="line">     SolverSolve UserFinish:=True</span><br><span class="line">     SolverFinish KeepFinal:=<span class="number">1</span></span><br><span class="line">       </span><br><span class="line">     <span class="string">'密码保护</span></span><br><span class="line"><span class="string">    ActiveSheet.Protect Contents:=True, Scenarios:=True, AllowFormattingCells:=True,        Password:=123</span></span><br><span class="line"><span class="string"> </span></span><br><span class="line"><span class="string">End Sub</span></span><br></pre></td></tr></table></figure><p><img src="http://p5mgr4bgm.bkt.clouddn.com/5fe99087h8c5e603e5185&amp;690.jpeg" alt="5fe99087h8c5e603e5185_690"></p><p>最后点击“<strong>合成级配线</strong>”一切OK！</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">注：泰勒曲线绘制可以看我写的《Excel绘制泰勒曲线级配图》</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> VBA </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Excel </tag>
            
            <tag> VBA </tag>
            
            <tag> 试验 </tag>
            
            <tag> 级配 </tag>
            
            <tag> 规划求解 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Excel绘制泰勒曲线级配图</title>
      <link href="//2010/Excel%E7%BB%98%E5%88%B6%E6%B3%B0%E5%8B%92%E6%9B%B2%E7%BA%BF%E7%BA%A7%E9%85%8D%E5%9B%BE.html"/>
      <url>//2010/Excel%E7%BB%98%E5%88%B6%E6%B3%B0%E5%8B%92%E6%9B%B2%E7%BA%BF%E7%BA%A7%E9%85%8D%E5%9B%BE.html</url>
      <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>矿料级配在公路工程中有着重要的应用，合理设置不同矿料间的比例对工程质量、成本等方面有着很大影响。因此，在配合比计划阶段经常需要先绘制出合成级配图，为分析配料比例提供详细的信息。我们知道现行技术规范规定级配图的绘制必须采用泰勒曲线。而泰勒曲线的特点是X轴（<code>孔径</code>）是不等距的，且需要按某一个规律变化间距。实际上我们需要在图表X轴上显示的是筛孔孔径（如：<code>31.5</code>、<code>26.5</code>、<code>19</code>和<code>16</code>等）。这为我们在绘制级配图时制造了困难。</p><p>朋友和同事经常问我要怎样才能准确绘制级配图，今天我把主要绘制步骤和小技巧写出来，供大家参考。所谓条条大路通罗马，大家有更好方法可以一起分享！<br> <a id="more"></a></p><h2 id="绘制前准备工作"><a href="#绘制前准备工作" class="headerlink" title="绘制前准备工作"></a>绘制前准备工作</h2><p>准备好矿料筛分数据（<code>以下沥青矿料数据</code>），如图:</p><p><img src="http://p5mgr4bgm.bkt.clouddn.com/5fe99087h8c71314619ac&amp;690.jpeg" alt="`5fe99087h8c71314619ac_690`"></p><p>根据上面的基础数据，我们可以绘制下面出矿料合成级配图</p><p><img src="http://p5mgr4bgm.bkt.clouddn.com/5fe99087h8c728c746827&amp;690.jpeg" alt="`5fe99087h8c728c746827_690`"></p><ol><li><p>转换孔径数据。为了绘制不等距的X轴，我们先将孔径数据转泰勒曲线系数（规程已有转好系数），表中的单元格C2就是转好的。</p></li><li><p>建立一个辅助线，先在表上填写有关数据，我在单元格<code>C7：O7</code>中全部填<strong>0</strong>，具体作用后面会详细说明。</p></li></ol><h2 id="绘制图表"><a href="#绘制图表" class="headerlink" title="绘制图表"></a>绘制图表</h2><h3 id="绘制基础图表"><a href="#绘制基础图表" class="headerlink" title="绘制基础图表"></a>绘制基础图表</h3><p>拉选单元格C2：O6,并在菜单栏中的[<code>插入</code>]→[<code>图表</code>]选项,打开[<code>图表向导</code>]对话框。选择[<code>XY散点图</code>]在图表类型中的[<code>平滑散点图</code>]，点击[<code>完成</code>]，这时基础图表已完成，如图</p><p><img src="http://p5mgr4bgm.bkt.clouddn.com/5fe99087h8c717197c590&amp;690.jpeg" alt="`5fe99087h8c717197c590_690`"></p><p><img src="http://p5mgr4bgm.bkt.clouddn.com/5fe99087h8c7179e9709d&amp;690.jpeg" alt="`5fe99087h8c7179e9709d_690`"></p><h3 id="隐藏图表刻度范围"><a href="#隐藏图表刻度范围" class="headerlink" title="隐藏图表刻度范围"></a>隐藏图表刻度范围</h3><p>选中图表，然后右击鼠标，在弹出的快捷菜单中选择[<code>图表选项</code>]选项，打开[<code>图表选项对话框</code>]，选择其中的[<code>坐标轴</code>]选项卡，取消[<code>数值(X)轴</code>]选项,最后[<code>确定</code>]。如图:</p><p><img src="http://p5mgr4bgm.bkt.clouddn.com/5fe99087h7471c248cc8f&amp;690.jpeg" alt="`5fe99087h7471c248cc8f_690`"></p><p>调整图表Y轴的刻度范围。双击图表的Y轴，打开[<code>坐标轴格式</code>]对话框，选择[<code>刻度</code>]选项卡，设置Y坐标轴的刻度范围,最后[<code>确定</code>]。如图：</p><p><img src="http://p5mgr4bgm.bkt.clouddn.com/5fe99087h8c71a9788219&amp;690.jpeg" alt="`5fe99087h8c71a9788219_690`"></p><h3 id="增加辅助X轴"><a href="#增加辅助X轴" class="headerlink" title="增加辅助X轴"></a>增加辅助X轴</h3><p>在图表上右击选择[<code>数据源</code>]在[<code>系列</code>]中添加[<code>名称</code>]：‘辅助X轴’；[<code>X值</code>]选择单元格C2：O2(泰勒曲线）；[<code>Y值</code>]选择单元格C7：O7(辅助线），最后[<code>确定</code>]，如图：</p><p><img src="http://p5mgr4bgm.bkt.clouddn.com/5fe99087h7471c85d637c&amp;690.jpeg" alt="`5fe99087h7471c85d637c_690`"></p><p>在[<code>图表</code>]工具栏中选择“系列‘辅助X轴’”，然后单击[<code>数据系列格式</code>]按钮。如图：</p><p><img src="http://p5mgr4bgm.bkt.clouddn.com/5fe99087h8c71e5d0946f&amp;690.jpeg" alt="`5fe99087h8c71e5d0946f_690`"></p><p>选择[<code>误差线Y</code>]，显示方式为[<code>正偏差</code>]，误差量选择[<code>定值</code>]，参数设100（因为X轴最大值设为100，也理解通过率100）。选择[<code>图案</code>]，[<code>线形</code>]选‘无’，[<code>数据标记</code>]选‘无’。如图：</p><p><img src="http://p5mgr4bgm.bkt.clouddn.com/5fe99087h7471cc7947d8&amp;690.jpeg" alt="`5fe99087h7471cc7947d8_690`"></p><p>选择[<code>数据标志</code>]，[<code>数据标签包括</code>]选‘Y值’，最后按[<code>确定</code>]键。</p><p><img src="http://p5mgr4bgm.bkt.clouddn.com/5fe99087h8c7204206acc&amp;690.jpeg" alt="`5fe99087h8c7204206acc_690`"></p><p><img src="http://p5mgr4bgm.bkt.clouddn.com/5fe99087h7471cf075928&amp;690.jpeg" alt="`5fe99087h7471cf075928_690`"></p><h3 id="关联数据标志"><a href="#关联数据标志" class="headerlink" title="关联数据标志"></a>关联数据标志</h3><p>在我们看到的图表如下，X轴全部是0值，因为报表上辅助线上的值都是0值，而最终我们希望得到的是实际的筛孔孔径（如：31.5）。因此，需求将X轴的数据标示和单元格进行关联，选择第二个数据标志，在编辑栏中输入“=Sheet1!$O$1”。如图：</p><p><img src="http://p5mgr4bgm.bkt.clouddn.com/5fe99087h8c724372add5&amp;690.jpeg" alt="`5fe99087h8c724372add5_690`"></p><p><img src="http://p5mgr4bgm.bkt.clouddn.com/5fe99087h8c725709be76&amp;690.jpeg" alt="`5fe99087h8c725709be76_690`"></p><p>在[<code>图表</code>]工具栏中选择“系列‘辅助X轴’数据标志”，然后单击[<code>数据系列格式</code>]按钮。选择[<code>对齐</code>]，[<code>标签位置</code>]选‘下方’；[<code>方向</code>]选文本方向为90度。按[<code>确定</code>]键，如图：</p><p> <img src="http://p5mgr4bgm.bkt.clouddn.com/5fe99087h8c724965451b&amp;690.jpeg" alt="`5fe99087h8c724965451b_690`"></p><p>其他孔径的关联数据标志，重复上面的步骤，依次将其他数据标志和单元格进行关联，实现X轴为实际的筛孔孔径。</p><h2 id="美化图表"><a href="#美化图表" class="headerlink" title="美化图表"></a>美化图表</h2><p>适当调整图表的大小，查看最后的图表效果如下图：</p><p><img src="http://p5mgr4bgm.bkt.clouddn.com/5fe99087h8c7286cfdb34&amp;690.jpeg" alt="`5fe99087h8c7286cfdb34_690`"></p><blockquote><p>最后,矿料合成级配图与Excel的规划求解功能（具体看“VBA调用‘规划求解’自动合成矿料级配”）结合使用，能大大提高你的工作效率。成为你工作中非常实用的工具。</p></blockquote>]]></content>
      
      <categories>
          
          <category> Excel </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Excel </tag>
            
            <tag> 试验 </tag>
            
            <tag> 级配 </tag>
            
            <tag> 泰勒曲线 </tag>
            
        </tags>
      
    </entry>
    
  
  
</search>
