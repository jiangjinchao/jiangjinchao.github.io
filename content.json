{"meta":{"title":"JinChao's Notes","subtitle":null,"description":"The dog equally study, the gentleman equally plays.","author":"Jiang JinChao","url":"http://www.jiangjinchao.pro"},"pages":[{"title":"","date":"2018-04-02T13:14:38.000Z","updated":"2018-04-03T10:42:56.519Z","comments":true,"path":"about/index.html","permalink":"http://www.jiangjinchao.pro/about/index.html","excerpt":"","text":"关于我福建路达工程建设有限公司创始人之一，高级工程师，试验检测工程师，花名：老江不辣。 专业集中在沥青混合料检测及沥青混合料配合比设计与优化（Superpave、SMA、AC、ATB、OGFC）通过应用 Spss 进行数据统计与分析，在公路项目建设实施过程中进行质量管理与控制。 热爱美好的事物，喜欢编程，酷爱摄影，小烧耳机，痴迷草缸。 1很喜欢崔健的歌词：现实像块石头，精神像个蛋，石头虽然坚硬，可蛋里才是生命。 [+]2017.03 参与三明市明溪县绕城公路项目工程建设 [+]2016.01 参与福州市闽侯县学院路改造提升项目工程建设 [+]2015.06 创建福建路达工程建设有限公司 [+]2015.01 从事福建省湄渝高速公路三明段检测工作 [+]2013.10 从事福建省沈海复线高速公路泉州段检测工作 [+]2012.12 从事福建省沈海复线高速公路莆田段检测工作 [+]2011.10 从事湖南省桂武高速公路检测工作 [+]2010.10 从事福建省永宁高速公路检测工作 [+]2008.01 参与公路试验软件开发与标准化工作 [+]2006.05 从事福建省龙长高速公路建设检测工作 [+]2005.07 毕业于重庆交通学院 [+]2004.12 从事广东省粤赣高速公路广东段检测工作 [+]2003.08 从事福建省京福高速公路福州段检测工作 [+]2003.07 入职福建路桥建设有限公司 [+]2003.06 毕业于福建交通学校 联系我 email：jinchao36@163.com Weibo 知乎 Facebook Twitter 500px 关于路达福建路达工程建设有限公司创建于2015年， 专业从事沥青路面施工、路面维护、设备租赁及沥青材料的生产与研发，对外承接福州及周边城市的大小型沥青路面摊铺施工，如市政道路工程（包括花园小区楼盘、学校跑道、厂区道路、室内外停车场），地方国省道”白改黑”及新建公路工程项目。 目前，公司拥有一批优秀的管理施工团队，其中高级工程师6名，工程师15名，检测师3名，初级职称25人。现有23台大型工程机械设备，如维特根W2000系列铣刨机3台、福格勒1900系列摊铺机6台，悍马系列压路机7台等国际先进品牌，设备进口率达80%以上，设备资产达2500万左右。 公司对市政或公路的路基路面具有丰富的施工经验，根据施工现场和业主的要求做出最优质的施工方案，可随时调度各种施工机械如刨路机、摊铺机、大小型压路机及各种牌号的沥青材料进行施工。充分发挥沥青施工过程中从生产、运输、摊铺、质检及验收等环节一站式服务的优势。 在施工过程中，公司形成了一套管理严密的安全、质量、进度及效益保障体系，坚持以科学技术为先导，广泛应用现代管理和先进施工技术增强企业整体实力。 福建路达始终奉行“路通天下、精信则达”的经营理念，十分重视新技术、新工艺的开发和运用，对施工方案及管理方法不断更新，注重质量管理，建立了一整套严密的质量管理和科学监测体系。 我们始终坚持“质量第一、管理一流”的方针，立足于福州，面向福建，努力打造路达品牌，树立企业形象。展望未来，我们充满信心与希望。 相信在未来更广阔的领域里福建路达能提供更优质的服务,为国家基础建设的发展做出更大的贡献。 1没有什么比时间更具有说服力了，因为时间无需通知我们就可以改变一切。 ——余华《活着》"},{"title":"","date":"2016-11-15T11:11:13.000Z","updated":"2018-04-22T11:19:42.669Z","comments":true,"path":"categories/index.html","permalink":"http://www.jiangjinchao.pro/categories/index.html","excerpt":"","text":"title: 分类"},{"title":"","date":"2018-04-02T23:08:28.000Z","updated":"2018-04-04T13:53:02.770Z","comments":true,"path":"guestbook/index.html","permalink":"http://www.jiangjinchao.pro/guestbook/index.html","excerpt":"","text":"工具 MathJax 数学公式语法(of MathJax) Font Awesome 适合 Web 应用的图标 Ultimate CSS Gradient Generator 也是渐变生成器 CSS Generators -CSSREFLEX CSS3 生成器 tiny png 用于压缩 png 或 jpg 的在线工具 图床 https://sm.ms/ 有 API 可用。 新浪微博图床 Chrome扩展 Unix 时间戳 Unix timestamp 在线正则表达式匹配 这个功能更强大一点，能清楚的区分出贪婪和懒惰正则。 http://regexr.com/ google fonts Google Fonts 加速代理 编程语言JavaScript JavaScript 标准参考教程（alpha） -阮一峰 JavaScript Promise迷你书 -azu You Don’t Know JS (book series) You Don’t Need jQuery 前端发展很快，现代浏览器原生 API 已经足够好用。我们并不需要为了操作 DOM、Event 等再学习一下 jQuery 的 API。同时由于 React、Angular、Vue 等框架的流行，直接操作 DOM 不再是好的模式，jQuery 使用场景大大减少。本项目总结了大部分 jQuery API 替代的方法，暂时只支持 IE10+ 以上浏览器。 YOU MIGHT NOT NEED JQUERY PLUGINS JavaScript 秘密花园 JavaScript 设计模式 系列 AlloyTeam ES2015 https://tc39.github.io/ecma262/ http://www.ecma-international.org/ecma-262/6.0/ ES2015规范 http://es6katas.org/ Learn ES6 by doing it. Fix failing tests. Keep all learnings. 30分钟掌握ES6/ES2015核心内容（上） 30分钟掌握ES6/ES2015核心内容（下） 《ECMAScript 6入门》 -阮一峰 EcmaScript6 全规范（含node） -ouvens NodeJS 七天学会NodeJS -Nanqiao Deng 框架&amp;脚手架webpack Webpack 中文指南 -赵达 Webpack傻瓜式指南（一） -前端外刊评论 知乎专栏 Webpack傻瓜指南（二）开发和部署技巧 -前端外刊评论 知乎专栏 Webpack傻瓜指南（三）和React配合开发 -前端外刊评论 知乎专栏 上述傻瓜指南的原始出处 https://github.com/vikingmute/webpack-for-fools Webpack傻瓜式指南 Webpack，101入门体验 -Yika Webpack 入门指迷 -题叶 https://webpack.github.io/ Webpack 官网 Vue awesome-vue Vue.js 和 Webpack（一） -Randy Lu Vue.js 和 Webpack（二） -Randy Lu Vue.js 和 Webpack（三） -Randy Lu Vuejs 1.0 中文系列视频教程 -Laravist Vuejs-QQ群 相关资料 来自豪情 React 深入理解 React -Thinking in React 中文版 Thinking in React AngularJS 学习AngularJS 1.x -Harry&#x68;&#x61;&#x72;&#x72;&#x79;&#64;&#97;&#x6e;&#x64;&#116;&#x6f;&#x6f;&#46;&#x6e;&#101;&#x74; 本书是作者 Harry 在学习和应用AngularJS 1.x 的过程中的资料梳理。希望能对大家学习AngularJS有一定帮助…… AngularJS api 官网 AngularJS入门教程——AngularJS中文社区提供 AngularJS 教程 | 菜鸟教程 类似 w3school 的入门 AngularJS 教程。 测试 测试框架 Mocha 实例教程 阮一峰 类库与插件 Masonry 瀑布流布局库。 jssor 图片轮播图其 GitHub 地址 jssor/slider cssslider 纯 CSS 的图片轮播图。 gumshoe A simple, framework-agnostic scrollspy script. smooth-scroll A simple vanilla JS script to animate scrolling to anchor links. 模块化 后端程序员的 JavaScript 之旅 - 模块化（一） 后端程序员的 JavaScript 之旅 - 模块化（二） 后端程序员的 JavaScript 之旅 - 模块化（三） CommonJS 规范 -来自 阮一峰 JavaScript 标准参考教程(alpha) other articles Cheat Sheet 将footer固定在页面底部的实现方法 HTML5 视频 By Pete LePage 编辑器Atom 中常用插件 auto-beautify autoprefixer block-comment color-picker docblockr emmet jquery-snippets jshint linter linter-csslint linter-htmlhint minimap minimap-git-diff minimap-codeglance 滑过 minimap 显示代码 minimap-find-and-replace 在 minimap 中显示 ctrl+D 选中的内容 open-in-browser uglify active-power-mode atom-terminal-panel linter-scss-linter atom-ternjs file-icons 将图标变成彩色 autocomplete-paths 自动补充路径 symbols-tree-view A symbol treeview like taglist 常用的主题： UI Theme: One Dark Syntax Theme: Atom Dark or One Dark GitBook 及其插件 Gitbook 的使用和常用插件 -赵达 gitbook-plugin-expandable-chapters 折叠左侧目录章节。 Chrome 插件 Octotree Code tree for GitHub and GitLab Chrome扩展及应用开发 -图灵电子书 有哪些鲜为人知却非常有意思、好用的 Chrome 扩展？ -知乎 Dribbble New Tab 新建 tab 时，显示 dribbble 上的精选作品。 Other blogs COLORFUL xiaoa 进击的马斯特 http://pinkyjie.com/ 马斯特，87年生人，爱溜冰的码农。技术： Javascript、Python、Mac、iOS Jerry Qu JerryQu，奇虎 360，前端开发，前百度前端。 码志 https://mazhuang.org/ 我是马壮，码而生，码而立。就职sogou。 小胡子哥 http://www.barretlee.com/ 李靖，阿里巴巴。 Xcat Liu http://blog.xcatliu.com/ Microsoft Software Engineer II, Meituan Senior Front-End Engineer 极限前端 http://ouvens.github.io/ Ouvenzhang, 前端工程师，对前端领域的技术知识具有较高的职业能力和探究精神。对响应式页面设计、工程构建组件化、mv*设计实现、前端优化、ES6开发体系等有深入的研究与项目实践。来自腾讯科技。 凳子_Joinery 邓智容 http://www.dengzhr.com/ 赵达的个人网站 腾讯高级前端开发工程师 Randy 95年出生的全栈。卢涛南，英文名 Randy，用 djyde 这个ID混迹于网络。 JS前端开发群月报 -豪情等人维护 交互设计相关 Framer Design the impossible with Framer FLINTO App Prototyping Tools for Designers Principle Animate Your Ideas, Design Better Apps https://gyrosco.pe/ 首页的卡片翻动效果非常赞。"},{"title":"schedule","date":"2018-04-04T13:20:31.000Z","updated":"2018-04-04T13:20:31.955Z","comments":true,"path":"schedule/index.html","permalink":"http://www.jiangjinchao.pro/schedule/index.html","excerpt":"","text":""},{"title":"","date":"2018-04-02T03:41:34.000Z","updated":"2018-04-27T07:22:01.973Z","comments":true,"path":"tags/index.html","permalink":"http://www.jiangjinchao.pro/tags/index.html","excerpt":"","text":"title: 标签"}],"posts":[{"title":"Hello World","slug":"hello-world","date":"2018-04-15T22:56:17.174Z","updated":"2018-04-17T14:08:16.410Z","comments":true,"path":"/2018/hello-world.html","link":"","permalink":"http://www.jiangjinchao.pro/2018/hello-world.html","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","categories":[],"tags":[]},{"title":"Next默认目录结构","slug":"Next默认目录结构","date":"2018-04-05T12:07:56.869Z","updated":"2018-04-05T16:33:12.793Z","comments":true,"path":"/2018/Next默认目录结构.html","link":"","permalink":"http://www.jiangjinchao.pro/2018/Next默认目录结构.html","excerpt":"Next默认目录结构1234567891011.├── .deploy├── public├── scaffolds├── scripts├── source| ├── _drafts| └── _posts├── themes├── _config.yml└── package.json deploy：执行hexo deploy命令部署到GitHub上的内容目录 public：执行hexo generate命令，输出的静态网页内容目录 scaffolds：layout模板文件目录，其中的md文件可以添加编辑 scripts：扩展脚本目录，这里可以自定义一些javascript脚本 source：文章源码目录，该目录下的markdown和html文件均会被hexo处理。该页面对应repo的根目录，404文件、favicon.ico文件，CNAME文件等都应该放这里，该目录下可新建页面目录。 drafts：草稿文章 posts：发布文章 themes：主题文件目录 _config.yml：全局配置文件，大多数的设置都在这里 package.json：应用程序数据，指明hexo的版本等信息，类似于一般软件中的关于按钮 然后我们需要修改样式的话是需要设置css和甚至是修改模板， 页面展现的全部逻辑都在每个主题中控制","text":"Next默认目录结构1234567891011.├── .deploy├── public├── scaffolds├── scripts├── source| ├── _drafts| └── _posts├── themes├── _config.yml└── package.json deploy：执行hexo deploy命令部署到GitHub上的内容目录 public：执行hexo generate命令，输出的静态网页内容目录 scaffolds：layout模板文件目录，其中的md文件可以添加编辑 scripts：扩展脚本目录，这里可以自定义一些javascript脚本 source：文章源码目录，该目录下的markdown和html文件均会被hexo处理。该页面对应repo的根目录，404文件、favicon.ico文件，CNAME文件等都应该放这里，该目录下可新建页面目录。 drafts：草稿文章 posts：发布文章 themes：主题文件目录 _config.yml：全局配置文件，大多数的设置都在这里 package.json：应用程序数据，指明hexo的版本等信息，类似于一般软件中的关于按钮 然后我们需要修改样式的话是需要设置css和甚至是修改模板， 页面展现的全部逻辑都在每个主题中控制 1234567891011121314151617181920212223242526272829303132333435363738├── .github #git信息├── languages #多语言| ├── default.yml #默认语言| └── zh-Hans.yml #简体中文| └── zh-tw.yml #繁体中文├── layout #布局，根目录下的*.ejs文件是对主页，分页，存档等的控制| ├── _custom #可以自己修改的模板，覆盖原有模板| | ├── _header.swig #头部样式| | ├── _sidebar.swig #侧边栏样式| ├── _macro #可以自己修改的模板，覆盖原有模板| | ├── post.swig #文章模板| | ├── reward.swig #打赏模板| | ├── sidebar.swig #侧边栏模板| ├── _partial #局部的布局| | ├── head #头部模板| | ├── search #搜索模板| | ├── share #分享模板| ├── _script #局部的布局| ├── _third-party #第三方模板| ├── _layout.swig #主页面模板| ├── index.swig #主页面模板| ├── page #页面模板| └── tag.swig #tag模板├── scripts #script源码| ├── tags #tags的script源码| ├── marge.js #页面模板├── source #源码| ├── css #css源码| | ├── _common #*.styl基础css| | ├── _custom #*.styl局部css| | └── _mixins #mixins的css| ├── fonts #字体| ├── images #图片| ├── uploads #添加的文件| └── js #javascript源代码├── _config.yml #主题配置文件└── README.md #用GitHub的都知道","categories":[{"name":"Next","slug":"Next","permalink":"http://www.jiangjinchao.pro/categories/Next/"}],"tags":[{"name":"Next","slug":"Next","permalink":"http://www.jiangjinchao.pro/tags/Next/"},{"name":"结构","slug":"结构","permalink":"http://www.jiangjinchao.pro/tags/结构/"},{"name":"目录","slug":"目录","permalink":"http://www.jiangjinchao.pro/tags/目录/"}]},{"title":"诏安印象","slug":"诏安印象","date":"2018-04-03T23:58:55.815Z","updated":"2018-04-12T23:36:33.582Z","comments":true,"path":"/2018/诏安印象.html","link":"","permalink":"http://www.jiangjinchao.pro/2018/诏安印象.html","excerpt":"前笔诏安县是“书画艺术之乡”、“中国民间文化艺术（绘画）之乡、“中国青梅之乡”、原中央苏区县、福建著名的侨乡和重要台胞祖籍地。本文将记录18年在诏安生活与工作上点滴，以备留念！","text":"前笔诏安县是“书画艺术之乡”、“中国民间文化艺术（绘画）之乡、“中国青梅之乡”、原中央苏区县、福建著名的侨乡和重要台胞祖籍地。本文将记录18年在诏安生活与工作上点滴，以备留念！ 2018-03-16 [手机的魔力] 2018-03-13 [傍晚时光] 2018-03-16 [街头小巷] 2018-03-13 [动车] 2018-03-13 [夕阳] 2018-03-20 [清晨]","categories":[{"name":"摄影","slug":"摄影","permalink":"http://www.jiangjinchao.pro/categories/摄影/"}],"tags":[{"name":"摄影","slug":"摄影","permalink":"http://www.jiangjinchao.pro/tags/摄影/"},{"name":"街拍","slug":"街拍","permalink":"http://www.jiangjinchao.pro/tags/街拍/"},{"name":"诏安","slug":"诏安","permalink":"http://www.jiangjinchao.pro/tags/诏安/"},{"name":"生活","slug":"生活","permalink":"http://www.jiangjinchao.pro/tags/生活/"},{"name":"手机","slug":"手机","permalink":"http://www.jiangjinchao.pro/tags/手机/"}]},{"title":"橡胶沥青应力吸收层施工方案","slug":"橡胶沥青应力吸收层施工方案","date":"2018-04-01T01:06:05.000Z","updated":"2018-04-03T15:24:42.830Z","comments":true,"path":"/2018/橡胶沥青应力吸收层施工方案.html","link":"","permalink":"http://www.jiangjinchao.pro/2018/橡胶沥青应力吸收层施工方案.html","excerpt":"应力吸收层是指铺筑于半刚性基层与沥青路面之间或者水泥混凝土路面与沥青路面之间，具有高变形能力的改性沥青层，它能够吸收裂缝部位的应力集中，防止沥青路面形成反射裂缝，加强层间黏结与防水，延长路面使用寿命的特点。","text":"应力吸收层是指铺筑于半刚性基层与沥青路面之间或者水泥混凝土路面与沥青路面之间，具有高变形能力的改性沥青层，它能够吸收裂缝部位的应力集中，防止沥青路面形成反射裂缝，加强层间黏结与防水，延长路面使用寿命的特点。 主要施工机械及检测仪器主要施工机械 橡胶沥青生产设备一套 橡胶沥青碎石同步封层车一台 洒水车 森林灭火鼓风机2台 压路机：25T轮胎压路机1台 ZL50装载机1台 主要检测仪器 沥青针入度仪器 沥青延度仪 沥青软化点仪 布式旋转粘度计 标准筛（方筛孔） 施工工艺 施工前应进行基层的清扫、吸尘和清洗。先人工用竹扫帚将基层表面进行全面清扫，再用2～3台森林灭火鼓风机沿纵向排成斜线将浮灰吹净，若不能达到”除净”的要求，则用水冲洗，清除基层表面浮灰和泥浆，尽量使基层顶面集料颗粒能部分外露。 确定橡胶粉的掺量一般选择至少三个不同的橡胶粉掺量（例如14％、16％、18％）进行试验，将橡胶粉加入沥青的温度范围在177～204℃之间，拌和1小时后进行试验。根据试验结果选取合适的橡胶粉掺量，橡胶沥青各项指标应满足表3技术要求。 橡胶沥青的生产应由熟练人员操作橡胶沥青生产设备，采用间歇式方式生产。操作人员准确控制导热油温度，准确控制配料比例。对成品橡胶沥青及时进行各项检验。 在洒布橡胶沥青前，应注意检查空气温度和地面温度都不得低于15℃，下承层必须干燥，路缘石防护良好。风速不影响橡胶沥青洒布效果。需用的设备进入待命状态，包括橡胶沥青洒布车、碎石撒布机、胶轮压路机。 橡胶沥青洒布橡胶沥青洒布量采用1.5～2.0kg/㎡,采用预裹附的集料时。 起步和终止位置应铺工程纸（油毛毡），以准确进行横向衔接，洒布车经过后应及时取走工程纸。 纵向衔接应与已洒布部分重叠10cm左右。 撒铺碎石前禁止任何车辆、行人通过橡胶沥青层。 撒铺碎石喷洒橡胶沥青后应立即撒铺碎石，碎石撒铺量为8-12 kg/㎡,根据试铺情况确定，以满铺、不散失为度，碎石覆盖率要达到80%以上,对于局部碎石撒铺量不足的地方，用人工补足。 碾压采用25T以上的胶轮压路机进行压实。碎石撒铺后应立即进行碾压作业，胶轮压路机应同时进行碾压，紧跟碎石撒铺车，碾压数为2遍。 在铺筑上层沥青混合料前，应对橡胶沥青应力吸收层进行清扫，以清除没有粘结的松散碎石，避免影响应力吸收层与上面层的粘结。 橡胶沥青应力吸收层施工应与上面层沥青混凝土紧凑进行，中间不开放交通，若期间必须开放交通，须待应力吸收层施工完成3小时后方可开放交通，但车速不宜超过25km/h。 橡胶沥青应力吸收层施工要求原材料质量控制要求橡胶粉橡胶粉颗粒规格应符合下表要求。橡胶粉筛分应采用水筛法进行试验。橡胶粉密度应为1.15 0.05 g/cm3，应无铁丝或其它杂质，纤维比例应不超过0.5%。供应商应提供橡胶粉质量保证书，说明橡胶粉规格、加工方式、加工的废旧轮胎类型、橡胶粉的储存方式等。 橡胶沥青橡胶改性沥青应满足以下技术要求，其抽检项目符合下表的要求。 集料应力吸收层应采用石质坚硬、清洁、不含风化颗粒、近立方体颗粒的破碎卵碎石，应选用反击式破碎机轧制的碎石，规格为5mm～10mm。橡胶沥青应力吸收层集料级配范围如下表。 质量管理 施工阶段的检测项目包括：橡胶沥青性质、橡胶沥青洒布量、集料洒布量、刹车试验、外观检查等。 检验方法及检验标准见下表 橡胶沥青洒布量和碎石洒铺量控制沥青洒布量控制将要洒布沥青时，在标准尺寸矩形容器内置沥青油毡，称其重量并置于洒布车前5～10m，待洒布车经过容器后立即取出再称其重，以此计算实际撒布量，再结合沥青洒布车电脑调节装置直到设计洒布量为止。碎石撒布量控制将要洒布碎石时，取一标准尺寸矩形容器称其重量并置于撒布车前已洒布沥青路面的路段最尾处，待洒布车经过容器后立即取出再称其重，以此计算实际洒布量，然后通过调节装置直至调到设计洒布量为止。 橡胶沥青施工时间关键点 沥青车预热准备时间为2小时 沥青撤布车，泵满6吨沥青的时间为20分钟。 沥青撒布车每6吨橡胶沥青每升温10℃时间约为1小时，185℃升到200℃需要约90分钟。 正常的工作时间。撤布完6吨橡胶沥青的时间为1-2小时。 原材料规格及厂家基质沥青橡胶沥青所用的基质沥青采用70号道路石油沥青，其技术要求见表1。 橡胶粉橡胶沥青所采用的橡胶粉规格应符合表2要求。橡胶粉筛分应采用水筛法进行试验。橡胶粉密度应为1.15 0.05 g/cm3，应无铁丝或其它杂质，纤维比例应不超过0.5%，要求含有橡胶粉重量4%的碳酸钙，以防止胶粉颗粒相互粘结。供应商应提供橡胶粉质量保证书，说明橡胶粉规格、加工方式、加工的废旧轮胎类型、橡胶粉的储存方式等。","categories":[{"name":"施工方案","slug":"施工方案","permalink":"http://www.jiangjinchao.pro/categories/施工方案/"}],"tags":[{"name":"施工","slug":"施工","permalink":"http://www.jiangjinchao.pro/tags/施工/"},{"name":"橡胶沥青","slug":"橡胶沥青","permalink":"http://www.jiangjinchao.pro/tags/橡胶沥青/"},{"name":"应力吸收层","slug":"应力吸收层","permalink":"http://www.jiangjinchao.pro/tags/应力吸收层/"},{"name":"路面","slug":"路面","permalink":"http://www.jiangjinchao.pro/tags/路面/"}]},{"title":"非离子乳化沥青防水涂料的配方及制作工艺","slug":"非离子乳化沥青防水涂料的配方及制作工艺","date":"2018-03-31T01:06:05.000Z","updated":"2018-04-02T23:47:58.337Z","comments":true,"path":"/2018/非离子乳化沥青防水涂料的配方及制作工艺.html","link":"","permalink":"http://www.jiangjinchao.pro/2018/非离子乳化沥青防水涂料的配方及制作工艺.html","excerpt":"","text":"乳化沥青防水涂料是一种非离子型冷施工的防水、黏结材料。施工时呈液态，为棕褐色液体（硬化后成黑色），本产品无毒、无臭、不燃，具有良好的涂覆和黏结性，干燥快，干燥后变成一种稳定的薄膜，是一种“湿流干凝”材料。 原料及制作工艺原料 甲液：平平加O（2.2-2.4） 聚乙烯醇（4-4.2） 氢氧化钠（0.45-0.5） 泡花碱（中性）（1.4-1.6） 水（100） 乙液：10#沥青（25）、60#沥青（75） 制作工艺 将10#和60#沥青按配合比称量加入锅内，加热至200-220℃溶液脱水过滤后，降温至150-160℃以备待用（乙液）; 按配合比称取一定数量的基乙烯醇加入桶内（用前先用少量清水浸泡一夜，便于加热溶化）加入一定量的水，用水浴法加热搅拌使之溶解。; 将乳化剂按配合比分别加入已知质量的80-90℃热水中。加料次序是先加氢氧化钠，搅拌使其溶解，随即加泡花碱及聚乙烯醇搅拌均匀，再加平平加O成为混合液，再加足水量保持70-80℃左右待用（甲液）; 将乳化剂溶液（甲液）倒入搅拌机中，开机搅拌，即将事先准备好的沥青溶液（乙液）徐徐注入匀化机中进行乳化，经3-4min后，将出料阀门打开，将乳化沥青放出，经冷却装桶密封保存。","categories":[{"name":"乳化沥青","slug":"乳化沥青","permalink":"http://www.jiangjinchao.pro/categories/乳化沥青/"}],"tags":[{"name":"工艺","slug":"工艺","permalink":"http://www.jiangjinchao.pro/tags/工艺/"},{"name":"乳化沥青","slug":"乳化沥青","permalink":"http://www.jiangjinchao.pro/tags/乳化沥青/"},{"name":"防水","slug":"防水","permalink":"http://www.jiangjinchao.pro/tags/防水/"},{"name":"配方","slug":"配方","permalink":"http://www.jiangjinchao.pro/tags/配方/"}]},{"title":"SBS胶乳改性乳化沥青稳定性研究","slug":"SBS胶乳改性乳化沥青稳定性研究","date":"2018-03-30T11:06:05.000Z","updated":"2018-04-03T15:41:12.855Z","comments":true,"path":"/2018/SBS胶乳改性乳化沥青稳定性研究.html","link":"","permalink":"http://www.jiangjinchao.pro/2018/SBS胶乳改性乳化沥青稳定性研究.html","excerpt":"胶乳类作为改性剂制备改性乳化沥青时，乳化沥青和胶乳在乳化剂的作用下，破坏各自原有的平衡，重新建立起一种新的平衡，如果这种平衡不能稳定存在，将会影响改性乳化沥青的生产、储存和使用。因此，乳液稳定性是评价改性乳化沥青的关键指标。而改性乳化沥青的稳定性与制备工艺、乳化剂用量、胶乳与乳化沥青颗粒大小等诸多因素有关。从热力学的角度分析，任何乳状液都不是稳定的，随着时间的推移、环境温度的变化或接触介质的变化，都可能引起乳状液的分层、絮凝和聚集，最终导致乳状液的破坏。改性乳化沥青是一种热力学不稳定体系，其稳定性是由所添加的乳化剂、乳液稳定剂等产生的各种作用而引起的。维持乳液稳定性的各种理论主要有吸附理论、膜理论、吸附双电层理论等。","text":"胶乳类作为改性剂制备改性乳化沥青时，乳化沥青和胶乳在乳化剂的作用下，破坏各自原有的平衡，重新建立起一种新的平衡，如果这种平衡不能稳定存在，将会影响改性乳化沥青的生产、储存和使用。因此，乳液稳定性是评价改性乳化沥青的关键指标。而改性乳化沥青的稳定性与制备工艺、乳化剂用量、胶乳与乳化沥青颗粒大小等诸多因素有关。从热力学的角度分析，任何乳状液都不是稳定的，随着时间的推移、环境温度的变化或接触介质的变化，都可能引起乳状液的分层、絮凝和聚集，最终导致乳状液的破坏。改性乳化沥青是一种热力学不稳定体系，其稳定性是由所添加的乳化剂、乳液稳定剂等产生的各种作用而引起的。维持乳液稳定性的各种理论主要有吸附理论、膜理论、吸附双电层理论等。 试验部分试验原料 基质沥青：胜利90号； 乳化剂：JQT，阳离子型，江阴峭歧股份有限公司生产； 改性剂：自制的SBS胶乳：固含量为40.68%，具有很好的稳定性； 稳定剂；CaCl2：化学纯；聚丙烯酰胺； 盐酸：化学纯。 试验设备沥青乳化机：温州兴达机械制造厂生产，型号YXD-60。 制备工艺按胶乳混合状态分类，改性乳化沥青的制备方法通常有3种：二次热混合法、一次热混合法和一次冷混合法。目前普遍认为二次热混合法的乳化效果较好。试验采用二次热混合法，其工艺流程见图1。即先将SBS胶乳和乳化剂的水溶液经混合剪切进行第一次混合，然后再加入热的沥青，在沥青乳化剂的作用下进行第二次乳化分散的过程。 SBS胶乳的制备取25g线型的SBS-792于烧杯中，加入一定量的甲苯溶剂，放置1h，使得SBS充分溶胀；再于烧杯中加入定量的以阳离子为主的复配型乳化剂，此混合液在高分散乳化机作用下，慢慢注入定量的热蒸馏水，在此过程中，乳化机的转速为10 000rpm；待水加入完毕后，调节乳化机转速至16 000rpm，作用30min，得O/W型初级乳液；此初级乳液通过减压蒸馏分出其中的甲苯溶剂，得SBS胶乳。 试验结果与讨论乳化剂用量的影响乳化剂的用量少，乳化效果不好，乳液中沥青微粒粒径大小不均，体系的储存稳定性下降；用量多，使生产成本提高，造成浪费。通过考察乳化剂用量对沥青乳化后储存稳定性的影响，进而也可以确定乳化剂的最佳用量。影响见图2。改性乳化沥青中，SBS胶乳的含量为总物料的6%。从图2可以看出，乳化剂的用量在0.4%-0.8%范围内时，乳化沥青的储存稳定性随乳化剂的用量变化很大，当用量大于0.8%时，乳化沥青的储存稳定性几乎保持不变，且乳液具有很好的储存稳定性。对于加入6%SBS胶乳(相当于4.8%的固体SBS含量)的改性乳化沥青，乳化剂用量小于1%时，其储存稳定性随乳化剂用量的增加变化较大，乳化剂用量大于1%，乳化剂的用量对改性乳化沥青的储存稳定性影响较小，体系趋于稳定。当乳化剂用量较少时，乳化剂不能使水的表面张力充分降低，沥青和水几乎是直接接触着的，乳化效果不好，所以稳定性差；随着乳化剂量的增加，沥青乳液逐渐开始趋向于稳定的状态，乳化剂分子的亲水和亲油基团分别和水、改性沥青结合。再增加乳化剂用量，沥青乳液稳定性的变化不大时，说明沥青乳液中乳化剂含量已经达到临界胶束浓度。从图2可以看出，阳离子乳化剂JQT在含量为1%时才能在改性乳化沥青中达到临界胶束浓度。 稳定剂用量的影响用单一乳化剂制备沥青乳液，其乳液颗粒有时会粗大不均，易发生絮凝或者沉降现象。 如果在单一乳化剂中添加稳定剂制备沥青乳液，则可以得到颗粒均匀而微细的乳液。稳定剂包括无机稳定剂和有机稳定剂。其中稳定效果最好的无机盐类物质为氯化铵和氯化钙。有机盐类稳定剂有胺类、聚乙烯醇、聚丙烯酰胺、羧甲基纤维素钠等，因此选择适宜的稳定剂是保证乳化沥青稳定的重要措施。 试验在乳化剂和改性剂用量为总物料的1%和6%条件下，分别考察无机稳定剂CaCl2和有机稳定剂聚丙烯酰胺及其复配后对改性乳化沥青储存稳定性的影响。见图3。 图3表明，无论是无机类还是有机类稳定剂，改性乳化沥青的储存稳定性并不随其用量的增加而呈现降低的趋势，其用量存在一个最佳值。出现此原因，主要是因为添加稳定剂能够增强乳液颗粒周围的双电层效应，增加f电位和颗粒之间的相互排斥力，只有当颗粒间的排斥力达到某一平衡时，颗粒间才可以稳定共存；排斥力太大或太小，都会使得颗粒之间存在凝聚，不能起到很好的稳定效果。由此可以看出，CaCl2的最佳用量为0.2%；聚丙烯酰胺和1：1质量比复配的CaCl2和聚丙烯酰胺的最佳用量都为0.15%。 从图3中还可以看出，聚丙烯酰胺的稳定效果优于CaCl2，究其原理，是沥青乳液中加入聚丙烯酰胺稳定剂，可以提高水相粘度，能在分散的微粒上形成界面膜，使其微粒相互碰撞时不易聚结，减小沥青微粒的沉降速度。界面膜由密排的定向分子组成，膜的强度较大，沥青微粒聚结需要克服的阻力也大，因而沥青乳液越能稳定。加入CaCl2后增大水相密度，减小与沥青相的密度差，能够增强乳液颗粒周围的双电层效应，增大f电位，增加颗粒之间的相互排斥力，减缓颗粒之间的合一凝聚速度。从试验结果可以看出，对于胜利90号重交通道路石油沥青来说，增加乳液的粘度和密度虽都可以达到稳定的效果，但是粘度的增加对储存稳定性的贡献更大。而复配的CaCl2和聚丙烯酰胺作为稳定剂时，其一方面增加水相的粘度，另一方面增加水相的密度，在与单一稳定剂用量相同的条件下，其可以起到双重的稳定效果，故可以大大改善改性乳化沥青的储存稳定牲。因此，对于胜利90号重交通道路石油沥青，采用无机和有机复配的稳定剂效果最好。 乳化剂溶液的pH值的影响对于阳离子乳化剂，主要在酸性条件下使用。以季铵盐型乳化剂配制乳化液时，由于其乳化剂易溶于水，不需添加酸。但如果在季铵盐中添加有机或者无机酸调整溶液的pH值，能够增强乳化剂本身的活性，在提高乳化稳定性和储存稳定性的同时，可以降低乳化剂的用量。此试验采用盐酸来调节乳化剂的pH值，在没有添加稳定剂的条件下考察乳液pH值对改性乳化沥青存储稳定性的影响。其中SBS胶乳的加入量为6%，乳化剂用量为l%。见表l。 表1 乳化剂水溶液pH值对改性乳化沥青储存稳定性的影响 从表1可以看出，乳化剂水溶液本身的pH值范围为5-6，而与SBS胶乳的pH值的范围相同，因此两种乳液混合后颗粒的稳定性好。对于乳化沥青来说，加入酸，可能会使乳液达到较好的稳定性，而在此试验中效果恰恰相反，从表中数据可以看出，随着酸的加入，pH变小，体系的储存稳定性下降。由此可见，在采用胶乳类改性剂制备改性乳化沥青时，要得到稳定体系，需调整乳化剂水溶液的pH值与改性剂乳液的一致。 SBS胶乳对体系微观稳定性的影响由于SBS胶乳作为改性剂时，其用量只有百分之几，考察其对改性乳化沥青储存稳定性的影响，不能从根本上反映出SBS在体系中的分散状况，因此本试验采用德国莱卡公司生产的光学电子显微镜进行分析。图4和图5分别为改性剂SBS胶乳用量为6%时的光学显微镜图。放大倍数分别为400和l 000倍。从图中可以看出SBS颗粒(白色颗粒)在乳化沥青中分散比较均匀，没有明显的聚集结胶现象。通过透射电镜分析，得出SBS颗粒平均粒径为1.97 p.m，沥青的平均粒径为2.53 p.m。测量SBS胶乳20C的密度为0.990lg/cm-1，乳化沥青的密度1.089g/cm-1。两者颗粒大小、密度的相近是保证SBS在体系中均匀分散的重要因素。此外，影响改性乳化沥青稳定性的因素还有制备工艺、乳化设备、沥青特性等诸多因素。为了使改性乳化沥青具有一定的稳定性，.在研制生产过程中，应采取以下措施：(1)应尽量选择结构与沥青组成结构相同或相似的乳化剂以提高其亲和力，且乳化剂的用量要达到临界胶束浓度；(2)应设法提高连续相(水相)的粘度，以降低颗粒的沉降速率；(3)应尽量减少分散相与连续相之间的密度差；(4)应调整乳化剂水溶液的pH值，以保证对沥青的完全乳化，此外也要与胶乳类改性剂的pH值相同或接近；(5)应尽量选用乳化后颗粒大小与沥青颗粒大小相近的改性剂。 SBS胶乳改性乳化沥青的性能分析根据稳定性考察得出的各影响因素的最佳用量制备改性乳化沥青，即乳化剂JQT的用量为1%；SBS胶乳用量为6%；稳定剂选用1 c1质量比复配的。CaCl2和聚丙烯酰胺，用量为o.15%。其中沥青与水的比例为50：50，乳化机转速1 000rpm，乳化时间为3rain。对其的性质进行分析，分别采用相应的行业标准。具体数据列于下表2。 从表2中可以看出，所制备的改性乳化沥青的各项性能均满足公路施工技术规范的要求，是一效果较好的改性乳化沥青。从蒸发残留物性能来看，改性后针入度、软化点和延度相对于基质沥青(25℃针入度：85 1/10mm；软化点：47.5C，5C延度：脆断)都有不同程度的改善，进而说明SBS胶乳对沥青具有很好的改性效果，是一性能较好的改性剂乳液。 结论 阳离子乳化剂JQT在用量为1%时达到其临界胶束浓度，即其的最佳用量为1%。-对于胜利90号重交通道路石油沥青，无机类和有机类稳定剂复配后可以大大提高其的储存稳定性。 对于乳化剂JQT，加酸降低其水溶液的pH值反而对改性乳化沥青的储存稳定性不利。 SBS颗粒的大小和密度与乳化后沥青颗粒的大小和乳化沥青的密度匹配时，可以使得SBS颗粒在乳化沥青中分散均匀。 根据试验得出的各因素的最佳用量制备出性能优良的改性乳化沥青，通过SBS胶乳改性前后沥青的三项指标分析得出，SBS胶乳具有很好的改性效果，是一较好的改性剂乳液。","categories":[{"name":"改性乳化沥青","slug":"改性乳化沥青","permalink":"http://www.jiangjinchao.pro/categories/改性乳化沥青/"}],"tags":[{"name":"SBS","slug":"SBS","permalink":"http://www.jiangjinchao.pro/tags/SBS/"},{"name":"改性乳化沥青","slug":"改性乳化沥青","permalink":"http://www.jiangjinchao.pro/tags/改性乳化沥青/"},{"name":"稳定性","slug":"稳定性","permalink":"http://www.jiangjinchao.pro/tags/稳定性/"},{"name":"工艺","slug":"工艺","permalink":"http://www.jiangjinchao.pro/tags/工艺/"}]},{"title":"Ubuntu16.04设置Pycharm桌面快捷键","slug":"Ubuntu16.04-pycharm-icon-setting","date":"2018-03-30T01:15:16.124Z","updated":"2018-04-04T06:41:46.527Z","comments":true,"path":"/2018/Ubuntu16.04-pycharm-icon-setting.html","link":"","permalink":"http://www.jiangjinchao.pro/2018/Ubuntu16.04-pycharm-icon-setting.html","excerpt":"Ubuntu下所有的快捷方式都在：1/usr/share/applications 解压这里我将pycharm下载并解压到了/home/snakeson/developer文件夹下 这里的pycharm.sh是批处理执行文件，prcharm.png是快捷方式图标 终端打开使用Ubuntu终端进行打开：方法一（使用vim）：1sudo vi /usr/share/applications/pycharm.desktop 方法二（使用gedit）： 1sudo gedit /usr/share/applications/pycharm.desktop 然后就会弹出一个新框：","text":"Ubuntu下所有的快捷方式都在：1/usr/share/applications 解压这里我将pycharm下载并解压到了/home/snakeson/developer文件夹下 这里的pycharm.sh是批处理执行文件，prcharm.png是快捷方式图标 终端打开使用Ubuntu终端进行打开：方法一（使用vim）：1sudo vi /usr/share/applications/pycharm.desktop 方法二（使用gedit）： 1sudo gedit /usr/share/applications/pycharm.desktop 然后就会弹出一个新框： 张贴我们将下面的内容贴上去：12345678910[Desktop Entry]Type=ApplicationName=PycharmGenericName=Pycharm3Comment=Pycharm3:The Python IDEExec=\"/home/snakeson/developer/pycharm-community-2017.2.3/bin/pycharm.sh\" %fIcon=/home/snakeson/developer/pycharm-community-2017.2.3/bin/pycharm.pngTerminal=pycharmCategories=Pycharm; 注意一定要将Desktop Entry复制进去，也就是上面的全部都要复制进去，这里我们需要替换掉两个地方：Exec=”xx”和Icon=,这里要替换掉我们的pycharm解压的目录，当然了，我已经替换好了，如果你的目录跟我的目录不一样的话，你得把路径给换了，不管你是pycharm2017还是pycharm2016,，例如Comment什么的都不要改变，只变上面提到的两个路径就可以了。 添加可执行权限1sudo chmod +x /usr/share/applications/pycharm.desktop 拷贝到桌面1将/usr/share/applications/pycharm.desktop文件拷贝到桌面，双击即可运行。","categories":[{"name":"SnakeSon","slug":"SnakeSon","permalink":"http://www.jiangjinchao.pro/categories/SnakeSon/"}],"tags":[{"name":"Ubuntu","slug":"Ubuntu","permalink":"http://www.jiangjinchao.pro/tags/Ubuntu/"},{"name":"Pycharm","slug":"Pycharm","permalink":"http://www.jiangjinchao.pro/tags/Pycharm/"}]},{"title":"Git 如何 clone 非 master 分支的代码","slug":"git-clone-not-master-branch","date":"2018-03-30T01:15:16.121Z","updated":"2018-04-04T06:41:06.362Z","comments":true,"path":"/2018/git-clone-not-master-branch.html","link":"","permalink":"http://www.jiangjinchao.pro/2018/git-clone-not-master-branch.html","excerpt":"问题描述我们每次使用命令 1git clone git@gitlab.xxx.com:xxxxx.git 默认 clone 的是这个仓库的 master 分支。如果最新的代码不在 master 分支上，该如何拿到呢？如下图所示，最新的代码可能在daily/1.4.1分支上，我们希望拿到这个分支上的代码。","text":"问题描述我们每次使用命令 1git clone git@gitlab.xxx.com:xxxxx.git 默认 clone 的是这个仓库的 master 分支。如果最新的代码不在 master 分支上，该如何拿到呢？如下图所示，最新的代码可能在daily/1.4.1分支上，我们希望拿到这个分支上的代码。 解决方法刚刚开周会的时候，自己洋洋得意的分享我的解决方案，但是……经过与团队成员的的讨论，自己的方法弱爆了，现在把更优雅的方法写一下。原来写的方法并不太适合用在这个场景里。 我之前写的方法在文章后面。 直接使用命令 1git branch -r #查看远程分支 或 1git branch -a #查看所有分支 会显示 1234567origin/HEAD -&gt; origin/masterorigin/daily/1.2.2origin/daily/1.3.0origin/daily/1.4.1origin/developorigin/feature/daily-1.0.0origin/master 然后直接 1git checkout origin/daily/1.4.1 就好了。。。 原来的解决方案其实我原来写的这个方法更多的是：设置已有的本地分支跟踪一个刚刚拉取下来的远程分支，或者想要修改正在跟踪的上游分支。 我们在本地先建立一个分支，建议名称和远程的想要同步的分支名称一样。 1git branch daily/1.4.1 在切换到这个本地分支 12git checkout daily/1.4.1# Switched to branch &apos;daily/1.4.1&apos; 接下来就可以去建立上游分支的关联了，但是这个命令比较长，不好记，我们可以直接先pull一下，git 会提示我们相应的操作和命令。 12345678910git pullThere is no tracking information for the current branch.Please specify which branch you want to merge with.See git-pull(1) for details. git pull &lt;remote&gt; &lt;branch&gt;If you wish to set tracking information for this branch you can do so with: git branch --set-upstream-to=origin/&lt;branch&gt; daily/1.4.1 我们看到最后一行，执行这个命令，即可完成与上游分支的关联。 12git branch --set-upstream-to=origin/daily/1.4.1 daily/1.4.1# Branch daily/1.4.1 set up to track remote branch daily/1.4.1 from origin. 然后再pull一下就好了！ 1git pull","categories":[{"name":"GitHub","slug":"GitHub","permalink":"http://www.jiangjinchao.pro/categories/GitHub/"}],"tags":[{"name":"Git","slug":"Git","permalink":"http://www.jiangjinchao.pro/tags/Git/"},{"name":"GitHub","slug":"GitHub","permalink":"http://www.jiangjinchao.pro/tags/GitHub/"},{"name":"分支","slug":"分支","permalink":"http://www.jiangjinchao.pro/tags/分支/"}]},{"title":"Fisher–Yates shuffle 洗牌算法","slug":"shuffle-algorithm","date":"2018-03-30T01:15:16.121Z","updated":"2018-04-12T22:57:22.965Z","comments":true,"path":"/2018/shuffle-algorithm.html","link":"","permalink":"http://www.jiangjinchao.pro/2018/shuffle-algorithm.html","excerpt":"简单来说 Fisher–Yates shuffle 算法是一个用来将一个有限集合生成一个随机排列的算法（数组随机排序）。这个算法生成的随机排列是等概率的。同时这个算法非常高效。 本文主要介绍这个算法的来源、演变、原理。并举出一个例子为大家清晰的描述每次迭代过程。最后使用 JavaScript 代码将算法实现。","text":"简单来说 Fisher–Yates shuffle 算法是一个用来将一个有限集合生成一个随机排列的算法（数组随机排序）。这个算法生成的随机排列是等概率的。同时这个算法非常高效。 本文主要介绍这个算法的来源、演变、原理。并举出一个例子为大家清晰的描述每次迭代过程。最后使用 JavaScript 代码将算法实现。 Fisher and Yates 的原始版 Fisher–Yates shuffle 的原始版本，最初描述在 1938 年的 Ronald Fisher（上图） 和 Frank Yates 写的书中，书名为《Statistical tables for biological, agricultural and medical research》。他们使用纸和笔去描述了这个算法，并使用了一个随机数表来提供随机数。它给出了 1 到 N 的数字的的随机排列，具体步骤如下： 写下从 1 到 N 的数字 取一个从 1 到剩下的数字（包括这个数字）的随机数 k 从低位开始，得到第 k 个数字（这个数字还没有被取出），把它写在独立的一个列表的最后一位 重复第 2 步，直到所有的数字都被取出 第 3 步写出的这个序列，现在就是原始数字的随机排列 已经证明如果第 2 步取出的数字是真随机的，那么最后得到的排序一定也是。 现代方法Fisher–Yates shuffle 算法的现代版本是为计算机设计的。由 Richard Durstenfeld 在1964年 描述。并且是被 Donald E. Knuth 在 《The Art of Computer Programming》 中推广。但是不管是 Durstenfeld 还是 Knuth，都没有在书的第一版中承认这个算法是 Fisher 和 Yates 的研究成果。也许他们并不知道。不过后来出版的 《The Art of Computer Programming》提到了 Fisher 和 Yates 贡献。 现代版本的描述与原始略有不同，因为如果按照原始方法，愚蠢的计算机会花很多无用的时间去计算上述第 3 步的剩余数字。这里的方法是在每次迭代时交换这个被取出的数字到原始列表的最后。这样就将时间复杂度从 O(n^2) 减小到了 O(n)。算法的伪代码如下： 1234-- To shuffle an array a of n elements (indices 0..n-1):for i from n−1 downto 1 do j ← random integer such that 0 ≤ j ≤ i exchange a[j] and a[i] 例子迭代步骤演示根据每次迭代次数可以用下面的表格，描述这个算法的执行过程 随机数取值范围 随机数 原始数据 结果 1 2 3 4 5 6 7 8 1-8 6 1 2 3 4 5 7 8 6 1-7 2 1 7 3 4 5 8 2 6 1–6 6 1 7 3 4 5 8 2 6 1–5 1 5 7 3 4 1 8 2 6 1–4 3 5 7 4 3 1 8 2 6 1–3 3 5 7 4 3 1 8 2 6 1–2 1 7 5 4 3 1 8 2 6 动画演示下面这个动画就是整个数组 0-19 的随机排序过程 See the Pen Fisher–Yates shuffle by Chuan shi (@haoyang) on CodePen. JavaScript 代码实现12345678910111213141516/** * Fisher–Yates shuffle */Array.prototype.shuffle = function() &#123; var input = this; for (var i = input.length-1; i &gt;=0; i--) &#123; var randomIndex = Math.floor(Math.random()*(i+1)); var itemAtIndex = input[randomIndex]; input[randomIndex] = input[i]; input[i] = itemAtIndex; &#125; return input;&#125; 使用方式也很简单，直接用数组调用这个方法即可 123[1,2,3,4,5,6,7,8].shuffle()//[4, 6, 3, 2, 5, 1, 7, 8] // 每次结果都是随机的 总结总之，Fisher–Yates shuffle 算法是一个非常高效又公平的随机排序算法，如果有随机排序数组的需求，用这个就对了！ 参考 Fisher–Yates shuffle From Wikipedia","categories":[{"name":"JavaScript","slug":"JavaScript","permalink":"http://www.jiangjinchao.pro/categories/JavaScript/"}],"tags":[{"name":"算法","slug":"算法","permalink":"http://www.jiangjinchao.pro/tags/算法/"},{"name":"shuffle","slug":"shuffle","permalink":"http://www.jiangjinchao.pro/tags/shuffle/"},{"name":"乱序","slug":"乱序","permalink":"http://www.jiangjinchao.pro/tags/乱序/"},{"name":"洗牌","slug":"洗牌","permalink":"http://www.jiangjinchao.pro/tags/洗牌/"}]},{"title":"JavaScript 语言精粹笔记2-方法、毒瘤等","slug":"JavaScript-good-parts-note2","date":"2018-03-30T00:50:23.543Z","updated":"2018-04-04T21:51:07.366Z","comments":true,"path":"/2018/JavaScript-good-parts-note2.html","link":"","permalink":"http://www.jiangjinchao.pro/2018/JavaScript-good-parts-note2.html","excerpt":"记录一下阅读蝴蝶书的笔记，本篇为书中最后一部分：方法、代码风格、优美的特性、毒瘤、糟粕等。 方法这一章主要介绍了一些方法集。这里写几个我不太熟悉的方法和要点吧。 array.join() 对于IE6/7，使用array.join()连接大量字符串的效率确实优于使用+元素运算符。但是目前主流的浏览器，包括IE8以后的版本，都对+元素运算符连接字符串做了特别优化，性能已经显著高于array.join()。 number.toExponential(fractionDigits) 把这个number转换成一个指数形式的字符串。 number.toFixed(fractionDigits) 将这个number转换成一个十进制形式的字符串。","text":"记录一下阅读蝴蝶书的笔记，本篇为书中最后一部分：方法、代码风格、优美的特性、毒瘤、糟粕等。 方法这一章主要介绍了一些方法集。这里写几个我不太熟悉的方法和要点吧。 array.join() 对于IE6/7，使用array.join()连接大量字符串的效率确实优于使用+元素运算符。但是目前主流的浏览器，包括IE8以后的版本，都对+元素运算符连接字符串做了特别优化，性能已经显著高于array.join()。 number.toExponential(fractionDigits) 把这个number转换成一个指数形式的字符串。 number.toFixed(fractionDigits) 将这个number转换成一个十进制形式的字符串。 毒瘤 注意全局变量的引入。 JavaScript 中 Unicode 是16位的。包含65536个字符（基本多文种平面 Basic Multilingual Plane）。剩下的百万字符中的每一个都可以用一对字符来表示。Unicode 把一对字符视为一个单一的字符，而 JavaScript 认为一对字符是两个不同的字符。 检测null的方式。 1234567console.log(typeof null) //objectmyValue === null //检测 nullif (myValue &amp;&amp; typeof myValue === 'object') &#123; // myValue 是一个对象或数组！&#125; parseInt 把字符串转化为整数的函数。它遇到非数字时会停止解析，所以parseInt(&#39;16&#39;)和parseInt(&#39;16ton&#39;)产生相同的结果。 如果该字符串第一个字符是0，那么该字符串会基于八进制而不是十进制来求职。在八进制中，8和9不是数字，所以parseInt(&#39;08&#39;)和parseInt(&#39;09&#39;)都产生0作为结果。但parseInt()可以接受基数，因此parseInt(&#39;08&#39;,10)结果为8，建议总是加上这个基数参数。 JavaScript 的对象永远不会是真的空对象，因为它们可以送原型链中取得成员属性。 糟粕 避免使用with语句。 避免使用eval语句。 continue可能会降低运算性能。 位运算符在 JavaScript 会非常慢。 Java 里，位运算符处理的是整数。JavaScript 没有整数类型，它只有双精度的浮点数，因此，位运算符把它们的数字运算数先转换为整数，执行运算，在转换回去。JavaScript 的执行环境一般接触不到硬件，所以非常慢。 避免使用包装对象。new Object和new Array等。 避免使用void。 本系列结束。","categories":[{"name":"JavaScript","slug":"JavaScript","permalink":"http://www.jiangjinchao.pro/categories/JavaScript/"}],"tags":[{"name":"JavaScript","slug":"JavaScript","permalink":"http://www.jiangjinchao.pro/tags/JavaScript/"},{"name":"函数","slug":"函数","permalink":"http://www.jiangjinchao.pro/tags/函数/"}]},{"title":"如何使用 babel","slug":"how-to-use-babel","date":"2018-03-30T00:50:23.543Z","updated":"2018-04-04T06:40:53.208Z","comments":true,"path":"/2018/how-to-use-babel.html","link":"","permalink":"http://www.jiangjinchao.pro/2018/how-to-use-babel.html","excerpt":"Babel 用于将 ES6 的代码转化为 ES5，使得 ES6 可以在目前的浏览器环境下使用。学习使用 babel 是为了使用 ES2015 做准备。本文将介绍如何使用 babel，以及一些相关的配置。 学习 Babel 可以通过其手册 Babel handbook。 babel-handbook 其中包含多语言版本，分为用户手册和插件手册。这是一个很好的学习 Babel 的资料。","text":"Babel 用于将 ES6 的代码转化为 ES5，使得 ES6 可以在目前的浏览器环境下使用。学习使用 babel 是为了使用 ES2015 做准备。本文将介绍如何使用 babel，以及一些相关的配置。 学习 Babel 可以通过其手册 Babel handbook。 babel-handbook 其中包含多语言版本，分为用户手册和插件手册。这是一个很好的学习 Babel 的资料。 babel-cli在 node 和 npm 环境安装好的前提下，安装 babel，如下： 1npm install --global babel-cli 安装完成后就可以编译文件了。 1babel main.js 编译后的文件显示在终端上，可以添加其他命令让它输出到指定文件下： 123babel example.js --out-file compiled.js或babel example.js -o compiled.js 或将整个目录编译成一个新的目录： 123babel src --out-dir lib或babel src -d lib 但这很麻烦，并且并不是一个很好的解决方案，请看下一节项目内运行 babel-cli。 在项目内运行 babel-cli初始化项目 1npm init 再安装 babel-cli 1npm install --save-dev babel-cli 项目中的package.json应该包含如下内容： 1234567&#123; \"name\": \"learn-es6\", \"version\": \"1.0.0\", \"devDependencies\": &#123; \"babel-cli\": \"^6.10.1\" &#125;&#125; 添加 npm scripts 命令。 12345678910&#123; \"name\": \"learn-es6\", \"version\": \"1.0.0\",+ \"scripts\": &#123;+ \"build\": \"babel src -d lib\"+ &#125;, \"devDependencies\": &#123; \"babel-cli\": \"^6.10.1\" &#125;&#125; 此时在终端里运行 1npm run build 还不能成功编译，因为没有配置.babelrc文件。 配置.babelrc通过配置.babelrc来告诉 babel 来做什么。 在项目的根路径下创建.babelrc文件。然后输入以下内容作为开始： 1234&#123; \"presets\": [], \"plugins\": []&#125; 为了让 babel 将 ES2015 转化为 ES5，我们要安装如下： 1npm install --save-dev babel-preset-es2015 安装完成后在.babelrc中添加参数： 123456&#123; \"presets\": [+ \"es2015\" ], \"plugins\": []&#125; 现在在项目src/main.js中写一些 ES2015 的代码试试吧。 1let a = 1 在终端中输入命令 1npm run build 执行后终端中显示： 12&gt; learn-es6@1.0.0 build c:\\gitWorkSpace\\learn-es6&gt; babel src -d lib 然后可以看到目录中出现了lib/main.js 123\"use strict\";var a = 1; 即编译成功。 配置.jshintrc若编辑器中安装了 jshint 语法检查的插件。默认对于 ES2015 的代码可能会报错或者警告，看着可能会不爽。我们可以在配置文件中将它设置为允许 ES2015 的模式。 在项目根目录下创建文件.jshintrc。内容如下： 1234&#123; \"asi\": true, \"esversion\": 2015&#125; 上述文件我分别设置了，使用无分号模式，es 版本使用 2015。 关于.jshintrc的更详细配置可以参见官方示例：https://github.com/jshint/jshint/blob/master/examples/.jshintrc 好，babel 就说到这里，下面开始进入真正的 ES2015 的学习！","categories":[{"name":"JavaScript","slug":"JavaScript","permalink":"http://www.jiangjinchao.pro/categories/JavaScript/"}],"tags":[{"name":"ES2015","slug":"ES2015","permalink":"http://www.jiangjinchao.pro/tags/ES2015/"},{"name":"ES6","slug":"ES6","permalink":"http://www.jiangjinchao.pro/tags/ES6/"},{"name":"ES5","slug":"ES5","permalink":"http://www.jiangjinchao.pro/tags/ES5/"},{"name":"babel","slug":"babel","permalink":"http://www.jiangjinchao.pro/tags/babel/"}]},{"title":"JavaScript 语言精粹笔记1-语法、对象、函数","slug":"JavaScript-good-parts-note1","date":"2018-03-30T00:50:23.541Z","updated":"2018-04-04T21:50:53.415Z","comments":true,"path":"/2018/JavaScript-good-parts-note1.html","link":"","permalink":"http://www.jiangjinchao.pro/2018/JavaScript-good-parts-note1.html","excerpt":"记录一下阅读蝴蝶书的笔记，本篇为第一部分包含书中前三章内容：语法、对象和函数。 原书中第一章为精华，做了一些周边介绍，略去。 语法空白这里说一下JavaScript的注释，一种是 /* */ 包围的块注释，另一种是 // 开头的行注释。 因为块注释的字符可能是JavaScript中正则表达式字面量，因此不是很安全，如： 123/* var rm_a = /a*/.match(s)*/","text":"记录一下阅读蝴蝶书的笔记，本篇为第一部分包含书中前三章内容：语法、对象和函数。 原书中第一章为精华，做了一些周边介绍，略去。 语法空白这里说一下JavaScript的注释，一种是 /* */ 包围的块注释，另一种是 // 开头的行注释。 因为块注释的字符可能是JavaScript中正则表达式字面量，因此不是很安全，如： 123/* var rm_a = /a*/.match(s)*/ 标识符标识符由一个字母开头，后面可选择性的加上一个或多个字母、数字或下划线。要避免保留字。 标识符被用于语句、变量、参数、属性名、运算符和标记。 数字可以存在指数部分，100和1e2完全相等 1100 === 1e2 // true 使用isNaN来检测NaN。 字符串当年 JavaScript 被创建的时候，Unicode 是16位字符集，因此 JavaScript 字符串是16位的。 用双引号或单引号包裹。 重点说一下转义字符\\ 反斜杠后面可以跟&quot;, &#39;, \\, /, b (backspace), f (formfeed), n, r (carriage return), t, u1234 1'A' === '\\u0041' // true 语句每个&lt;script&gt;标签的内容被一起抛到一个公共的全局名字空间中。 {...}代码块不会创建新的作用域，因此变量应该被定义在函数的头部，而不是在代码块中。 下列值当做假： false null undefined &#39;&#39; 0 NaN 其他所有值都当做真 for in语句枚举对象的所有属性名（键名），使用object.hasOwnProperty(variable)来确定这个属性名是该对象成员，还是来自原型链。 12345for (myvar in obj) &#123; if (obj.hasOwnProperty(myvar)) &#123; ... &#125;&#125; 表达式运算符优先级 运算符 说明 . [] () 提取属性与调用函数 delete new typeof + - ! 一元运算符 * / % + - &gt;= &lt;= &gt; &lt; === !== &amp;&amp; 逻辑与 ` ` 逻辑或 ?: 三目 字面量对象字面量是一种可以方便地按指定规格创建新对象的表示法。 数组字面量是一种可以方便地按指定规格创建新数组的表示法。 函数函数字面量定义了函数值。后续章节详谈。 对象对象是属性的容器，每一个属性都拥有名字和值。属性的名字可以是包含空字符串在内的任意字符串。属性的值可以是除undefined值之外的任何值。 JavaScript 包含一种原型链的特性，允许对象继承另一个对象的属性。正确地使用它能减少对象初始化时消耗的时间和内存。 对象字面量一个对象字面量就是包围在一对花括号中的零或多个“名/值”对。 123456var empty_object = &#123;&#125;var stooge = &#123; firstName: 'Haoyang', lastName: 'Gao'&#125; 检索12console.log(stooge.firstName); // Haoyangconsole.log(stooge['firstName']); // Haoyang 不存在的属性返回undefined。 使用||来填充默认值。 12console.log(stooge.firstName || 'Joe'); // Haoyangconsole.log(stooge.age || 25); // 25 更新直接使用赋值语句更新，若不存在这个属性，则作为扩充操作。 123stooge.firstName = 'aaa'stooge.nickName = 'peip'console.log(stooge) //Object &#123;firstName: \"aaa\", lastName: \"Gao\", nickName: \"peip\"&#125; 引用对象通过引用来传递他们永远不会被复制。 123var x = stoogex.hair = 'black'stooge.hair //\"black\" 原型每一个对象都连接到一个原型对象，并且它可以从中继承属性。所有通过字面量创建的对象都连接到Object.prototype，它是JavaScript中的标配对象。 可以使用Object.create()方法创建一个使用原对象作为其原型的新对象。 12345var anotherStooge = Object.create(stooge)anotherStooge.firstName //\"aaa\"anotherStooge.firstName = 'bbb'anotherStooge.firstName //\"bbb\"anotherStooge.hair //\"black\" 新对象先查找自己的属性，若不存在则会向原型方向查找。 当我们对某个对象作出改变时，不会触及该对象的原型。 原型关系是一种动态关系。如果我们添加一个新的属性到原型中，该属性会立即对所有基于该原型创建的对象可见。 反射在计算机科学中，反射是指计算机程序在运行时（Run time）可以访问、检测和修改它本身状态或行为的一种能力。 检查对象并确定对象有什么属性是很容易的事情，只要试着去检索该属性并验证取得的值。 typeof用来确定对象属性的类型。 hasOwnProperty，若对象拥有独有的属性，它将返回true。不会检查原型链。 枚举使用for in可以遍历一个对象中的所有属性名，包括原型链上的属性名。可以使用hasOwnProperty过滤原型链上的属性，使用typeof来排除函数。 123456for (var name in anotherStooge) &#123; if (anotherStooge.hasOwnProperty(name) &amp;&amp; typeof anotherStooge[name] !== 'function') &#123; console.log(name + '---&gt;' + anotherStooge[name]) &#125;&#125;// firstName---&gt;bbb 属性名是无序的，若想保持顺序应使用数组和for循环。 删除delete可以用来删除对象的属性。若对象包含该属性，则会被移除。它不会触及原型链中的任何对象。 123anotherStooge.firstName //\"bbb\"delete anotherStooge.firstNameanotherStooge.firstName //\"aaa\" 减少全局变量污染JavaScript 可以随意的定义全局变量来容纳应用的所有资源。但这会削弱程序的灵活性，应避免使用全局变量。 最小化使用全局变量的方法之一是为应用只创建一个唯一的全局变量。 123456789var MYAPP = &#123;&#125;MYAPP.stooge = &#123; //...&#125;MYAPP.flight = &#123; //...&#125; 下一章将使用闭包来进行信息隐藏，是另一种有效减少全局污染的方法。 函数函数对象JavaScript 中的函数就是对象。函数对象连接到Function.prototype（该原型对象本身连接到Object.prototype）。每个函数对象在创建时会附加两个隐藏属性：函数的上下文和实现函数行为的代码。 函数对象在创建时也随配有一个prototype属性。它的值是一个拥有constructor属性且值即为该函数对象。 123function add(a, b) &#123; return a + b&#125; 因为函数是对象，所以可以像任何其他的值一样被使用。函数可以保存在变量、对象和数组中。函数可以被当做参数传递给其他函数，函数也可以再返回函数。函数也可以拥有方法。 函数的与众不同之处在于可以被调用。 函数字面量函数对象通过函数字面量来创建。 123var add = function(a, b) &#123; return a + b&#125; 函数字面量包含4部分，分别是：保留字 function、函数名、参数、花括号中的语句。 调用调用一个函数会暂停当前函数的执行，传递控制权和参数给新函数。除了声明时定义的形式参数，还有两个附加参数：this和arguments。参数this在面向对象编程中非常重要，它的值取决于调用的模式。JavaScript中一共有4中调用模式：方法调用模式、函数调用模式、构造器调用模式、apply调用模式。 实参和形参个数不匹配时，不会有运行时错误。实参过多时，超出的实参被忽略。形参过多时，缺失的值被替换为undefined。 方法调用模式当一个函数被保存为对象的一个属性时，我们称它为一个方法。当一个方法被调用时，this被绑定到该对象。 123456789101112var myObject = &#123; value: 0, increment: function(inc) &#123; this.value += typeof inc === 'number' ? inc : 1 &#125;&#125;myObject.increment()console.log(myObject.value) //1myObject.increment(3)console.log(myObject.value) //4 函数调用模式当一个函数并非一个对象的属性时，那么它就是被当做一个函数来调用的。 此时this被绑定到全局对象。即时是内部函数也会将this绑定到全局对象。 可以在函数内创建一个属性并赋值为this来解决这个问题。如下： 1234567891011121314var add = function(a, b) &#123; return a + b&#125;myObject.double = function() &#123; var that = this var helper = function() &#123; that.value = add(that.value, that.value) &#125; helper()&#125;myObject.double()console.log(myObject.value) //8 构造器调用模式JavaScript是一门基于原型继承的语言。对象可以直接从其他对象继承属性。该语言是无类型的。 如果在一个函数前面带上new来调用，那么背地里将会创建一个连接到该函数的prototype成员的新对象，同时this会被绑定到那个新对象上。 1234567891011121314//创建构造器函数var Quo = function(string) &#123; this.status = string&#125;//给Que的所有实例提供一个公共方法Quo.prototype.getStatus = function() &#123; return this.status&#125;//实例化var myQuo = new Quo('confused')console.log(myQuo.getStatus()) //confused 书中不推荐这种形式的构造器函数，下一章有更好的解决方案。 Apply 调用模式apply方法让我们构建一个参数数组传递给调用函数。他也允许我们选择this的值。apply方法接受两个参数，第一个是要绑定给this的值，第二个是参数数组。 12345678910var arr = [3, 4]var sum = add.apply(null, arr)console.log(sum) //7var statusObject = &#123; status: 'hello'&#125;var status = Quo.prototype.getStatus.apply(statusObject)console.log(status) //hello 参数当函数被调用时，会得到一个arguments数组。通过此参数可以访问所有它被调用时传递给它的参数列表，包括那些没有被分配给函数声明时定义的形参的多余参数。这使得编写一个无须指定参数个数的函数成为可能。 12345678var sum = function() &#123; var i, sum = 0 for (i = 0; i &lt; arguments.length; i++) &#123; sum += arguments[i] &#125; return sum&#125;console.log(sum(1, 2, 3, 4, 5, 6, 7, 8, 9)) //45 因语言的设计错误，arguments并不是一个真正的数组。是一个“类似数组”的对象。有length属性，但没有任何数组的方法。 返回函数执行时遇到关闭函数体的}时结束。然后把控制权交还给调用该函数的程序。 return可以使函数提前返回，不在执行余下的语句。 函数总是会返回一个值，若没有指定，则返回undefined。 若函数调用时在前面加上了new前缀，且返回值不是一个对象的时候，则返回this（该新对象）。 异常异常是干扰程序的正常流畅的不寻常的事故。 1234567891011var add2 = function(a, b) &#123; if (typeof a !== 'number' || typeof b !== 'number') &#123; throw &#123; name: 'TypeError', message: 'add needs numbers' &#125; &#125; return a + b&#125;console.log(add2(2, 3)) //5console.log(add2('a', 6)) throw语句中断函数的执行。抛出一个exception对象，该对象包含一个用来识别异常类型的name属性和一个描述性的message属性。也可以自定义其他属性。 12345678var try_it = function() &#123; try &#123; add2('a') &#125; catch (e) &#123; console.log(e.name + ': ' + e.message) &#125;&#125;try_it() //TypeError: add needs numbers 如果在try代码块内抛出一个异常，控制权就会跳转到它的catch语句中。 扩充类型的功能JavaScript 允许给语言的基本类型扩充功能。通过Object.prototype添加方法，可以让该方法对所有对象都适用。 1234567891011121314151617// 先添加方法使得该方法对所有函数可用Function.prototype.method = function(name, func) &#123; this.prototype[name] = func return this&#125;//添加一个取整方法Number.method('integer', function() &#123; return Math[this &lt; 0 ? 'ceil' : 'floor'](this)&#125;)console.log((-10 / 3).integer()) //-3//添加 trim()String.method('trim', function() &#123; return this.replace(/^\\s+|\\s+$/g, '')&#125;)console.log(' hello alibaba '.trim()) //hello alibaba JavaScript 原型继承是动态的，因此新的方法立刻被赋予到所有的对象实例上，即使对象实例是在方法被增加之前就创建好了。 递归递归函数就是会直接或者间接地调用自身的一种函数。 123456789101112131415161718192021222324var walkTheDom = function walk(node, func) &#123; func(node) node = node.firstChild while (node) &#123; walk(node, func) node = node.nextSibling &#125;&#125;var getElementsByAttribute = function(att, value) &#123; var results = [] walkTheDom(document.body, function(node) &#123; var actual = node.nodeType === 1 &amp;&amp; node.getAttribute(att) if (typeof actual === 'string' &amp;&amp; (actual === value || typeof value !== 'string')) &#123; results.push(node) &#125; &#125;) return results&#125;//在知乎主页上操作console.log(getElementsByAttribute('data-za-module', 'AnswerItem'))//得到下列数据//[div.feed-content, div.feed-content, div.feed-content, div.feed-content, div.feed-content, div.feed-content, div.feed-content] 作用域作用域控制着变量与参数的可见性及生命周期。它减少了名称冲突，并提供了自动内存管理。 无块级作用域。 有函数作用域。 建议在函数体的顶部声明函数中可能用到的所有变量。 闭包作用域的好处是内部函数可以访问定义他们的外部函数的参数和变量（除了this和arguments）。 12345678910var quo = function(status) &#123; return &#123; get_status: function() &#123; return status &#125; &#125;&#125;var myQuo = quo('amazed')console.log(myQuo.get_status()) //amazed 狭义的说，返回的那个对象即闭包，它里面的方法可以访问它被创建时所处的上下文环境。 避免在循环中创建函数，容易引起混淆。可以现在循环之外创建一个辅助函数，让辅助函数在返回一个绑定了当前i值的函数，这样就不会导致混淆了。 回调将一个函数作为参数，一旦接收到响应，再调用这个函数。 模块可以用函数和闭包构造模块。 模块模式的一般形式是：一个定义了私有变量和函数的函数；利用闭包创建可以访问私有变量和函数的特权函数；最后返回这个特权函数，或者把他们保存到一个可访问到的地方。 123456789101112131415161718192021var numberCal = (function() &#123; var half = function(n) &#123; return n / 2 &#125; var double = function(n) &#123; return n * 2 &#125; var tribble = function(n) &#123; return n * 3 &#125; return &#123; half: half, double: double, tribble: tribble &#125;&#125;())console.log(numberCal.half(5)) //2.5console.log(numberCal.half(6)) //3console.log(numberCal.double(7)) //14console.log(numberCal.tribble(7)) //21 级联如果让方法返回this而不是默认的undefined，就可以启用级联，即连续调用。 柯里化柯里化允许我们把函数与传递给它的参数相结合，产生出一个新的函数。 记忆函数可以将先前操作的结果记录在某个对象里，从而避免无谓的重复运算。这种优化被称为记忆（memoization）。","categories":[{"name":"JavaScript","slug":"JavaScript","permalink":"http://www.jiangjinchao.pro/categories/JavaScript/"}],"tags":[{"name":"面向对象","slug":"面向对象","permalink":"http://www.jiangjinchao.pro/tags/面向对象/"},{"name":"闭包","slug":"闭包","permalink":"http://www.jiangjinchao.pro/tags/闭包/"},{"name":"函数","slug":"函数","permalink":"http://www.jiangjinchao.pro/tags/函数/"},{"name":"对象","slug":"对象","permalink":"http://www.jiangjinchao.pro/tags/对象/"},{"name":"this","slug":"this","permalink":"http://www.jiangjinchao.pro/tags/this/"},{"name":"作用域","slug":"作用域","permalink":"http://www.jiangjinchao.pro/tags/作用域/"}]},{"title":"Markdown 语法和 MWeb 写作使用说明","slug":"Markdown 语法和 MWeb 写作使用说明","date":"2018-03-29T11:06:05.000Z","updated":"2018-04-15T06:04:50.432Z","comments":true,"path":"/2018/Markdown 语法和 MWeb 写作使用说明.html","link":"","permalink":"http://www.jiangjinchao.pro/2018/Markdown 语法和 MWeb 写作使用说明.html","excerpt":"Markdown 的设计哲学 Markdown 的目標是實現「易讀易寫」。不過最需要強調的便是它的可讀性。一份使用 Markdown 格式撰寫的文件應該可以直接以純文字發佈，並且看起來不會像是由許多標籤或是格式指令所構成。Markdown 的語法有個主要的==目的==：用來作為一種網路內容的寫作用語言。 换行四个及以上空格加回车。如果不想打这么多空格，只要回车就为换行，请勾Preferences- Themes - Translate newlines to &lt;br&gt; tags 列表无序列表Markdown 语法： 1234* 项目一 无序列表 `* + 空格键`* 项目二 * 项目二的子项目一 无序列表 `TAB + * + 空格键` * 项目二的子项目二","text":"Markdown 的设计哲学 Markdown 的目標是實現「易讀易寫」。不過最需要強調的便是它的可讀性。一份使用 Markdown 格式撰寫的文件應該可以直接以純文字發佈，並且看起來不會像是由許多標籤或是格式指令所構成。Markdown 的語法有個主要的==目的==：用來作為一種網路內容的寫作用語言。 换行四个及以上空格加回车。如果不想打这么多空格，只要回车就为换行，请勾Preferences- Themes - Translate newlines to &lt;br&gt; tags 列表无序列表Markdown 语法： 1234* 项目一 无序列表 `* + 空格键`* 项目二 * 项目二的子项目一 无序列表 `TAB + * + 空格键` * 项目二的子项目二 在 MWeb 中的快捷键为： Option + U效果如下： 项目一 无序列表 * + 空格键 项目二 项目二的子项目一 无序列表 TAB + * + 空格键 项目二的子项目二 有序列表Markdown 语法： 123451. 项目一 有序列表 `数字 + . + 空格键`2. 项目二 3. 项目三 1. 项目三的子项目一 有序列表 `TAB + 数字 + . + 空格键` 2. 项目三的子项目二 效果如下： 项目一 有序列表 数字 + . + 空格键 项目二 项目三 项目三的子项目一 有序列表 TAB + 数字 + . + 空格键 项目三的子项目二 列表中嵌入代码块语法1. 项目一 有序列表 `数字 + . + 空格键` 列表中嵌入代码块必须前后空一行，如这个写法 12345function fancyAlert(arg) &#123; if(arg) &#123; $.facebox(&#123;div:'#foo'&#125;) &#125;&#125; 其他文本。 2. 项目二 任务列表（Task lists）Markdown 语法： 12- [ ] 任务一 未做任务 `- + 空格 + [ ]`- [x] 任务二 已做任务 `- + 空格 + [x]` 效果如下： 任务一 未做任务 - + 空格 + [ ] 任务二 已做任务 - + 空格 + [x] 图片Markdown 语法： 12![GitHub set up](http://zh.mweb.im/asset/img/set-up-git.gif)格式: ![Alt Text](url) Control + Shift + I 可插入Markdown语法。如果是 MWeb 的文档库中的文档，还可以用拖放图片、CMD + V 粘贴、CMD + Option + I 导入这三种方式来增加图片。效果如下： MWeb 引入的特别的语法来设置图片宽度，方法是在图片描述后加 -w + 图片宽度 即可，比如说要设置上面的图片的宽度为 140，语法如为 ![GitHub-w140](set-up-git.gif)： 链接Markdown 语法： 123email &lt;example@example.com&gt;[GitHub](http://github.com)自动生成连接 &lt;http://www.github.com/&gt; Control + Shift + L 可插入Markdown语法。如果是 MWeb 的文档库中的文档，拖放或CMD + Option + I 导入非图片时，会生成连接。效果如下： Email 连接： &#x65;&#x78;&#x61;&#x6d;&#112;&#x6c;&#x65;&#x40;&#x65;&#120;&#x61;&#109;&#x70;&#108;&#x65;&#46;&#99;&#x6f;&#x6d;连接标题Github网站自动生成连接像： http://www.github.com/ 这样 区块引用Markdown 语法： 123某某说:&gt; 第一行引用&gt; 第二行费用文字 CMD + Shift + B 可插入Markdown语法。效果如下： 某某说: 第一行引用第二行费用文字 行内代码Markdown 语法： 1像这样即可：`&lt;addr&gt;` `code` CMD + K 可插入Markdown语法。效果如下： 像这样即可：&lt;addr&gt; code 多行或者一段代码Markdown 语法： 123456function fancyAlert(arg) &#123; if(arg) &#123; $.facebox(&#123;div:'#foo'&#125;) &#125;&#125; CMD + Shift + K 可插入Markdown语法。效果如下： 123456function fancyAlert(arg) &#123; if(arg) &#123; $.facebox(&#123;div:'#foo'&#125;) &#125;&#125; 顺序图或流程图Markdown 语法： 123张三-&gt;李四: 嘿，小四儿, 写博客了没?Note right of 李四: 李四愣了一下，说：李四--&gt;张三: 忙得吐血，哪有时间写。 12345678st=&gt;start: 开始e=&gt;end: 结束op=&gt;operation: 我的操作cond=&gt;condition: 确认？st-&gt;op-&gt;condcond(yes)-&gt;econd(no)-&gt;op 效果如下（ Preferences - Themes - Enable sequence &amp; flow chart 才会看到效果 ）： 123张三-&gt;李四: 嘿，小四儿, 写博客了没?Note right of 李四: 李四愣了一下，说：李四--&gt;张三: 忙得吐血，哪有时间写。 12345678st=&gt;start: 开始e=&gt;end: 结束op=&gt;operation: 我的操作cond=&gt;condition: 确认？st-&gt;op-&gt;condcond(yes)-&gt;econd(no)-&gt;op 更多请参考：http://bramp.github.io/js-sequence-diagrams/, http://adrai.github.io/flowchart.js/ 表格Markdown 语法： 1234第一格表头 | 第二格表头--------- | -------------内容单元格 第一列第一格 | 内容单元格第二列第一格内容单元格 第一列第二格 多加文字 | 内容单元格第二列第二格 效果如下： 第一格表头 第二格表头 内容单元格 第一列第一格 内容单元格第二列第一格 内容单元格 第一列第二格 多加文字 内容单元格第二列第二格 删除线Markdown 语法： 加删除线像这样用： ~~删除这些~~ 效果如下： 加删除线像这样用： 删除这些 分隔线以下三种方式都可以生成分隔线： *** ***** - - - 效果如下： MathJaxMarkdown 语法： 12345678块级公式：$$ x = \\dfrac&#123;-b \\pm \\sqrt&#123;b^2 - 4ac&#125;&#125;&#123;2a&#125; $$\\\\[ \\frac&#123;1&#125;&#123;\\Bigl(\\sqrt&#123;\\phi \\sqrt&#123;5&#125;&#125;-\\phi\\Bigr) e^&#123;\\frac25 \\pi&#125;&#125; =1+\\frac&#123;e^&#123;-2\\pi&#125;&#125; &#123;1+\\frac&#123;e^&#123;-4\\pi&#125;&#125; &#123;1+\\frac&#123;e^&#123;-6\\pi&#125;&#125;&#123;1+\\frac&#123;e^&#123;-8\\pi&#125;&#125; &#123;1+\\ldots&#125; &#125; &#125; &#125; \\\\]行内公式： $\\Gamma(n) = (n-1)!\\quad\\forall n\\in\\mathbb N$ 效果如下（Preferences - Themes - Enable MathJax 才会看到效果）： 块级公式：$$ x = \\dfrac{-b \\pm \\sqrt{b^2 - 4ac}}{2a} $$ $$\\frac{1}{\\Bigl(\\sqrt{\\phi \\sqrt{5}}-\\phi\\Bigr) e^{\\frac25 \\pi}} = 1+\\frac{e^{-2\\pi}} {1+\\frac{e^{-4\\pi}} {1+\\frac{e^{-6\\pi}} {1+\\frac{e^{-8\\pi}} {1+\\ldots} } } } \\$$行内公式： $\\Gamma(n) = (n-1)!\\quad\\forall n\\in\\mathbb N$ 脚注（Footnote）Markdown 语法： 1这是一个脚注：[^sample_footnote] 效果如下： 这是一个脚注：[^s] 注释和阅读更多 Actions-&gt;Insert Read More Comment 或者 Command + .注 阅读更多的功能只用在生成网站或博客时，插入时注意要后空一行。 TOCMarkdown 语法： 1[TOC] 效果如下： [TOC] 本文约定如果有写 效果如下：， 在 MWeb 编辑状态下只有用 CMD + 4 或 CMD + R 预览才可以看效果。 标题Markdown 语法： 123456# 第一级标题 `&lt;h1&gt;` ## 第二级标题 `&lt;h2&gt;` ### 第三级标题 `&lt;h3&gt;` #### 第四级标题 `&lt;h4&gt;` ##### 第五级标题 `&lt;h5&gt;` ###### 第六级标题 `&lt;h6&gt;` 效果如下： 第一级标题 &lt;h1&gt;第二级标题 &lt;h2&gt;第三级标题 &lt;h3&gt;第四级标题 &lt;h4&gt;第五级标题 &lt;h5&gt;第六级标题 &lt;h6&gt;强调Markdown 语法： 12345*这些文字会生成`&lt;em&gt;`*_这些文字会生成`&lt;u&gt;`_**这些文字会生成`&lt;strong&gt;`**__这些文字会生成`&lt;strong&gt;`__ 在 MWeb 中的快捷键为： CMD + U、CMD + I、CMD + B效果如下： 这些文字会生成&lt;em&gt;这些文字会生成&lt;u&gt; 这些文字会生成&lt;strong&gt;这些文字会生成&lt;strong&gt; [^s]:","categories":[{"name":"Markdown","slug":"Markdown","permalink":"http://www.jiangjinchao.pro/categories/Markdown/"}],"tags":[{"name":"Markdown","slug":"Markdown","permalink":"http://www.jiangjinchao.pro/tags/Markdown/"},{"name":"MWeb","slug":"MWeb","permalink":"http://www.jiangjinchao.pro/tags/MWeb/"},{"name":"语法","slug":"语法","permalink":"http://www.jiangjinchao.pro/tags/语法/"}]},{"title":"工具","slug":"工具","date":"2017-12-31T23:08:28.000Z","updated":"2018-04-15T15:06:30.102Z","comments":true,"path":"/2018/工具.html","link":"","permalink":"http://www.jiangjinchao.pro/2018/工具.html","excerpt":"编程语言JavaScript JavaScript 标准参考教程（alpha） -阮一峰 JavaScript Promise迷你书 -azu You Don’t Know JS (book series) You Don’t Need jQuery 前端发展很快，现代浏览器原生 API 已经足够好用。我们并不需要为了操作 DOM、Event 等再学习一下 jQuery 的 API。同时由于 React、Angular、Vue 等框架的流行，直接操作 DOM 不再是好的模式，jQuery 使用场景大大减少。本项目总结了大部分 jQuery API 替代的方法，暂时只支持 IE10+ 以上浏览器。 YOU MIGHT NOT NEED JQUERY PLUGINS JavaScript 秘密花园 JavaScript 设计模式 系列 AlloyTeam","text":"编程语言JavaScript JavaScript 标准参考教程（alpha） -阮一峰 JavaScript Promise迷你书 -azu You Don’t Know JS (book series) You Don’t Need jQuery 前端发展很快，现代浏览器原生 API 已经足够好用。我们并不需要为了操作 DOM、Event 等再学习一下 jQuery 的 API。同时由于 React、Angular、Vue 等框架的流行，直接操作 DOM 不再是好的模式，jQuery 使用场景大大减少。本项目总结了大部分 jQuery API 替代的方法，暂时只支持 IE10+ 以上浏览器。 YOU MIGHT NOT NEED JQUERY PLUGINS JavaScript 秘密花园 JavaScript 设计模式 系列 AlloyTeam ES2015 https://tc39.github.io/ecma262/ http://www.ecma-international.org/ecma-262/6.0/ ES2015规范 http://es6katas.org/ Learn ES6 by doing it. Fix failing tests. Keep all learnings. 30分钟掌握ES6/ES2015核心内容（上） 30分钟掌握ES6/ES2015核心内容（下） 《ECMAScript 6入门》 -阮一峰 EcmaScript6 全规范（含node） -ouvens NodeJS 七天学会NodeJS -Nanqiao Deng 框架&amp;脚手架webpack Webpack 中文指南 -赵达 Webpack傻瓜式指南（一） -前端外刊评论 知乎专栏 Webpack傻瓜指南（二）开发和部署技巧 -前端外刊评论 知乎专栏 Webpack傻瓜指南（三）和React配合开发 -前端外刊评论 知乎专栏 上述傻瓜指南的原始出处 https://github.com/vikingmute/webpack-for-fools Webpack傻瓜式指南 Webpack，101入门体验 -Yika Webpack 入门指迷 -题叶 https://webpack.github.io/ Webpack 官网 Vue awesome-vue Vue.js 和 Webpack（一） -Randy Lu Vue.js 和 Webpack（二） -Randy Lu Vue.js 和 Webpack（三） -Randy Lu Vuejs 1.0 中文系列视频教程 -Laravist Vuejs-QQ群 相关资料 来自豪情 React 深入理解 React -Thinking in React 中文版 Thinking in React AngularJS 学习AngularJS 1.x -Harry&#104;&#97;&#114;&#x72;&#x79;&#64;&#x61;&#x6e;&#100;&#116;&#x6f;&#111;&#46;&#110;&#101;&#x74; 本书是作者 Harry 在学习和应用AngularJS 1.x 的过程中的资料梳理。希望能对大家学习AngularJS有一定帮助…… AngularJS api 官网 AngularJS入门教程——AngularJS中文社区提供 AngularJS 教程 | 菜鸟教程 类似 w3school 的入门 AngularJS 教程。 测试 测试框架 Mocha 实例教程 阮一峰 类库与插件 Masonry 瀑布流布局库。 jssor 图片轮播图其 GitHub 地址 jssor/slider cssslider 纯 CSS 的图片轮播图。 gumshoe A simple, framework-agnostic scrollspy script. smooth-scroll A simple vanilla JS script to animate scrolling to anchor links. 模块化 后端程序员的 JavaScript 之旅 - 模块化（一） 后端程序员的 JavaScript 之旅 - 模块化（二） 后端程序员的 JavaScript 之旅 - 模块化（三） CommonJS 规范 -来自 阮一峰 JavaScript 标准参考教程(alpha) other articles Cheat Sheet 将footer固定在页面底部的实现方法 HTML5 视频 By Pete LePage 编辑器Atom 中常用插件 auto-beautify autoprefixer block-comment color-picker docblockr emmet jquery-snippets jshint linter linter-csslint linter-htmlhint minimap minimap-git-diff minimap-codeglance 滑过 minimap 显示代码 minimap-find-and-replace 在 minimap 中显示 ctrl+D 选中的内容 open-in-browser uglify active-power-mode atom-terminal-panel linter-scss-linter atom-ternjs file-icons 将图标变成彩色 autocomplete-paths 自动补充路径 symbols-tree-view A symbol treeview like taglist 常用的主题： UI Theme: One Dark Syntax Theme: Atom Dark or One Dark GitBook 及其插件 Gitbook 的使用和常用插件 -赵达 gitbook-plugin-expandable-chapters 折叠左侧目录章节。 Chrome 插件 Octotree Code tree for GitHub and GitLab Chrome扩展及应用开发 -图灵电子书 有哪些鲜为人知却非常有意思、好用的 Chrome 扩展？ -知乎 Dribbble New Tab 新建 tab 时，显示 dribbble 上的精选作品。 Other blogs COLORFUL xiaoa 进击的马斯特 http://pinkyjie.com/ 马斯特，87年生人，爱溜冰的码农。技术： Javascript、Python、Mac、iOS Jerry Qu JerryQu，奇虎 360，前端开发，前百度前端。 码志 https://mazhuang.org/ 我是马壮，码而生，码而立。就职sogou。 小胡子哥 http://www.barretlee.com/ 李靖，阿里巴巴。 Xcat Liu http://blog.xcatliu.com/ Microsoft Software Engineer II, Meituan Senior Front-End Engineer 极限前端 http://ouvens.github.io/ Ouvenzhang, 前端工程师，对前端领域的技术知识具有较高的职业能力和探究精神。对响应式页面设计、工程构建组件化、mv*设计实现、前端优化、ES6开发体系等有深入的研究与项目实践。来自腾讯科技。 凳子_Joinery 邓智容 http://www.dengzhr.com/ 赵达的个人网站 腾讯高级前端开发工程师 Randy 95年出生的全栈。卢涛南，英文名 Randy，用 djyde 这个ID混迹于网络。 JS前端开发群月报 -豪情等人维护 交互设计相关 Framer Design the impossible with Framer FLINTO App Prototyping Tools for Designers Principle Animate Your Ideas, Design Better Apps https://gyrosco.pe/ 首页的卡片翻动效果非常赞。 网站工具类 MathJax 数学公式语法(of MathJax) Runoob.com HTML 拾色器 Font Awesome 适合 Web 应用的图标 Ultimate CSS Gradient Generator 也是渐变生成器 CSS Generators -CSSREFLEX CSS3 生成器 tiny png 用于压缩 png 或 jpg 的在线工具 图床 https://sm.ms/ 有 API 可用。 新浪微博图床 Chrome扩展 Unix 时间戳 Unix timestamp 在线正则表达式匹配 这个功能更强大一点，能清楚的区分出贪婪和懒惰正则。 http://regexr.com/ google fonts Google Fonts 加速代理","categories":[{"name":"工具","slug":"工具","permalink":"http://www.jiangjinchao.pro/categories/工具/"}],"tags":[]},{"title":"听她的声音，会上瘾","slug":"听她的声音，会上瘾","date":"2017-04-07T23:08:28.000Z","updated":"2018-04-16T12:03:08.645Z","comments":true,"path":"/2017/听她的声音，会上瘾.html","link":"","permalink":"http://www.jiangjinchao.pro/2017/听她的声音，会上瘾.html","excerpt":"","text":"Should auld acquaintance be forgot,And never brought to mind?Should auld acquaintance be forgotAnd days of auld lang syne?And days of auld lang syne, my dear,And days of auld lang syne,We’ll take a cup of kindness yet,For auld lang syne.We twa ha’e run aboot the braesAnd pu’d the gowansfine,We’ve wander’d mony a weary foot,Sin auld lang syne.Sin auld lang syne, my dear,Sin auld lang syne,We’ll take a cup of kindness yet,For auld lang syne.We twa ha’e sportedi’ the burn,From morning sun till dine,But seas between us braid ha’eroar’dSin’ auld lang syne.Sin auld lang syne, my dear,Sin auld lang syne,But seas between us braid ha’eroar’dSin auld lang syne?And here’s a hand,my trusty frien’,And gie’s a hand o’ thine;We’ll take a cup of kindness yet,For auld lang syne.For auld lang syne, my dear,For auld lang syne,We’ll take a cup of kindness yet,For auld lang syne.","categories":[{"name":"音乐","slug":"音乐","permalink":"http://www.jiangjinchao.pro/categories/音乐/"}],"tags":[{"name":"音乐","slug":"音乐","permalink":"http://www.jiangjinchao.pro/tags/音乐/"}]},{"title":"贝雷参数与均匀性在沥青路面施工质量过程控制中应用","slug":"贝雷参数与均匀性在沥青路面施工质量过程控制中应用","date":"2016-12-04T16:00:00.000Z","updated":"2018-04-15T13:58:46.296Z","comments":true,"path":"/2016/贝雷参数与均匀性在沥青路面施工质量过程控制中应用.html","link":"","permalink":"http://www.jiangjinchao.pro/2016/贝雷参数与均匀性在沥青路面施工质量过程控制中应用.html","excerpt":"前言我省高速公路建设发展至2105年已突破5000公里，并实现县县通高速的目标，在高速公路建设领域中，怎样建设出高品质的高速公路是个系统工程，只有建设施工过程中控制好质量才能建设出一条经久耐用的高速公路。伴随社会经济不断发展，交通量猛增，造成早期路面损坏较为严重，在病害的原因分析过程中，有不少因级配设计的不合理或施工过程中控制缺乏经验不够严谨所造成的。本文通过介绍施工过程中沥青混合料级配，应用贝雷参数与级配均匀度等指标在施工过程中进行精细化管理从而提高施工质量，通过在福建湄渝高速公路三明ATb-25柔性基层施工过程中的应用，并取得显著效果。 我国现行级配设计与控制优缺点级配是指沥青混合料中矿料不同粒径的分布，采用各个筛孔的通过率表示。它是沥青混合料中矿料的最重要特性，直接影响着沥青混合料的所有重要指标，例如高温稳定性、耐久性、渗水性、施工和易性及抗疲劳、抗滑能力。美国沥青路面协会NAPA研究表明，一个稳定的混合料，高温抗车辙的能力80％是由集料骨架结构提供的。根据《沥青路面施工技术规范》要求，混合料级配的设计应通过规范给予的矿料级配范围内进行选定，这种方法很简单操作性也强，因此有些技术人员在矿料级配的选定中按照级配范围的中值为基准进行设计，这就存在很大的误区，我国地幅宽广，南北气候及运输条件等都不一样，我们应该因地制宜结合项目实际情况在规范及设计要求范围内进行优选，不然容易为后期施工埋下质量隐患。 沥青混合料生产过程中应随时对级配进行自检，按照《沥青路面施工技术规范》表11.4.4（热拌沥青混合料的频度和质量要求）要求，每台拌和机每天进行l～2次级配抽检，通过筛分试验按照规定允许误差进行结果评定，见表1： 筛孔尺寸 高速公路、一级公路允许偏差 其他等级公路允许偏差 试验方法 0.075mm ±2％(2％) ±2％(2％) T 0725抽提筛分与标准级配比较的差 小于2.36mm ±5％(3％) ±6％ 同上 小于4.75mm ±6％(4％) ±7％ 同上 通过表1可以看出技术规范对级配的控制要求并不是很高，级配只要在允许偏差范围内均属合格，在生产过程中无明显指导意义，以此同时施工生产过程中部分检测人员因缺乏经验，无法对级配数据结果进行有效分析。例如，在图1中1号与2号级配均在上下限范围内，能够符合技术规范允许偏差要求，除此之外无法体现更多信息，但实际过程中两条级配线的施工效果完全不一样。1号线配线骨架嵌挤效果差，细集料填充不够，沥青混合料空隙率（VV）与矿料间隙率（VMA）偏大；2号级配线容易离析，高温稳定性与水稳定均差。因此我们应该考虑施工过程中如何对级配进行精细化控制，笔者想通过引入贝雷参数与级配均匀性对生产过程的级配进行检验分析，希望能抛砖引玉给大家提供一些新思路。","text":"前言我省高速公路建设发展至2105年已突破5000公里，并实现县县通高速的目标，在高速公路建设领域中，怎样建设出高品质的高速公路是个系统工程，只有建设施工过程中控制好质量才能建设出一条经久耐用的高速公路。伴随社会经济不断发展，交通量猛增，造成早期路面损坏较为严重，在病害的原因分析过程中，有不少因级配设计的不合理或施工过程中控制缺乏经验不够严谨所造成的。本文通过介绍施工过程中沥青混合料级配，应用贝雷参数与级配均匀度等指标在施工过程中进行精细化管理从而提高施工质量，通过在福建湄渝高速公路三明ATb-25柔性基层施工过程中的应用，并取得显著效果。 我国现行级配设计与控制优缺点级配是指沥青混合料中矿料不同粒径的分布，采用各个筛孔的通过率表示。它是沥青混合料中矿料的最重要特性，直接影响着沥青混合料的所有重要指标，例如高温稳定性、耐久性、渗水性、施工和易性及抗疲劳、抗滑能力。美国沥青路面协会NAPA研究表明，一个稳定的混合料，高温抗车辙的能力80％是由集料骨架结构提供的。根据《沥青路面施工技术规范》要求，混合料级配的设计应通过规范给予的矿料级配范围内进行选定，这种方法很简单操作性也强，因此有些技术人员在矿料级配的选定中按照级配范围的中值为基准进行设计，这就存在很大的误区，我国地幅宽广，南北气候及运输条件等都不一样，我们应该因地制宜结合项目实际情况在规范及设计要求范围内进行优选，不然容易为后期施工埋下质量隐患。 沥青混合料生产过程中应随时对级配进行自检，按照《沥青路面施工技术规范》表11.4.4（热拌沥青混合料的频度和质量要求）要求，每台拌和机每天进行l～2次级配抽检，通过筛分试验按照规定允许误差进行结果评定，见表1： 筛孔尺寸 高速公路、一级公路允许偏差 其他等级公路允许偏差 试验方法 0.075mm ±2％(2％) ±2％(2％) T 0725抽提筛分与标准级配比较的差 小于2.36mm ±5％(3％) ±6％ 同上 小于4.75mm ±6％(4％) ±7％ 同上 通过表1可以看出技术规范对级配的控制要求并不是很高，级配只要在允许偏差范围内均属合格，在生产过程中无明显指导意义，以此同时施工生产过程中部分检测人员因缺乏经验，无法对级配数据结果进行有效分析。例如，在图1中1号与2号级配均在上下限范围内，能够符合技术规范允许偏差要求，除此之外无法体现更多信息，但实际过程中两条级配线的施工效果完全不一样。1号线配线骨架嵌挤效果差，细集料填充不够，沥青混合料空隙率（VV）与矿料间隙率（VMA）偏大；2号级配线容易离析，高温稳定性与水稳定均差。因此我们应该考虑施工过程中如何对级配进行精细化控制，笔者想通过引入贝雷参数与级配均匀性对生产过程的级配进行检验分析，希望能抛砖引玉给大家提供一些新思路。 贝雷参数与级配均匀性的检验分析热拌沥青配合比设计过程可分为集料的级配组成设计与最佳沥青用量的选定这两方面，在集料的级配组成设计中，传统的级配设计理论通常引用堆积理论，基于两个基本假设：一、基本颗粒为规则球体；二、各分级颗粒粒径都相等。本文重点介绍另一个级配设计理论与方法，该理论由美国的Robert D. Bailey先生提出，其核心思想是级配设计中由粗集料颗粒形成嵌挤，细集料进行空隙填充，细集料的捣实体积相当于粗集料所构成的空隙体积，该方法直译为“贝雷法” 沥青混合料级配设计，在贝雷法中对粗细集料关键筛孔的划分按公称最大粒径（NMPS）的0.22倍的接近值来确定（注：因标准筛孔尺寸与美国略有区别，我国有些学者提出0.24倍更符合我国实际情况），因此，关键筛孔（PCS）是随着NMPS的变化而变化（见表2）, 我们也将关键筛孔称为第一控制筛孔，PCS ≈ 0.22×NMPS。 最大公称粒径 PCS 关键筛孔 26.5 5.830 4.75 19 4.180 4.75 16 3.520 2.36 13.2 2.904 2.36 9.5 2.090 2.36 1贝雷法对填充空隙的细集料进一步划分为较粗的细集料（SCS）作为第二控制筛孔与较细的细集料（TSC）作为第三控制筛孔。筛孔尺寸分别为SCS≈0.22×PCS，TCS≈0.22×SCS。 级配选定后，贝雷法通过3个参数对级配的骨架性是否良好进行检验：一、粗集料比（CA比）主要目的是对粗集粗的级配进行约束，CA比过大则不能形成骨架结构，若太小则容易出现离析；二、细集料中粗比（FAC比）来反映级配中细集料部份粗颗粒与细颗粒嵌挤填充情况；三、细集料中细比（FAf比）与FAC比类似，反映级配中最细一级的嵌挤情况。 CA比用于评价矿料中粗集料的含量和分析空隙特征。 $$ CA=\\frac{P_{NMPS/2}-P_{PCS}}{100-P_{NMPS/2}}$$ 1式中：为是粒径等于NMPS/2(NMPS是公称最大粒径)的通过率,%；为第一控制筛孔的通过率,%。 FAc比反映细集料中粗料部分与细料部分的嵌挤、填充情况,计算公式为： $$ F_{ac}=\\frac{P_{Scs}}{P_{Pcs}}$$ 1式中：为第二控制筛孔的通过率，%。 FAf比比体现了合成集料中最细一级的嵌挤状况，计算公式为： $$F_{af}=\\frac{P_{Tcs}}{P_{Scs}}$$ 1式中：为第三控制筛孔的通过率，%。 笔者选择福建省高速公路6个项目ATb-25配合比设计级配线，通过公式计算出贝雷参数进行分析。 筛孔 最大公称粒径（NMPS） NMPS/2 PCS SCS TCS 计算筛孔，mm 26.5 13.25 5.83 1.04 0.26 套用筛孔，mm 26.5 13.2 4.75 1.18 0.3 1表3， ATb-25关键控制筛孔参照表 高整公路 31.5 26.5 19 16 13.2 9.5 4.75 2.36 1.18 0.6 0.3 0.15 0.075 龙长高速 100 97.8 70.3 60.8 53.7 44.7 30.9 23.9 18.8 14.6 9.7 6.1 4.3 宁武高速 100 95.5 70.1 60.3 52.6 41.8 29.9 20.9 15.3 11.9 7.7 6.1 4.6 泉三高速 100 94.2 70.5 61.2 52.7 43.1 29.7 19.4 15 10.7 6.7 5.3 4 泉夏高速 100 97.6 68.1 58.3 48.5 41.1 28.9 20.6 15.5 11.9 8 5.9 4.3 绕城高速 100 93.7 69.5 60.6 52.6 40.8 29.2 21.9 17.3 12.6 8.8 6.5 4.6 永宁高速 100 93.5 71 63.7 53.9 41.6 31.1 19.7 14.6 10.5 7.4 6.2 4.9 1表4，6条高速公路ATb-25目标级配表 参数 龙长高速 宁武高速 泉三高速 泉夏高速 绕城高速 永宁高速 CA 0.492 0.479 0.486 0.381 0.497 0.495 FAc 0.608 0.512 0.505 0.536 0.593 0.47 Faf 0.516 0.503 0.447 0.516 0.509 0.507 VMA 13.1 13.2 13.8 13.4 13 12.9 稳定度(KN) 15 17.4 17.4 16.4 13.2 15.3 流值（0.1mm） 33 24.5 26.3 37.5 27.5 27.5 残留稳定度（%） 87.3 96.3 93.5 93.4 85.2 93 1表5，ATb-25贝雷参数计算表 通过计算，结果见表4、表5，其中泉夏高速最小CA比=0.381， CA比过小，意味着矿料合成级配中粗料比例增大，施工容易产生离析且不易压实，反之CA比过大，矿料合成级配中细集料部份含量增多，难于形成骨架嵌挤结构，同时细集料部份过多将增加施工碾压难度，结合施工经验建议CA比控制在0.4-0.6之间具有较好的骨架稳定性； FAc比主要反应VV及VMA的体积特征，FAc比过高时填充细集含量增大，在0.45次方级配曲线图形成“驼峰”曲线，级配容易敏感，高温稳定性与水稳定性均差，反之，FAc比过低，细集料中粗颗粒间隙体积无法足够填充，VMA与VV过大将导致级配不均衡，容易渗水出现水损害，从表5中得到龙长高速与绕城高速的FAc分别为0.608与0.593相对比较小，残留稳定度（%）分别为87.3%与85.2%，这结果以上述基本一致，建议FAc比控制范围为0.4-0.6间； FAf比与FAc比类似，主要影响混合料的体积特征，通常VMA随其减小而增大，一般FAf比控制在0.3-0.6之间。贝雷法经过Heritage Research Group近十年的内部使用和普渡大学进一步研究、实践和验证，认为采用该方法设计的沥青混合料具有良好的骨架结构，同时可以达到密实的效果。 在实际工程中,级配的任意颗粒群都是由多种不同大小的颗粒所组成，分布在一定的颗粒区域中，分布区域越宽，其颗粒均匀性越低，颗粒均匀性直接影响混合料的填充特性，单一粒径组成的混合料是不能达到很好的填充特性同时无法形成嵌挤结构，导致孔隙率大，路用性能差等结果。在级配中采用质量为基准对级配颗粒群的均匀性进行推导，假设颗粒为球体，其粒度分布在n组粒径中，某粒径占总质量的百分比用wi表示,平均粒径用di表示, 推导公式如下： 1式中，Up为级配均匀性, 当颗粒为单一粒径时，d为常数其均匀性为100 ，因此混合料的级配均匀性范围为0&lt;Up≤100。 我们通过三条不同结构层的级配对均匀性进行计算，将级配均匀性引用到日常施工质量过程控制中，作为生产过程中级配颗粒稳定性的参考指标之一。 筛孔尺寸 平均粒度 ATb-25通过率 ATb-25质量比 AC-20C通过率 AC-20C质量比 AC-16C通过率 AC-16C质量比 31.5 34.5 100 0 - - - - 26.5 29 97.6 2.4 100 0 - - 19 22.75 68.3 29.3 97 3 100 - 16 17.5 58.8 9.5 80.7 16.2 96.2 3.8 13.2 14.6 51.7 7.1 68.9 11.8 81.1 15.1 9.5 11.35 43.2 8.5 56.8 12.1 62.7 18.4 4.75 7.125 28.9 14.3 30.7 26.1 42.5 20.2 2.36 3.555 20.5 8.4 20.6 10.1 27.5 15 1.18 1.77 14.8 5.7 15.2 5.3 20.6 6.9 0.6 0.89 10.6 4.2 11.5 3.7 14.7 5.9 0.3 0.45 7.3 3.3 8.6 2.9 10.5 4.2 0.15 0.225 5.4 1.9 6.8 1.8 7.2 3.3 0.075 0.1125 3.9 1.5 5.1 1.7 4.7 2.5 0 0.0375 - 3.9 - 5.1 - 4.7 1表6，三条不同结构层配合比设计级配线 合成级配 ∑wi/di2 ∑wi/di3 ∑wi ∑wi*di Up ATb-25 2953.56 75218.33 100 1250.43 0.314 AC-20C 3845.85 98850.97 100 900.21 0.432 AC-16C 4484.06 115286.18 100 712.57 0.546 1表7，级配均匀性计算表 对于表6，表7，可得到最大公称粒径为26.5mm的ATb-25级配均匀性为0.314，最大公称粒径为16mm的CA-16C级配均匀性为0.546,而AC-20C基于两者之间。因此，Up值越大时颗粒分布区域越小，级配颗粒趋向单一，根据这一特征可作为判断施工过程级配粗细变化及稳定性的参考指标。建议施工中Up的范围为生产配合比级配Up±0.03进行控制。 我们将之前图1施工级配曲线图的筛分数据经过处理，计算出CA、FAc、FAf及Up,见表8，很直观得出上述结论，同进还可以判定出1号线相对于2号线级配偏粗。 级配 NMPS NMPS/2 PCS SCS TCS CA比 FAc比 FAf比 Up 生产控制级配 97.6 51.7 28.9 14.8 7.3 0.47 0.51 0.49 0.314 1号级配 93.6 55 27 13 5 0.62 0.48 0.38 0.298 2号级配 100 47 31 16 9 0.3 0.52 0.56 0.312 1表8，贝雷参数与均匀性计算表 贝雷参数、均匀性进行施工过程动态管理福建湄渝高速公路三明段路面B1合同段ATb-25沥青碎石上基层应用贝雷参数及Up作为混合料级配的施工监控参数，并要求在施工过程级配指标除了满足规范及设计要求外，还应满足CA、FAc、FAf及Up参考范围，通过建立施工动态控制图监测生产过程参数是否处于控制状态。表9为ATb-25日常施工级配检测数据。 台班 施工日期 26.5 13.2 4.75 1.18 0.075 CA比 FAc比 FAf比 Up 1 2014/1/18 98.2 51.1 28.8 14.6 3.8 0.46 0.51 0.47 0.29 2 2015/3/13 98.8 51 27.5 15.3 4.5 0.48 0.56 0.56 0.3 3 2015/3/17 95.9 50.2 28.1 14 4.7 0.44 0.5 0.61 0.28 4 2015/3/18 96.5 53.8 27.3 16.4 4.3 0.57 0.6 0.51 0.29 5 2015/3/19 95.8 52 29.5 16 4.5 0.47 0.54 0.55 0.32 6 2015/3/21 97.2 56.4 30.8 13.8 4 0.59 0.45 0.55 0.32 7 2015/3/24 95.8 50.7 27.4 13.9 4.6 0.47 0.51 0.58 0.29 8 2015/3/25 96.4 52.5 28.8 13.8 4.1 0.5 0.48 0.55 0.3 9 2015/3/28 98.7 51.9 28.4 15.6 4.1 0.49 0.55 0.48 0.3 10 2015/3/29 95.4 49.4 28.6 14.2 3.8 0.41 0.5 0.52 0.29 11 2015/3/30 96.3 51.5 29.9 15 4.1 0.45 0.5 0.57 0.3 12 2015/3/31 94.1 53.1 31.4 14.2 3.8 0.46 0.45 0.54 0.3 13 2015/4/1 97.2 54.7 35 15.4 4.3 0.43 0.44 0.53 0.32 14 2015/4/2 97.4 49.6 28.4 15 4.6 0.42 0.53 0.57 0.29 15 2015/4/7 96.3 53.2 28.2 12.8 3.8 0.53 0.45 0.55 0.28 16 2015/4/12 98.2 52.6 29.9 15.2 4.4 0.48 0.51 0.55 0.3 17 2015/4/13 97.2 50.5 28.6 14.6 4.6 0.44 0.51 0.55 0.29 18 2015/4/14 98.4 53.3 27.8 15.4 4 0.55 0.55 0.55 0.32 19 2015/4/16 96.2 54.9 28.9 15 4.2 0.58 0.52 0.51 0.32 20 2015/4/17 97.9 52.1 29.1 15.7 3.5 0.48 0.54 0.41 0.29 21 2015/4/18 98.2 51 28.7 14.2 4.1 0.46 0.49 0.51 0.29 1表8，ATb-25日常施工级配检测数据 利用数据分析软件SPSS建立动态控制图，以Up为例，其他同理，设定规则限制以及控制指标上下限及目标值，此次动态图设置目标值为生产级配的Up值为0.30，上下限为Up±0.03，规则限制±3sigma进行警报，通过对21次台班沥青混合料级配筛分结果的跟踪，均符合规范及设计要求。但从图3得到的是Up施工中稳定性并不好，这里排除样品取样误差，但整体指标无违返规则，上控制线（UCL）=0.336，下控制线（LCL）=0.262。利用动态控制图，可以得到3月17日施工Up=0.28， CA比=0.44两指标同时反应出粗集料偏多，而在施工过程中混合料容易产生离易， 同天FAf比=0.61说明细集料细颗粒偏多，级配很敏感，高温稳定性差，0.075mm筛孔通过率（%）=4.7和FAf比反应结果一致。该台班虽然筛分结果符合要求，我们也应该进行复测，同时对细集料各指标进行试验，再通过拌和站热筛级配进行复核。在图6中4月17日，FAf比发生违反控制点警报提示（-3sigma超界）。通过查找原因为除尘效能提高引起，施工前一晚拌和站进行布袋除。因此动态控制图很容易找出生产过程中问题。 通过建立施工动态管理图对级配进行生产过程监测，很直观的发现问题，做到试验数据指导施工的宗旨，进一步提高质量过程控制精细化科学化。在试验过程中我们应该尽可能消除样品取样误差，特别是大粒径混合料取样时更加重视。贝雷法提供给我们很好的结构设计理念，但它只是确定混合料级配的过程，应该结合马歇尔法才能进行完整的沥青混合料配合比设计。 结论贝雷法在配合比设计过程能够更加系统评价级配骨架的嵌挤情况，并且可以应用到日常施工过程质量控制中，在ATb-25沥青碎石上基层配合比设计中建议贝雷参数控制范围：CA（0.4-0.6）之间具有很好的骨架嵌挤效果，良好的高温稳定与耐外性； FAC（0.4-0.6）与FAf（0.3-0.6）之间具有适合的VV与VMA沥青混合料体积特征,施工过程中混合料稳定且容易碾压。 引用级配均匀性对级配粗细可以更加直观进行判断，建议ATb-25施工中Up的范围为配合比选定级配Up±3进行控制。 在保证样品具有代表性的前提下，施工过程中纯粹使用上下限范围对级配进行控制是不够的完善，在生产过程中应该制作级配动态控制图进行实时监测，在管理图制作中建议添加CA、FAc、FAf、Up、关键筛孔与0.075mm筛孔通过率等指标。 试验过程中我们应该尽可能消除样品取样误差，特别是大粒径混合料取样时更加重视，马歇尔配合比设计法结合贝雷法可以更加科学设计出优良的沥青混合料配合比。","categories":[{"name":"沥青混合料","slug":"沥青混合料","permalink":"http://www.jiangjinchao.pro/categories/沥青混合料/"}],"tags":[{"name":"级配","slug":"级配","permalink":"http://www.jiangjinchao.pro/tags/级配/"},{"name":"沥青混合料","slug":"沥青混合料","permalink":"http://www.jiangjinchao.pro/tags/沥青混合料/"},{"name":"论文","slug":"论文","permalink":"http://www.jiangjinchao.pro/tags/论文/"},{"name":"沥青路面","slug":"沥青路面","permalink":"http://www.jiangjinchao.pro/tags/沥青路面/"},{"name":"贝雷参数","slug":"贝雷参数","permalink":"http://www.jiangjinchao.pro/tags/贝雷参数/"},{"name":"压实度","slug":"压实度","permalink":"http://www.jiangjinchao.pro/tags/压实度/"},{"name":"工程质量","slug":"工程质量","permalink":"http://www.jiangjinchao.pro/tags/工程质量/"},{"name":"动态管理","slug":"动态管理","permalink":"http://www.jiangjinchao.pro/tags/动态管理/"},{"name":"SPSS","slug":"SPSS","permalink":"http://www.jiangjinchao.pro/tags/SPSS/"},{"name":"均匀性","slug":"均匀性","permalink":"http://www.jiangjinchao.pro/tags/均匀性/"}]},{"title":"浅谈正则表达式中的分组和引用","slug":"regular-expression-group","date":"2016-05-06T03:40:18.000Z","updated":"2018-04-04T06:40:20.896Z","comments":true,"path":"/2016/regular-expression-group.html","link":"","permalink":"http://www.jiangjinchao.pro/2016/regular-expression-group.html","excerpt":"由正则表达式如何匹配相同字符出发，讲讲正则表达式中的选择、分组和引用。 问题在外刊君读者群中看到有人提出这样的一个需求： 把字符串切成连续相同字符的正则怎么写？比如abbcccdddd切成a,bb,ccc,dddd 之前我对正则表达式也是略有研究，想尝试一下。其实我对正则表达式的学习基本完全来源于犀牛书的第10章，真正看懂这一章，我觉得操作正则表达式应该不在话下。","text":"由正则表达式如何匹配相同字符出发，讲讲正则表达式中的选择、分组和引用。 问题在外刊君读者群中看到有人提出这样的一个需求： 把字符串切成连续相同字符的正则怎么写？比如abbcccdddd切成a,bb,ccc,dddd 之前我对正则表达式也是略有研究，想尝试一下。其实我对正则表达式的学习基本完全来源于犀牛书的第10章，真正看懂这一章，我觉得操作正则表达式应该不在话下。 我的答案先给出我的答案吧： 1'abbccddd'.match(/(\\w)\\1*/g) // [\"a\", \"bb\", \"cc\", \"ddd\"] 说明拿到这个问题，首先要匹配字符[a-zA-Z0-9]，这里直接使用\\w。然后是全局匹配，在最后加上g。难点在于怎么判断重复。 翻看了犀牛书后，又读了一遍分组和引用的部分。使用小括号()将字符作为一个最小单元，同时小括号还能记忆这个组合相匹配的字符串。再使用反斜杠\\引用前面分组的表达式，数字1表示第一个小括号。这时完成了2个字符重复的要求。最后再使用*来匹配出现0次或n次。这个正则表达式就写完了。 下面详细说说分组和引用。 正则表达式的选择、分组和引用字符表 字符 含义 ` ` 选择，匹配的是该符号左边的子表达式或右边的子表达式 (...) 组合，将几个项组合为一个单元，这个单元可通过* + ? ` ` 等符号加以修饰，而且可以记住和这个组合相匹配的字符串以提供伺候的引用使用 (?:...) 只组合，把项组合到一个段元，但不记忆与该组相匹配的字符 \\n 和第n个分组第一次匹配的字符相匹配，组是圆括号中的子表达式（也有可能是嵌套的），组索引是从左到右的左括号数，(?:形式的分组不编码","categories":[{"name":"JavaScript","slug":"JavaScript","permalink":"http://www.jiangjinchao.pro/categories/JavaScript/"}],"tags":[{"name":"正则","slug":"正则","permalink":"http://www.jiangjinchao.pro/tags/正则/"},{"name":"Regular","slug":"Regular","permalink":"http://www.jiangjinchao.pro/tags/Regular/"},{"name":"分组","slug":"分组","permalink":"http://www.jiangjinchao.pro/tags/分组/"}]},{"title":"应用SPSS进行沥青路面压实度的动态控制","slug":"应用SPSS进行沥青路面压实度的动态控制","date":"2015-08-04T16:00:00.000Z","updated":"2018-04-15T11:13:13.983Z","comments":true,"path":"/2015/应用SPSS进行沥青路面压实度的动态控制.html","link":"","permalink":"http://www.jiangjinchao.pro/2015/应用SPSS进行沥青路面压实度的动态控制.html","excerpt":"摘要 本文主要通过介绍应用“贝雷法”对级配进行系统设计与检验，在生产管理过程应用SPSS对贝雷参数进行动态跟踪管理，并通过矿料间隙率（VMA）与贝雷参数的回归方程的模型建立，在沥青碎石混合料（ATb-25）中的应用，从别一个角度介绍沥青混凝土路面施工过程中对混合料级配的质量管理与控制措施，从而保障沥青路面施工质量。 前言我国在沥青路面配合设计过程中的级配选定主要通过规范与设计图给予的上下限范围，在范围内进行选定，同时要求配合比设计人员具有一定的工作经验才能选择出一条合理具有实施性的级配线，所以在选定级配时具有很强的主观性，而同时，这十几年高速公路大建设过程中，伴随社会经济不断发展，交通量猛增，造成早期路面损坏较为严重，在病害的原因分析过程中，有不少因级配设计的不合理所造成的。本文主要通过介绍贝雷法及贝雷参数在湄渝高速公路三明段ATb-25柔性基层配合比级配上选定与施工过程中的应用，并取得很好效果。 贝雷法级配检验分析“贝雷法”级配设计法是美国伊利诺州交通局Robert D. Bailey先生研究的一套系统的设计和检验沥青混合料级配的方法，该级配被称为嵌挤密实结构级配设计法。适用于多类沥青混合料配合比设计,如Superpave方法、马歇尔设计法等结合使用，在我国与马歇尔设计法配合使用，能够很好设计出良好的嵌挤结构，进一步提高沥青混合料的高温稳定性与耐久性。 贝雷法主要特征是通过控制粗细集料关键筛孔尺寸的通过率比例关系，让矿料级配获得良好的骨架结构。利用平面圆作为数学模型，以干涉理论作为理论设计依据，考虑了不同集料性状组合和组合后的空隙。粗颗粒间空隙尺寸的大小取决于颗粒形状和尺寸，如图1所示。","text":"摘要 本文主要通过介绍应用“贝雷法”对级配进行系统设计与检验，在生产管理过程应用SPSS对贝雷参数进行动态跟踪管理，并通过矿料间隙率（VMA）与贝雷参数的回归方程的模型建立，在沥青碎石混合料（ATb-25）中的应用，从别一个角度介绍沥青混凝土路面施工过程中对混合料级配的质量管理与控制措施，从而保障沥青路面施工质量。 前言我国在沥青路面配合设计过程中的级配选定主要通过规范与设计图给予的上下限范围，在范围内进行选定，同时要求配合比设计人员具有一定的工作经验才能选择出一条合理具有实施性的级配线，所以在选定级配时具有很强的主观性，而同时，这十几年高速公路大建设过程中，伴随社会经济不断发展，交通量猛增，造成早期路面损坏较为严重，在病害的原因分析过程中，有不少因级配设计的不合理所造成的。本文主要通过介绍贝雷法及贝雷参数在湄渝高速公路三明段ATb-25柔性基层配合比级配上选定与施工过程中的应用，并取得很好效果。 贝雷法级配检验分析“贝雷法”级配设计法是美国伊利诺州交通局Robert D. Bailey先生研究的一套系统的设计和检验沥青混合料级配的方法，该级配被称为嵌挤密实结构级配设计法。适用于多类沥青混合料配合比设计,如Superpave方法、马歇尔设计法等结合使用，在我国与马歇尔设计法配合使用，能够很好设计出良好的嵌挤结构，进一步提高沥青混合料的高温稳定性与耐久性。 贝雷法主要特征是通过控制粗细集料关键筛孔尺寸的通过率比例关系，让矿料级配获得良好的骨架结构。利用平面圆作为数学模型，以干涉理论作为理论设计依据，考虑了不同集料性状组合和组合后的空隙。粗颗粒间空隙尺寸的大小取决于颗粒形状和尺寸，如图1所示。 当颗粒全为圆形时如图1 (a) ，空隙尺寸为颗粒直径d的0.15倍,即0.15d;当组成颗粒中有两个圆面和一个平面时,如图1 (b)，空隙尺寸为0.22d;当一个圆面的和两个平面的颗粒组合时，如图 1(c)，空隙尺寸为0.24d;当颗粒全为平面时,如图1(d) ,则空隙尺寸为0.28d。系数0.22是这4种情形的平均值。并并将最大公称粒径(NMPS)尺寸0.22倍对应的标准筛网尺寸作级配粗细集料的分界点，高于其的集料为粗集料，反之为细集料，并与计算值最靠近的标准筛孔尺寸当作组成集料的第一控制筛孔（PCS）。细集料亦依照该原理划分为细集料里的粗集料以及细集料里的细集料，且产生依次的填充状态，作为第二控制筛（SCS）,SCS=PCS×0.22,第三控制筛孔（TCS）则是,TCS=SCS×0.22。合成级配比例确定之后，贝雷法提出3个参数对其展开分析，分别为：矿料中粗集料比（CA）, 矿料中细集料的粗料比（FAc）及矿料中细集料的细料比（FAf）。 CA比用于评价矿料中粗集料的含量和分析空隙特征。 $$ CA=\\frac{P_{D/2}-P_{PCS}}{100-P_{D/2}}$$ 1式中：为是粒径等于Ｄ/2(Ｄ是公称最大粒径)的通过率,%；为第一控制筛孔的通过率,%。 我国在使用贝雷法展开级配设计的时候,大体均是应用CA来检验挑选的级配,觉得在CA处于0.4到0.8的区间范围时,粗集料则可以出现嵌挤亦或是骨架。以ATb-25沥青碎石混合料为例，如果CA较小,通常低于0. 4时,沥青混合料非常易于出现离析,而伴随CA增长, 沥青混合料则愈加难以压实。如果CA趋近于1.0时,粗集料里的任一部分均无法构成粗集料骨架。虽然此类混合料很难离析,然而因为其包括许多干涉料,导致粗集料部分没办法获得较好填充,而且沥青混合料很难压实,出现推挤的可能性较大。如果CA 比高于1.0时,粗集料里的细料部分对于粗集料骨架的构成具有主导性效用，粗料部分开始作为填塞料,导致粗集料骨架的间隙封闭。因此考虑最佳压实特性的CA范围是0.4-0.6间，依据不一样的最大公称尺寸得到CA比范围也存在一定差异。 FAc比反映细集料中粗料部分与细料部分的嵌挤、填充情况,计算公式为： $$ F_{ac}=\\frac{P_{Scs}}{P_{Pcs}}$$ 1式中：为第二控制筛孔的通过率，%。 FAc变大,细料成分占比变大让细集料变成更密集的结构。可是比值大,说明细料太多,在0.45次级配图里就有“驼峰”曲线形成。产生以下不良后果:1)减少混合料的强度与抵御永久变形的能力;2)集料VMA不合格,不可以确保足够的沥青膜厚;3)混合料对沥青比例很敏锐,沥青的细小变化均会让混合料变得十分不稳定;4)也许导致压实不稳定,形成重大的推移、开裂。假如FAc比值低,细集料里的粗料空隙用很少的细料填充,则会提升VAM与混合料的空隙率。在 0.45次方级配图里曲线会出现凹状,会形成难压实状况。在3个参数里 FAc 值对混合料VAM作用最明显。通过以上可知细集料构成非常重要,在展开级配设计时 ,不可以只是采取0~5mm的一种规格材料,通常0.3~2.36mm之间的材料没办法符合级配规定,粉尘又多让比值太大亦或者太小,导致不良级配,对混合料的施工特性与路用性能产生不好作用。用ATb-25沥青碎石混合料当做案例，提议掌控在0.4-0.6间。 FAf比体现了合成集料中最细一级的嵌挤状况,计算公式为： $$ F_{af}=\\frac{P_{Tcs}}{P_{Scs}}$$ 1式中：为第三控制筛孔的通过率，%。 细集料中的 FAf 能够评价细集料中的细料成分的填充特性。和FAc一样,其值影响混合料的体积特性。FAf增加混合料的空隙减少；FAf减小VMA值增大。以ATb-25沥青碎石混合料为例，建议ATb-25的FAf在范围0.4-0.6间。 贝雷参数在配合比设计中的应用以三明湄渝高速公路莘口-明溪路面B1合同段ATb-25沥青碎石，密级配混合料为例，粗细集料分档分别为(19-26.5)mm：(9.5-19)mm：(4.75-9.5)mm：(0-4.75)mm：矿粉=23.5%：32%：12%：31.5%：1%，如表1所示。 规格(mm) 比例 31.5 26.5 19 16 13.2 9.5 4.75 2.36 1.18 0.6 0.3 0.15 0.075 泰勒线 横坐标 4.723 4.37 3.762 3.482 3.193 2.754 2.016 1.472 1.077 0.795 0.582 0.426 0.312 (19-26.5) 23.5 100 89.6 1.2 0.8 0.7 0.6 0.6 0.6 0.6 0.6 0.6 0.5 0.5 (9.5-19) 32 100 100 73.5 44.2 22 2.1 0.5 0.5 0.5 0.5 0.4 0.2 0.2 (4.75-9.5) 12 100 100 100 100 100 82.3 1.5 1 0.9 0.8 0.7 0.6 0.5 (0-4.75) 31.5 100 100 100 100 100 100 87.2 60.5 42.6 29.3 18.8 13.4 9.2 矿粉 1 100 100 100 100 100 100 100 100 100 100 100 95 80 合成级配 / 100 97.6 68.3 58.8 51.7 43.2 28.9 20.5 14.8 10.6 7.3 5.4 3.9 级配控制点 计算筛孔（mm） 套用筛孔（mm） 通过率（%） 公称最大粒径（NMPS） 26.5 26.5 97.6 1/2的公称最大粒径（D/2） 13.2 13.2 51.7 第一控制筛孔（PCS） 5.83 4.75 28.9 第二控制筛孔（SCS） 1.05 1.18 14.8 第三控制筛孔（TCS） 0.26 0.3 7.3 1表3 级配控制点汇总 因为贝雷法对集料颗粒假设是近似圆或立方体,认为直径d从0.15～0.28均不会对级配形成影响,因此为了使选用的PCS控制计算筛孔与级配中的固定筛孔一致,可以采用近似筛孔。 笔者通过骨架接触度 (SSC,stone-on-stone contact)对级配进行评价，如表5计算所得SSC=91.8％,该级配属于紧排骨架密实结构。根据美国NCHRP第386号项目的研究成果,沥青混合料的级配优选可以采用混合料中的集料嵌挤状况来进行评估。本次研究借鉴了这一研究成果,主要考察了表征ATb-25混合料中粗集料嵌挤状况的参数SSC, 对于当骨架接触度SSC&gt;90％时，混合料是紧排骨架密实结构；85％≤骨架接触度SSC≤90％时，混合料是松排骨架密实结构骨架接触度SSC≤85％，混合料是悬浮密实结构。 参数 指标 13.2mm以上集料的捣实密度(Dca),g/cm3 1.31 混合料沥青用量(pb),% 3.88 混合料试件毛体积密度(rf),g/cm3 2.42 粗集料通过率，% 51.7 混合料13.2mm以上颗粒密度(Dcm),g/cm3 1.203 骨架接触度(SSC),% 91.8 1表5 SSC计算评估 应用体积法预估最佳沥青用量，根据沥青设计比设计方法，最终选定ATb-25的最佳沥青用量为3.8%，并进行混合料路用性能检测，结果显示：残留强度比（%）:90.3&gt;75；旋转压实反算125次压实空隙率：5.4。同时在配合比验证阶段的试验路试辅中，现场混合合料均匀整体无离析，压实度与芯样空隙率均满足设计要求，以上指标均验证该级配具有良好高温稳定性与施工和易性。 贝雷参数在施工过程中的动态管理在高速公路的项目管理过程中应用SPSS软件提供的数值统计分析功能可以对一些质量指标进行统计分析，有效提高数据统计分析的工作效率与精确度，为工程质量管理提供科学依据。本文通过例举三明湄渝高速公路莘口-明溪路面B1合同段ATb-25上基层施工，施工管理过程中对沥青混合料级配的贝雷参数进行动态跟踪与分析，判断混合料级配的稳定性。采集数值见表6。 序号 施工日期 26.5 13.2 4.75 1.18 0.3 CA比 FAc比 FAf比 VMA 1 2014/1/18 98.2 51.1 28.8 14.6 6.8 0.456 0.507 0.466 13.25 2 2015/3/13 98.8 51 27.5 15.3 8.6 0.48 0.556 0.562 13.06 3 2015/3/17 95.9 50.2 28.1 14 8.5 0.444 0.498 0.607 12.88 4 2015/3/18 96.5 53.8 27.3 16.4 8.3 0.574 0.601 0.506 13.36 5 2015/3/19 95.8 52 29.5 16 8.8 0.469 0.542 0.55 13.6 6 2015/3/21 97.2 56.4 30.8 13.8 7.6 0.587 0.448 0.551 13.75 7 2015/3/24 95.8 50.7 27.4 13.9 8 0.473 0.507 0.576 13.4 8 2015/3/25 96.4 52.5 28.8 13.8 7.6 0.499 0.479 0.551 13.32 9 2015/3/28 98.7 51.9 28.4 15.6 7.5 0.489 0.549 0.481 13.51 10 2015/4/17 97.9 52.1 29.1 15.7 6.5 0.48 0.54 0.414 13.56 11 2015/4/18 98.2 51 28.7 15.2 8.2 0.455 0.53 0.539 13.31 12 2015/4/23 97.1 52 29.4 15.8 8.5 0.471 0.537 0.538 13.28 13 2015/5/9 97.3 50.1 27 14.6 8 0.463 0.541 0.548 13.38 14 2015/5/12 98.4 52.8 28.8 14.5 7.7 0.508 0.503 0.531 13.12 15 2015/5/13 95.8 51.5 29.4 14.6 8.6 0.456 0.497 0.589 13.23 16 2015/5/14 96.2 53.1 30.9 15.3 8.2 0.473 0.495 0.536 13.25 17 2015/5/15 98.1 50.7 28.1 14.9 7.9 0.458 0.53 0.53 13.3 18 2015/5/17 97.6 51.8 28.9 14.3 8.3 0.475 0.495 0.58 13.28 1表6 施工贝雷参数采集表 采用质量控制图，个体与移动全距的办法，对CA、FAc、FAf进行动态跟踪，主要参数（主要为：a）在±3sigma范围；b）正负中线8个百分点；c）最后3项中的2项±2sigma）进行范围监控，并设置CA范围上限：0.6，下限：0.4，目标值为设计级配CA值：0.47。FAc与FAf同理设置。 图2对CA进行动态跟踪，其中控制中心线为0.484；控制上限线（UCL）=μ+3σ=0.604；控制下限线（LCL）=μ-3σ=0.364。动态走势图对3月21日指标进行红色报警，虽然，该日CA=0.587在CA范围内（CA设置范围值：0.4-0.6）,但超出范围监控c项（最后3项中的2项±2sigma），我们应通过结合其他指标与现场施工情况分析原因。 如图3分析出CA在整体生产过程中处于稳定状态，各项指标均正常，其中控制中心线为0.536；控制上限线（UCL）=μ+3σ=0.660；控制下限线（LCL）=μ-3σ=0.412,容量指见表7。 贝雷参数与VMA建立模型贝雷参数在沥青混合料中的应用，可以使配合比设计中对级配的选定有了更深了解，从而更好的优化级配线，同时，矿料间隙率（VMA）在沥青混合料体积参数指标中非常重要，我们可以通过贝雷参数与VMA建立模型，推导出经验公式，能够服务工程项目，积累工程经验与提高工程管理水平。 笔者以ATb-25柔性基层施工的前9个工作日的矿料间隙率（VMA）实测指标（见表8），采用非线性回归分析进行模型拟合，ＶＭＡ为因变。 模型公式：1ＶＭＡ＝a+b*FAC+c*CA*CA+d*FAc*FAc+e*FAf*FAf+f*CA*FAc+g*CA*FAf+h*FAc*FAf 工作日 1 2 3 4 5 6 7 8 9 VMA 13.25 13.06 12.88 13.36 13.6 13.75 13.4 13.32 13.51 1表8 马歇尔试验VMA结果 采用列文伯格-马夸尔特法（Levenverg-Marquardt），设置平方和收敛性和参数收敛性为1e-8，计算出迭代数为5.1时连续残差平方和之间的相对减少量(SSCON)最多为 1E-8时停止运算，如表9所示。 迭代数a 残差平方和 a b c d e f g h 1 1604.282 0 0 0 0 0 0 0 0 1.1 0.181 -2.169 56.043 -6.747 -37.257 -14.588 -21.962 41.488 -10.567 2 0.181 -2.169 56.043 -6.747 -37.257 -14.588 -21.962 41.488 -10.567 2.1 0.139 -29.782 158.718 7.594 -149.253 -11.244 -12.979 14.9 7.155 3 0.139 -29.782 158.718 7.594 -149.253 -11.244 -12.979 14.9 7.155 3.1 0.093 -81.579 352.641 51.898 -392.32 -12.612 13.463 -74.509 91.483 4 0.093 -81.579 352.641 51.898 -392.32 -12.612 13.463 -74.509 91.483 4.1 0.086 -111.212 463.673 78.402 -533.648 -13.982 29.22 -128.276 143.277 5 0.086 -111.212 463.673 78.402 -533.648 -13.982 29.22 -128.276 143.277 5.1 0.086 -111.212 463.671 78.402 -533.645 -13.982 29.22 -128.275 143.275 1表9迭代历史记录b 通过参数评估值可以分析模型影响显著的变量有d、b和h，分别为FAf、CA、CAFAc，而影响相对不显著的变量有e,f分别为CACA和FAc*FAc（见表10未调整前参数估计值表），模型的拟合优度检验结果显示Ｒ2为0.846，使用德宾-沃森统计量 (Durbin-Watson)检验残差是否存在自相关，其取值范围介于0~4之间，其值越接近2，说明变量之间是相互不依存的, 本文拟合优度检验结果为1.605. 可以基本确定残差是不依存的。 笔者决定取消e、f变量，重新建模，调整模型公式为VMA= a+bFAc+cCACA+dFAcFAc +gCAFAc+hFAc*FAc。拟合优度检验结果显示Ｒ2为0.822，拟合优度检验结果Durbin-Watson为1.605。 通过线性回归置性区间采用95%水平值进行方差分析(Anova)，回归模型F值为32.351, 显著性(Sig.)值为0.001 &lt;0.05, 可以判断采用的这个回归模型是有统计学意义的, 系数检验值（见表13）。 最终得出回归方程： 1VMA=-93.935+397.918FAc+52.759CA2-409.426FAc2-62.117CA*FAf+54.764FAc*FAf。 我们对矿料间隙率（VMA）-贝雷参数回归方程进行验证数据（见表14），前9个工作日为回归数据值，后9个工作日为验证值，并采用独立样本T检验，置信区间设置为95%，分析判断18个工作日的VMA预测值与VMA实际值两个不同总体均值之间的差异性进行检验，分析结果（见表15，表16）为显著值为0.974&gt;0.05，所有确定两总体均值之间不存在显著差异，也就是回归方程在湄渝高速公路ATB-25施工中具有指导意义。 结论贝雷法使广大建设者在优化级配中，从单一的0.45次方级配曲线试配的经验法中解放出来，,通过贝雷法三参数可以更系统的评价混合料级配骨架嵌挤的情况。以保证混合料优良的体积特性(合适的VMA 和空隙率)和施工性能(良好的压实性能和施工和易性),从而使设计出来的混合料达到骨架密实,兼具良好的高温抗车辙能力和耐久性。 应用SSC(stone-on-stone contact) 骨架接触度对贝雷法设计的级配进行评价。 项目管理过程中应用统计软件在生产过程中对贝雷参数进行动态跟踪与分析，有效提高统计分析的工作效率与精确度，为工程质量管理提供科学依据。 建立贝雷参数-VMA回归方程，项目管理人员可以在已知级配通过率情况下，预测VMA值是否合格，同时可以验证和反算马歇尔试验体积参数是否正常，为工程管理多一种管理手段与思路。 参与文献1234[1] William R V , William J P, Samuel H C.Bailey method for gradation selection in HMA mixture design[R] Transportation Research Circular Number E-C044,2002[2] 曹卫东 吕伟民 李晓军 《集料级配评估的贝雷法》1671-2579[3] 《spss统计分析》时立文著，清华大学出版社[4] 谢志华. 谈谈 Durbin-Watson检验[J].预测，1987,(06)","categories":[{"name":"沥青混合料","slug":"沥青混合料","permalink":"http://www.jiangjinchao.pro/categories/沥青混合料/"}],"tags":[{"name":"沥青混合料","slug":"沥青混合料","permalink":"http://www.jiangjinchao.pro/tags/沥青混合料/"},{"name":"论文","slug":"论文","permalink":"http://www.jiangjinchao.pro/tags/论文/"},{"name":"沥青路面","slug":"沥青路面","permalink":"http://www.jiangjinchao.pro/tags/沥青路面/"},{"name":"贝雷参数","slug":"贝雷参数","permalink":"http://www.jiangjinchao.pro/tags/贝雷参数/"},{"name":"压实度","slug":"压实度","permalink":"http://www.jiangjinchao.pro/tags/压实度/"},{"name":"工程质量","slug":"工程质量","permalink":"http://www.jiangjinchao.pro/tags/工程质量/"},{"name":"动态管理","slug":"动态管理","permalink":"http://www.jiangjinchao.pro/tags/动态管理/"},{"name":"VMA","slug":"VMA","permalink":"http://www.jiangjinchao.pro/tags/VMA/"},{"name":"模型","slug":"模型","permalink":"http://www.jiangjinchao.pro/tags/模型/"},{"name":"SPSS","slug":"SPSS","permalink":"http://www.jiangjinchao.pro/tags/SPSS/"}]},{"title":"在低版本 IE 中点击空 block 元素的问题","slug":"low-IE-click-empty-block-bug","date":"2015-07-23T16:06:05.000Z","updated":"2018-04-04T06:40:12.742Z","comments":true,"path":"/2015/low-IE-click-empty-block-bug.html","link":"","permalink":"http://www.jiangjinchao.pro/2015/low-IE-click-empty-block-bug.html","excerpt":"问题描述当我们点击一个空的、没有任何内容的 div 或者其他块级元素时。在 IE11 以下，是没有反应的。 使用场景这类问题使用场景还是很普遍的。比如 UI 给了一张大图，要点击图上的某一块位置的时候。可以用一个空的 div 定位到相应的位置，然后对它进行绑定事件。","text":"问题描述当我们点击一个空的、没有任何内容的 div 或者其他块级元素时。在 IE11 以下，是没有反应的。 使用场景这类问题使用场景还是很普遍的。比如 UI 给了一张大图，要点击图上的某一块位置的时候。可以用一个空的 div 定位到相应的位置，然后对它进行绑定事件。 解决办法解决方法很简单，即给这个块级元素填充任意颜色，然后将其透明度设置为0。代码如下： background-color: #fff; opacity: 0; filter:alpha(opacity=0);","categories":[{"name":"CSS","slug":"CSS","permalink":"http://www.jiangjinchao.pro/categories/CSS/"}],"tags":[{"name":"HTML","slug":"HTML","permalink":"http://www.jiangjinchao.pro/tags/HTML/"},{"name":"CSS","slug":"CSS","permalink":"http://www.jiangjinchao.pro/tags/CSS/"},{"name":"IE","slug":"IE","permalink":"http://www.jiangjinchao.pro/tags/IE/"},{"name":"兼容性","slug":"兼容性","permalink":"http://www.jiangjinchao.pro/tags/兼容性/"}]},{"title":"JavaScript 阶段总结","slug":"JavaScript-Net","date":"2015-07-08T16:06:05.000Z","updated":"2018-04-04T06:40:02.601Z","comments":true,"path":"/2015/JavaScript-Net.html","link":"","permalink":"http://www.jiangjinchao.pro/2015/JavaScript-Net.html","excerpt":"做了一张思维导图。总结这几个月对 JavaScript 的学习吧，也是一个复习。也是我目前的技能树。","text":"做了一张思维导图。总结这几个月对 JavaScript 的学习吧，也是一个复习。也是我目前的技能树。","categories":[{"name":"JavaScript","slug":"JavaScript","permalink":"http://www.jiangjinchao.pro/categories/JavaScript/"}],"tags":[{"name":"JavaScript","slug":"JavaScript","permalink":"http://www.jiangjinchao.pro/tags/JavaScript/"},{"name":"HTML","slug":"HTML","permalink":"http://www.jiangjinchao.pro/tags/HTML/"},{"name":"CSS","slug":"CSS","permalink":"http://www.jiangjinchao.pro/tags/CSS/"},{"name":"思维导图","slug":"思维导图","permalink":"http://www.jiangjinchao.pro/tags/思维导图/"},{"name":"技能树","slug":"技能树","permalink":"http://www.jiangjinchao.pro/tags/技能树/"}]},{"title":"Excel VBA数值随机不重复函数","slug":"随机不重复数值","date":"2015-06-22T01:06:05.000Z","updated":"2018-04-12T12:21:05.353Z","comments":true,"path":"/2015/随机不重复数值.html","link":"","permalink":"http://www.jiangjinchao.pro/2015/随机不重复数值.html","excerpt":"","text":"代码如下： 1234567891011121314151617181920212223242526272829sub a() Const bb As Integer = 1000 - 1 Dim RndNumber, TempArray(bb), kk(bb), i As Integer Randomize (Timer)For i = 0 To bb TempArray(i) = i Next i j = 1 For i = bb To 1 Step -1 RndNumber = Int(i * Rnd) kk(i) = TempArray(RndNumber) + 1 ' 随机不重复数值 TempArray(RndNumber) = TempArray(i) j = j + 1 Next iend sub","categories":[{"name":"VBA","slug":"VBA","permalink":"http://www.jiangjinchao.pro/categories/VBA/"}],"tags":[{"name":"Excel","slug":"Excel","permalink":"http://www.jiangjinchao.pro/tags/Excel/"},{"name":"VBA","slug":"VBA","permalink":"http://www.jiangjinchao.pro/tags/VBA/"},{"name":"代码","slug":"代码","permalink":"http://www.jiangjinchao.pro/tags/代码/"}]},{"title":"EXCEL VBA连接ACCESS数据库","slug":"EXCEL VBA连接ACCESS数据","date":"2015-06-22T01:06:05.000Z","updated":"2018-04-12T12:19:53.996Z","comments":true,"path":"/2015/EXCEL VBA连接ACCESS数据.html","link":"","permalink":"http://www.jiangjinchao.pro/2015/EXCEL VBA连接ACCESS数据.html","excerpt":"添加数据1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253Sub a()'Option ExplicitPublic myData As String, myTable As String, SQL As StringPublic cnn As ADODB.ConnectionPublic rs As ADODB.RecordsetOn Error GoTo hhhmyData = ThisWorkbook.Path &amp; \"\\SWDB.mdb\" Set cnn = New ADODB.Connection With cnn .Provider = \"Microsoft.Ace.OleDB.12.0\" .Open myData End WithmyTable = \"SW01\"SQL = \"select * from \" &amp; myTablefor i=1 to 4 '可添加4次rs.Fields(\"a\") = Cells(5 + i, 15)next irs.UpdateMsgBox \"添加成功！\", vbOKOnly + vbInformation, \"创建数据\"rs.Closecnn.CloseSet rs = NothingSet cnn = Nothinghhh:MsgBox \"添加数据时出现错误!\" &amp; vbCrLf &amp; \"原因:该编号重复或数据类型不对，请查找原因.\", vbCritical, \"提示！！！！\"end sub","text":"添加数据1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253Sub a()'Option ExplicitPublic myData As String, myTable As String, SQL As StringPublic cnn As ADODB.ConnectionPublic rs As ADODB.RecordsetOn Error GoTo hhhmyData = ThisWorkbook.Path &amp; \"\\SWDB.mdb\" Set cnn = New ADODB.Connection With cnn .Provider = \"Microsoft.Ace.OleDB.12.0\" .Open myData End WithmyTable = \"SW01\"SQL = \"select * from \" &amp; myTablefor i=1 to 4 '可添加4次rs.Fields(\"a\") = Cells(5 + i, 15)next irs.UpdateMsgBox \"添加成功！\", vbOKOnly + vbInformation, \"创建数据\"rs.Closecnn.CloseSet rs = NothingSet cnn = Nothinghhh:MsgBox \"添加数据时出现错误!\" &amp; vbCrLf &amp; \"原因:该编号重复或数据类型不对，请查找原因.\", vbCritical, \"提示！！！！\"end sub 修改数据1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950'Option ExplicitPublic myData As String, myTable As String, SQL As StringPublic cnn As ADODB.ConnectionPublic rs As ADODB.RecordsetmyData = ThisWorkbook.Path &amp; \"\\SWDB.mdb\"Set cnn = New ADODB.Connection With cnn .Provider = \"Microsoft.Ace.OleDB.12.0\" .Open myData End WithmyTable = \"SWHH\"On Error GoTo hhhSQL1 = \"update \" &amp; myTable &amp; \" set \"SQL = SQL1 &amp; \"盒号='\" &amp; [a2] &amp; \"' , 盒质量=\" &amp; [b2] &amp; \" , 保存时间= \" &amp; da &amp; \" where 盒号='\" &amp; [a2] &amp; \"'\"Set rs = cnn.Execute(SQL)Set rs = New ADODB.Recordsetrs.Open SQL, cnn, adOpenKeyset, adLockOptimisticrs.Closecnn.CloseSet rs = NothingSet cnn = Nothinghhh: MsgBox \"保存数据出现错误!\" &amp; vbCrLf &amp; \"原因:该编号重复或数据类型不对.\", vbCritical, \"保存数据\"end sub 查询数据12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455'Option ExplicitPublic myData As String, myTable As String, SQL As StringPublic cnn As ADODB.ConnectionPublic rs As ADODB.RecordsetmyData = ThisWorkbook.Path &amp; \"\\SWDB.mdb\"Set cnn = New ADODB.Connection With cnn .Provider = \"Microsoft.Ace.OleDB.12.0\" .Open myData End WithSQL = \"select * from \" &amp; myTable &amp; \" where KID=\" &amp; [s2] &amp; \" order by ID DESC\"Set rs = cnn.Execute(SQL)Set rs = New ADODB.Recordsetrs.Open SQL, cnn, adOpenKeyset, adLockOptimisticIf rs.RecordCount &gt; 0 Then For i = 1 To rs.RecordCount Cells(5 + i, 2) = rs.Fields(\"a\") rs.MoveNext Next iElse MsgBox \"没有查询到相关数据\", vbCriticalEnd Ifrs.Closecnn.CloseSet rs = NothingSet cnn = Nothingend sub 删除数据123456789101112131415161718192021222324252627282930313233343536373839404142434445sub a()'Option ExplicitPublic myData As String, myTable As String, SQL As StringPublic cnn As ADODB.ConnectionPublic rs As ADODB.RecordsetmyData = ThisWorkbook.Path &amp; \"\\SWDB.mdb\" Set cnn = New ADODB.Connection With cnn .Provider = \"Microsoft.Ace.OleDB.12.0\" .Open myData End Withif MsgBox(\"本数据删除后,将无法恢复!\" &amp; vbCrLf &amp; \"是否要删除?\", vbQuestion + vbYesNo, \"删除数据\") = vbNo Then Exit SubmyTable = \"SW01\"SQL = \"delete from \" &amp; myTable &amp; \" where KID= \" &amp; [s2]Set rs = cnn.Execute(SQL)Set rs = New ADODB.Recordsetrs.Open SQL, cnn, adOpenKeyset, adLockOptimisticMsgBox \"已经成功将序号为： \" &amp; [s2] &amp; \" 数据删除！\", vbInformationrs.Closecnn.CloseSet rs = NothingSet cnn = Nothingend sub","categories":[{"name":"VBA","slug":"VBA","permalink":"http://www.jiangjinchao.pro/categories/VBA/"}],"tags":[{"name":"Excel","slug":"Excel","permalink":"http://www.jiangjinchao.pro/tags/Excel/"},{"name":"VBA","slug":"VBA","permalink":"http://www.jiangjinchao.pro/tags/VBA/"},{"name":"ACCESS","slug":"ACCESS","permalink":"http://www.jiangjinchao.pro/tags/ACCESS/"},{"name":"数据库","slug":"数据库","permalink":"http://www.jiangjinchao.pro/tags/数据库/"}]},{"title":"Weinre --WebApp 调试工具","slug":"weinre","date":"2015-06-17T16:06:05.000Z","updated":"2018-04-04T06:39:49.762Z","comments":true,"path":"/2015/weinre.html","link":"","permalink":"http://www.jiangjinchao.pro/2015/weinre.html","excerpt":"什么是 weinre？weinre官网 上有两句有意思的介绍： weinre is WEb INspector REmote. Pronounced like the word “winery”. Or maybe like the word “weiner”. Who knows, really. weinre is a debugger for web pages, like FireBug (for FireFox) and Web Inspector (for WebKit-based browsers), except it’s designed to work remotely, and in particular, to allow you debug web pages on a mobile device such as a phone. 上面说 weinre 是一个远程 web 调试器。说到了它的发音，还挺幽默，哈哈。 远程 web 调试器。先说调试器，就像火狐中的 FireBug，Chrome 中的调试器一样。就是在浏览器中按下 F12 出现的那个工具。但是在手机上，你没办法按 F12，而这个 weinre 就是在手机上的 F12，与传统的不同的是，它是在手机上浏览你的 web 页面，在 PC 上查看调试工具，非常方便，这就是所谓的远程。","text":"什么是 weinre？weinre官网 上有两句有意思的介绍： weinre is WEb INspector REmote. Pronounced like the word “winery”. Or maybe like the word “weiner”. Who knows, really. weinre is a debugger for web pages, like FireBug (for FireFox) and Web Inspector (for WebKit-based browsers), except it’s designed to work remotely, and in particular, to allow you debug web pages on a mobile device such as a phone. 上面说 weinre 是一个远程 web 调试器。说到了它的发音，还挺幽默，哈哈。 远程 web 调试器。先说调试器，就像火狐中的 FireBug，Chrome 中的调试器一样。就是在浏览器中按下 F12 出现的那个工具。但是在手机上，你没办法按 F12，而这个 weinre 就是在手机上的 F12，与传统的不同的是，它是在手机上浏览你的 web 页面，在 PC 上查看调试工具，非常方便，这就是所谓的远程。 为什么用 weinre？现代浏览器中调试工具都非常强大了，可以直接模拟手机设备，为什么还要用 weinre 这么麻烦的东西呢？ 我觉得 PC 端的浏览器虽说可以模拟，但模拟毕竟还是模拟，还只是鼠标长按滑来滑去。在开发过程中，使用手机或平板直接来感受是多么的酷，指尖在移动设备的屏幕上摩擦摩擦！给人的直观感受绝对秒杀浏览器的模拟。 原理使用一种工具之前，了解它的原理和结构是很有帮助的。weinre 作为一种远程调试工具，在结构上分为三层： 目标页面（target）：被调试的页面，页面已嵌入 weinre 的远程 js，下文会介绍； Debug客户端（client）：本地的 Web Inspector 调试客户端； Debug服务端（agent）：一个 HTTP Server，为目标页面与 Debug 客户端建立通信。 三层结构如下图所示： weinre 的 debug 客户端是基于 Web Inspector 开发，而 Web Inspector 只与以 WebKit 为核心的浏览器兼容，所以 Weinre 的客户端只能用 Chrome 或者 Safari 打开。 官网上也有相应的平台支持说明： Platforms supported - debug server 服务端 任何支持 node.js 的平台。 Platforms supported - debug client 客户端（跑 debugger 界面的浏览器） Google Chrome Apple Safari Other recent-ish WebKit-based browsers 其他基于 webkit 内核的现代浏览器 Platforms supported - debug target 目标页面（在移动设备中调试运行的目标页面） Android Browser application iOS Mobile Safari application PhoneGap/Cordova other 安装 weinre 是 nodeJS 的一个应用，首先要 安装 nodeJS 运行环境 使用 npm 命令，安装 weinre npm -g install weinre 安装成功后会有类似的信息： C:\\Users\\haoyang\\AppData\\Roaming\\npm\\weinre -&gt; C:\\Users\\haoyang\\AppData\\Roaming\\npm\\node_modules\\weinre\\weinre weinre@2.0.0-pre-I0Z7U9OV C:\\Users\\haoyang\\AppData\\Roaming\\npm\\node_modules\\weinre ├── underscore@1.7.0 ├── nopt@3.0.2 (abbrev@1.0.7) └── express@2.5.11 (mime@1.2.4, qs@0.4.2, mkdirp@0.3.0, connect@1.9.2) 使用 启动服务 weinre --boundHost -all- --httpPort 8081 –boundHost [hostname | ip address | -all-] The ip address to bind the server to. –httpPort [portNumber] The port to run the HTTP server on. 更多配置项参考 官网的说明。 启动成功后看到如下界面： 给目标页面添加一行脚本 可以看到 2.中的 Target Script 说要添加一行脚本到要调试的 web 页面中。 Target Script You can use this script to inject the weinre target code into your web page. http://localhost:8081/target/target-script-min.js#anonymous Example: &lt;script src=&quot;http://localhost:8081/target/target-script-min.js#anonymous&quot;&gt;&lt;/script&gt; 这里要说明一下，要把上面的 localhost 换为本机的 ip 地址。 我们可以在命令行中 使用 ipconfig 得到 ip 地址，如下（当然你的可能和我的不一样）： IPv4 地址 . . . . . . . . . . . . : 192.168.1.107 即插入如下代码： &lt;script src=&quot;http://192.168.1.107:8081/target/target-script-min.js#anonymous&quot;&gt;&lt;/script&gt; 进入调试页面 PC 端访问这个地址： debug client user interface: http://localhost:8081/client/#anonymous 此时 target 为 none，如下图： 现在我们要用手机访问同一个局域网下的这个目标页面。我们可以把要调试的页面放到这个路径下： C:\\Users\\haoyang\\AppData\\Roaming\\npm\\node_modules\\weinre\\web 通过 http://192.168.1.107:8081/FILE_NAME 在手机上访问，就可以看到了。当然前提是同一个局域网。 但是这样可能不太灵活，每次都要把目标页面放到指定的目录下。所以我们可以另外开一个服务器。 我使用了基于 node.js 的 http-server 工具。将要调试的页面发布。这样我就能通过 ip 地址加端口号在手机上访问到了。 我在手机上访问 http://192.168.1.107:8080 打开要调试的页面，此时 debug client user interface 中自动检测到 target。就可以进行调试了！ 如下图： 参考 Web移动应用调试工具——Weinre weinre - WEb INspector REmote webapp开发调试环境–weinre配置","categories":[{"name":"JavaScript","slug":"JavaScript","permalink":"http://www.jiangjinchao.pro/categories/JavaScript/"}],"tags":[{"name":"JavaScript","slug":"JavaScript","permalink":"http://www.jiangjinchao.pro/tags/JavaScript/"},{"name":"HTML","slug":"HTML","permalink":"http://www.jiangjinchao.pro/tags/HTML/"},{"name":"CSS","slug":"CSS","permalink":"http://www.jiangjinchao.pro/tags/CSS/"},{"name":"Weinre","slug":"Weinre","permalink":"http://www.jiangjinchao.pro/tags/Weinre/"},{"name":"WebApp","slug":"WebApp","permalink":"http://www.jiangjinchao.pro/tags/WebApp/"},{"name":"调试工具","slug":"调试工具","permalink":"http://www.jiangjinchao.pro/tags/调试工具/"}]},{"title":"JavaScript 面向对象","slug":"JavaScript-Object-Oriented","date":"2015-06-15T06:06:05.000Z","updated":"2018-04-04T06:39:39.979Z","comments":true,"path":"/2015/JavaScript-Object-Oriented.html","link":"","permalink":"http://www.jiangjinchao.pro/2015/JavaScript-Object-Oriented.html","excerpt":"本文为慕课网 JavaScript深入浅出 JavaScript 面向对象笔记。 概念 面向对象程序设计（Object-oriented programming，OOP）是一种程序设计范型，同时也是一种程序开发的方法。对象指的是类的实例。它将对象作为程序的基本单元，将程序和数据封装其中，以提高软件的重用性、灵活性和扩展性。 ——维基百科 一般面向对象包含：继承，封装，多态，抽象","text":"本文为慕课网 JavaScript深入浅出 JavaScript 面向对象笔记。 概念 面向对象程序设计（Object-oriented programming，OOP）是一种程序设计范型，同时也是一种程序开发的方法。对象指的是类的实例。它将对象作为程序的基本单元，将程序和数据封装其中，以提高软件的重用性、灵活性和扩展性。 ——维基百科 一般面向对象包含：继承，封装，多态，抽象 基于原型的继承function Foo() { this.y = 2; } console.log(typeof Foo.prototype); //object Foo.prototype.x = 1; var obj3 = new Foo(); console.log(obj3.y); //2 console.log(obj3.x); //1 创建函数 Foo 的时候，就会有一个内置的 Foo.prototype 属性，并且这个属性是对象。 在使用 new Foo(); 创建对象实例时。this 会指向一个对象，并且这个对象的原型会指向 Foo.prototype 属性。this.y = 2 给这个对象赋值，并把这个对象返回。把这个对象赋值给 obj3。 y 是 obj3 上的，x 是 obj3 的原型 Foo.prototype 上的。 prototype 属性与原型prototype 是函数对象上预设的对象属性。 原型是对象上的原型，通常是构造器的 prototype 属性。 例function Person(name, age) { this.name = name; this.age = age; } Person.prototype.LEGS_NUM = 2; Person.prototype.ARMS_NUM = 2; Person.prototype.hi = function() { console.log(&apos;Hi, my name is &apos; + this.name + &quot;. I&apos;m &quot; + this.age + &apos; years old now&apos;); }; Person.prototype.walking = function() { console.log(this.name + &apos; is walking...&apos;); }; function Student(name, age, className) { Person.call(this, name, age); //使 Person 中的 this 指向 Student this.className = className; } Student.prototype = Object.create(Person.prototype); Student.prototype.constructor = Student; Student.prototype.hi = function() { console.log(&apos;Hi, my name is &apos; + this.name + &quot;. I&apos;m &quot; + this.age + &apos; years old now, and from &apos; + this.className + &quot;.&quot;); }; Student.prototype.learn = function(subject) { console.log(this.name + &apos; is learning &apos; + subject + &apos; at &apos; + this.className + &apos;.&apos;); } //test var gao = new Student(&apos;Gao&apos;, &apos;24&apos;, &apos;Class 3123&apos;); console.log(gao); // 这个对象的具体内容见下图 gao.hi(); //Hi, my name is Gao. I&apos;m 24 years old now, and from Class 3123. gao.LEGS_NUM; //2 gao.walking(); //Gao is walking... gao.learn(&apos;JavaScript&apos;); //Gao is learning JavaScript at Class 3123. Object.create(arg) 创建一个空对象，并且这个对象的原型指向参数 arg。 Student.prototype.constructor = Student 为了保证一致性，否则 constructor 指向 Person。 原型链gao 对象的原型链： 下面通过图形展示原型链： Object.create(null) &amp; .bind(null)这两种算是特例。 Object.create(null) 和 .bind(null) 这两种方式创建出来的对象是没有 prototype 属性的，为 undefined。 prototype 属性改变 prototypeJavaScript 中的 prototype 是对象，在运行的时候可以修改。 给 prototype 添加或删除一些属性，是会影响到已经创建好的实例对象的。 但是，直接修改 prototype 属性，是不会影响到已经创建好的实例对象的。但是会影响到新的实例对象。如下代码： // 上接上面的代码 // 给 prototype 添加或删除一些属性 Student.prototype.x = 101; console.log(gao.x); //101 // 直接修改 prototype 属性 Student.prototype = { y: 2 }; // 不会影响到已创建好的实例对象 console.log(gao.x); //101 console.log(gao.y); //undefined // 会影响到新创建的实例对象 var ying = new Student(&apos;Ying&apos;, 24, &apos;UI&apos;); console.log(ying.x); //undefined console.log(ying.y); //2 内置构造器的 prototype 属性修改内置构造器的 prototype 属性后，在实例化这个对象后，枚举其属性时，会把修改的内置构造器的 prototype 属性也枚举出来，有时候这是要避免的。可用 defineProperty 方法解决。如下代码： Object.prototype.x = 1; var obj = {}; console.log(obj.x); //1 console.log(obj); for (var k in obj) { console.log(&apos;result---&gt;&apos; + k); } // result---&gt;x 使用 defineProperty 后： Object.defineProperty(Object.prototype, &apos;x&apos;, { writable: true, value: 1 }); var obj = {}; console.log(obj.x);//1 console.log(obj); for (var k in obj) { console.log(&apos;result---&gt;&apos; + k); } // nothing output here 其实也可以这样枚举，使用 hasOwnProperty 方法： for (var key in obj) { if (obj.hasOwnProperty(key)) { console.log(&quot;result---&gt;&quot; + key); } } 创建对象-new/原型链 instanceofconsole.log([1, 2] instanceof Array); //true console.log([1, 2] instanceof Object); //true console.log(new Object() instanceof Array); //false 左边要求是对象，右边要求是构造器或函数。它会判断：右边的构造器中的 prototype 属性是否出现在左边的对象的原型链上。 注意：不同的 window 或 iframe 间的对象类型检测不能使用 instanceof！ 实现继承的方式function Person() {} function Student() {} Student.prototype = Person.prototype; //1 Student.prototype = new Person(); //2 Student.prototype = Object.create(Person.prototype); //3 Student.prototype.constructor = Student; 注释中： 1 是错误的。如果改变了 Student 就会改变 Person 2 可以实现继承，但是其调用了构造函数，若父类构造函数中有形参，那么传值就会比较奇怪。 3 是最好的方法。创建了一个空对象，并且对象的原型指向参数 Person.prototype。这样便实现了继承。同时原型链写，不向上查找。但是 Object.create 是ES5 中的方法，所以可以使用下列代码做兼容： if (!Object.create) { Object.create = function(proto) { function F() {} F.prototype = proto; return new F; }; } 模拟重载function Person() { var args = arguments; if (typeof args[0] === &apos;object&apos; &amp;&amp; args[0]) { if (args[0].name) { this.name = args[0].name; } if(args[0].age){ this.age = args[0].age; } } else { if (args[0]) { this.name = args[0]; } if (args[1]) { this.age = args[1]; } } } //重写 toString 方法 Person.prototype.toString = function() { console.log(&apos;name=&apos;+this.name+&apos;, age=&apos;+this.age); }; var gao = new Person({name:&apos;Gao&apos;,age:24}); gao.toString(); // name=Gao, age=24 var ying = new Person(&apos;Ying&apos;,25); ying.toString(); // name=Ying, age=25 对参数进行判断，模拟实现重载。 调用子类方法function Person(name) { this.name = name; } function Student(name, className) { this.className = className; Person.call(this, name); // 调用基类的构造器 } var gao = new Student(&apos;Gao&apos;, &apos;3123&apos;); console.log(gao); // Student {className: &quot;3123&quot;, name: &quot;Gao&quot;} Person.prototype.init = function() {}; Student.prototype.init = function() { // do sth... Person.prototype.init.apply(this, arguments); // 同时也想调用父类被覆盖的方法 }; 主要是两种：调用父类的构造器，调用原型链上父类被覆盖的方法。 链式调用function ClassManager() {} ClassManager.prototype.addClass = function(str) { console.log(&apos;Class: &apos; + str + &apos; added&apos;); return this; }; var manager = new ClassManager(); manager.addClass(&apos;classA&apos;).addClass(&apos;classB&apos;).addClass(&apos;classC&apos;); // Class: classA added // Class: classB added // Class: classC added 重点在于 return this。返回这个 ClassManager 的实例。这样这个实例又可以继续调用方法。 抽象类在构造器中 throw new Error(&#39;&#39;); 抛异常。这样防止这个类被直接调用。 function DetectorBase() { throw new Error(&apos;Abstract class can not be invoked directly!&apos;); } DetectorBase.detect = function() { console.log(&apos;Detection starting...&apos;); } DetectorBase.stop = function() { console.log(&apos;Detection stopped.&apos;); }; DetectorBase.init = function() { throw new Error(&apos;Error&apos;); } var d = new DetectorBase();// Uncaught Error: Abstract class can not be invoked directly! function LinkDetector() {} LinkDetector.prototype = Object.create(DetectorBase.prototype); LinkDetector.prototype.constructor = LinkDetector; var l = new LinkDetector(); console.log(l); //LinkDetector {}__proto__: LinkDetector l.detect(); //Uncaught TypeError: l.detect is not a function l.init(); //Uncaught TypeError: l.init is not a function var d = new DetectorBase(); 是不能实例化的，会报错 l.detect(); 但是这个为什么报错我就不知道了。 已经在原课程下提问了，期待老师的讲解。 抽象类中子类为什么不能调用父类的非抽象方法？ 问题已经解决了，应该是老师当时的课件写错了，应该再基类中将这两个方法写在其原型 prototype 上。如下： function DetectorBase() { throw new Error(&apos;Abstract class can not be invoked directly!&apos;); } DetectorBase.prototype.detect = function() { console.log(&apos;Detection starting...&apos;); }; DetectorBase.prototype.stop = function() { console.log(&apos;Detection stopped.&apos;); }; DetectorBase.prototype.init = function() { throw new Error(&apos;Error&apos;); }; // var d = new DetectorBase();// Uncaught Error: Abstract class can not be invoked directly! function LinkDetector() {} LinkDetector.prototype = Object.create(DetectorBase.prototype); LinkDetector.prototype.constructor = LinkDetector; var l = new LinkDetector(); console.log(l); //LinkDetector {}__proto__: LinkDetector l.detect(); //Detection starting... l.init(); //Uncaught Error: Error 模块化var moduleA; moduleA = function() { var prop = 1; function func() {} return { func: func, prop: prop }; }(); // 立即执行匿名函数 prop，func 不会被泄露到全局作用域。 或者另一种写法，使用 new moduleA = new function() { var prop = 1; function func() {} this.func = func; this.prop = prop; } 更复杂的可以使用 Sea.js Kissy Require.js 模块化工具。 最后补充一点设计模式相关的资料，我还没有来得及看的： 学用 JavaScript 设计模式 常用的Javascript设计模式 JavaScript设计模式深入分析","categories":[{"name":"JavaScript","slug":"JavaScript","permalink":"http://www.jiangjinchao.pro/categories/JavaScript/"}],"tags":[{"name":"JavaScript","slug":"JavaScript","permalink":"http://www.jiangjinchao.pro/tags/JavaScript/"},{"name":"面向对象","slug":"面向对象","permalink":"http://www.jiangjinchao.pro/tags/面向对象/"},{"name":"慕课网","slug":"慕课网","permalink":"http://www.jiangjinchao.pro/tags/慕课网/"},{"name":"ife","slug":"ife","permalink":"http://www.jiangjinchao.pro/tags/ife/"}]},{"title":"JavaScript 中的闭包","slug":"JavaScript-closure","date":"2015-06-14T06:06:05.000Z","updated":"2018-04-04T06:39:33.117Z","comments":true,"path":"/2015/JavaScript-closure.html","link":"","permalink":"http://www.jiangjinchao.pro/2015/JavaScript-closure.html","excerpt":"本文为慕课网 JavaScript深入浅出 JavaScript 中的闭包笔记。 闭包的例子function outer() { var localVal = 30; return localVal; } console.log(outer()); //30 function outer2() { var localVal = 30; return function() { return localVal; }; } var func = outer2(); console.log(func()); //30 对于第一个普通的函数，在执行过之后，它的局部变量就可以被释放。 对于第二个函数，localVal 是不能被释放的。因为调用 outer2() 后，返回的是匿名函数，匿名函数可以访问外部的 outer2() 中的局部变量，并返回了这个局部变量 localVal。当 outer2() 赋值给 func 后，再次调用 func()，仍能访问到局部变量 localVal。这种情况就是闭包。","text":"本文为慕课网 JavaScript深入浅出 JavaScript 中的闭包笔记。 闭包的例子function outer() { var localVal = 30; return localVal; } console.log(outer()); //30 function outer2() { var localVal = 30; return function() { return localVal; }; } var func = outer2(); console.log(func()); //30 对于第一个普通的函数，在执行过之后，它的局部变量就可以被释放。 对于第二个函数，localVal 是不能被释放的。因为调用 outer2() 后，返回的是匿名函数，匿名函数可以访问外部的 outer2() 中的局部变量，并返回了这个局部变量 localVal。当 outer2() 赋值给 func 后，再次调用 func()，仍能访问到局部变量 localVal。这种情况就是闭包。 应用 所谓闭包就是：子函数可以使用父函数中的局部变量。 ! function() { var localData = &quot;localData here&quot;; document.addEventListener(&apos;click&apos;, function() { console.log(localData); //这里访问外部数据 }); }(); ! function() { var localData = &quot;localData here&quot;; var url = &quot;http://www.baidu.com/&quot;; $.ajax({ url: url, success: function() { // do sth... console.log(localData); //这里访问外部数据 } }); }() 常见错误之循环闭包比如我们想循环绑定点击事件 document.body.innerHTML = &quot;&lt;div id=div1&gt;aaa&lt;/div&gt;&lt;div id=div2&gt;bbb&lt;/div&gt;&lt;div id=div3&gt;ccc&lt;/div&gt;&quot;; for (var i = 1; i &lt; 4; i++) { document.getElementById(&apos;div&apos; + i). addEventListener(&apos;click&apos;, function() { alert(i); // all are 4! }); } 上面的代码，我们点击任何一个 div，弹出的都是 4 这是因为，for 循环中的 i 是一个全局变量。这里内函数的点击事件，访问到的是循环后的 i 值，所以是 4 document.body.innerHTML = &quot;&lt;div id=div1&gt;aaa&lt;/div&gt;&lt;div id=div2&gt;bbb&lt;/div&gt;&lt;div id=div3&gt;ccc&lt;/div&gt;&quot;; for (var i = 1; i &lt; 4; i++) { ! function(i) { document.getElementById(&apos;div&apos; + i). addEventListener(&apos;click&apos;, function() { alert(i); // 1, 2, 3 }); }(i); } 这里使用了立即执行函数，并给匿名函数赋值 i，这样点击事件每一次就会访问到相应的 i。 封装(function() { var _userId = 9527; var _typeId = &quot;item&quot;; var exp = {}; function converter(userId) { return +userId; } exp.getUserId = function() { return converter(_userId); }; exp.getTypeId = function() { return _typeId; }; window.a = exp; })(); console.log(a.getUserId()); //9527 console.log(a.getTypeId()); //item console.log(a._userId); //undefined console.log(a._typeId); //undefined console.log(converter); //Uncaught ReferenceError: converter is not defined 上面的代码通过闭包实现了一个封装。 总结 在计算机科学中，闭包（也称词法闭包或函数闭包）是指一个函数或函数的引用，与一个引用环境绑定在一起。这个引用环境是一个存储该函数每个非局部变量（也叫自由变量）的表。 闭包，不同于一般的函数，它允许一个函数在立即词法作用域外调用时，仍可访问非本地变量。 from 维基百科 闭包的优点 灵活和方便 封装 缺点 空间浪费 内存泄露 性能消耗","categories":[{"name":"JavaScript","slug":"JavaScript","permalink":"http://www.jiangjinchao.pro/categories/JavaScript/"}],"tags":[{"name":"JavaScript","slug":"JavaScript","permalink":"http://www.jiangjinchao.pro/tags/JavaScript/"},{"name":"慕课网","slug":"慕课网","permalink":"http://www.jiangjinchao.pro/tags/慕课网/"},{"name":"ife","slug":"ife","permalink":"http://www.jiangjinchao.pro/tags/ife/"},{"name":"闭包","slug":"闭包","permalink":"http://www.jiangjinchao.pro/tags/闭包/"}]},{"title":"JavaScript 中的 this","slug":"JavaScript-this","date":"2015-06-12T06:06:05.000Z","updated":"2018-04-04T06:39:18.912Z","comments":true,"path":"/2015/JavaScript-this.html","link":"","permalink":"http://www.jiangjinchao.pro/2015/JavaScript-this.html","excerpt":"本文为慕课网 JavaScript深入浅出 JavaScript 中的 this笔记。 全局的 this全局 this 一般指向全局对象，浏览器中的全局对象就是 window。 例如： 12345console.log(this.document === document); //trueconsole.log(this === window); //truethis.a = 91;console.log(window.a); //91","text":"本文为慕课网 JavaScript深入浅出 JavaScript 中的 this笔记。 全局的 this全局 this 一般指向全局对象，浏览器中的全局对象就是 window。 例如： 12345console.log(this.document === document); //trueconsole.log(this === window); //truethis.a = 91;console.log(window.a); //91 一般函数的 this1234function f1 () &#123; return this;&#125;console.log(f1() === window);//true, global object 可以看到一般函数的 this 也指向 window，在 nodeJS 中为 global object 12345function f2 () &#123; \"use strict\";//使用严格模式 return this;&#125;console.log(f1() === undefined);//true 严格模式中，函数的 this 为 undefined 作为对象方法的函数的 this1234567var o = &#123; prop: 37, f: function() &#123; return this.prop; &#125;&#125;;console.log(o.f()); // 37 上述代码通过字面量创建对象 o。 f 为对象 o 的方法。这个方法的 this 指向这个对象，在这里即对象 o。 123456789var o = &#123; prop: 37&#125;;function independent() &#123; return this.prop;&#125;o.f = independent;console.log(o.f()); // 37 上面的代码，创建了对象 o，但是没有给对象 o，添加方法。而是通过 o.f = independent 临时添加了方法属性。这样这个方法中的 this 同样也指向这个对象 o。 对象原型链上的 this123456789var o = &#123; f: function() &#123; return this.a + this.b; &#125;&#125;;var p = Object.create(o);p.a = 1;p.b = 2;console.log(p.f()); //3 通过 var p = Object.create(o) 创建的对象，p 是基于原型 o 创建出的对象。 p 的原型是 o，调用 f() 的时候是调用了 o 上的方法 f()，这里面的 this 是可以指向当前对象的，即对象 p。 get/set 方法与 this12345678910111213141516function modulus() &#123; return Math.sqrt(this.re * this.re + this.im * this.im);&#125;var o = &#123; re: 1, im: -1, get phase() &#123; return Math.atan2(this.im, this.re); &#125;&#125;;Object.defineProperty(o, 'modulus', &#123; get: modulus, enumerable: true, configurable: true&#125;);console.log(o.phase, o.modulus); // -0.78 1.4142 get/set 方法中的 this 也会指向 get/set 方法所在的对象的。 构造器中的 this12345function MyClass() &#123; this.a = 25;&#125;var o = new MyClass();console.log(o.a); //25 new MyClass() 的时候，MyClass()中的 this 会指向一个空对象，这个对象的原型会指向 MyClass.prototype。MyClass()没有返回值或者返回为基本类型时，默认将 this 返回。 123456789function C2() &#123; this.a = 26; return &#123; a: 24 &#125;;&#125;o = new C2();console.log(o.a); //24 因为返回了对象，将这个对象作为返回值 call/apply 方法与 this12345678910111213function add(c, d) &#123; return this.a + this.b + c + d;&#125;var o = &#123; a: 1, b: 3&#125;;add.call(o, 5, 7); // 1 + 3 + 5 + 7 = 16add.apply(o, [10, 20]); // 1 + 3 + 10 + 20 = 34function bar() &#123; console.log(Object.prototype.toString.call(this));&#125;bar.call(7); // \"[object Number]\" bind 方法与 this12345678910111213function f() &#123; return this.a;&#125;var g = f.bind(&#123; a: \"test\"&#125;);console.log(g()); // testvar o = &#123; a: 37, f: f, g: g&#125;;console.log(o.f(), o.g()); // 37, test 绑定之后再调用时，仍然会按绑定时的内容走，所以 o.g() 结果是 test","categories":[{"name":"JavaScript","slug":"JavaScript","permalink":"http://www.jiangjinchao.pro/categories/JavaScript/"}],"tags":[{"name":"JavaScript","slug":"JavaScript","permalink":"http://www.jiangjinchao.pro/tags/JavaScript/"},{"name":"慕课网","slug":"慕课网","permalink":"http://www.jiangjinchao.pro/tags/慕课网/"},{"name":"ife","slug":"ife","permalink":"http://www.jiangjinchao.pro/tags/ife/"},{"name":"this","slug":"this","permalink":"http://www.jiangjinchao.pro/tags/this/"}]},{"title":"JavaScript 函数","slug":"JavaScript-function","date":"2015-06-11T06:06:05.000Z","updated":"2018-04-04T06:39:00.196Z","comments":true,"path":"/2015/JavaScript-function.html","link":"","permalink":"http://www.jiangjinchao.pro/2015/JavaScript-function.html","excerpt":"本文为慕课网 JavaScript深入浅出 JavaScript 函数笔记。 概念函数是一块JavaScript代码，被定义一次，但可执行和调用多次。 JS中的函数也是对象，所以JS函数可以像其它对象那样操作和传递。 所以我们也常叫JS中的函数为函数对象。 例如： 123456789function foo(x, y) &#123; if (typeof x === 'number' &amp;&amp; typeof y === 'number') &#123; return x + y; &#125; else &#123; return 0; &#125;&#125;foo(1, 2); // 3 一般由3部分组成： 函数名 参数列表 函数体","text":"本文为慕课网 JavaScript深入浅出 JavaScript 函数笔记。 概念函数是一块JavaScript代码，被定义一次，但可执行和调用多次。 JS中的函数也是对象，所以JS函数可以像其它对象那样操作和传递。 所以我们也常叫JS中的函数为函数对象。 例如： 123456789function foo(x, y) &#123; if (typeof x === 'number' &amp;&amp; typeof y === 'number') &#123; return x + y; &#125; else &#123; return 0; &#125;&#125;foo(1, 2); // 3 一般由3部分组成： 函数名 参数列表 函数体 调用方式 直接调用 1foo(); 对象方法 1o.method(); 构造器 1new Foo(); call/apply/bind 1func.call(o); 函数声明与函数表达式函数声明就是对函数进行普通的声明 123function add(a, b) &#123; return a + b;&#125; 函数表达式 将函数赋值给变量 1234//function variablevar add = function(a, b) &#123; // body...&#125;; 立即执行函数 把匿名函数用括号括起来，再直接调用。 1234// IEF(Immediately Executed Function)(function() &#123; // body...&#125;)(); 函数对象作为返回值 123return function() &#123; // body...&#125;; 命名式函数表达式 1234//NFE(Named Function Expression)var add = function foo(a, b) &#123; // body...&#125;; 这里大家肯定会好奇，这个函数怎么调用？到底用哪个名字呢？ 做一个测试： 1234var func = function nfe() &#123;&#125;;console.log(func === nfe);// 在 IE6~8，得到 false// 在 IE9+ 及现代浏览器中 Uncaught ReferenceError: nfe is not defined 那么命名函数表达式有什么使用场景呢？ 一般用于调试方便，如果使用匿名函数，执行的时候看不到函数名，命名函数表达式是可以看到函数名的。 或者在递归时，使用名字调用自己。 但是这两种用法都不常见。 变量 &amp; 函数的声明前置举两个例子 例1，函数声明： 123456var num = add(1,2);console.log(num);function add(a, b) &#123; return a + b;&#125; 例2，函数表达式： 123456var num = add(1, 2);console.log(num);var add = function(a, b) &#123; return a + b;&#125;; 例1中得到的结果是 3，而例2中是 Uncaught TypeError: add is not a function。 因为函数和变量在声明的时候，会被前置到当前作用域的顶端。例1将函数声明 function add(a, b) 前置到作用域前端，例2将声明 var add 前置到其作用域的前端了，并没有赋值。赋值的过程是在函数执行到响应位置的时候才进行的。 Function 构造器除了函数声明、函数表达式。还有一种创建函数对象的方式，是使用函数构造器。 12345var func = new Function('a','b','console.log(a+b);');func(1,2);//3var func2 = Function('a','b','console.log(a+b);');func2(1,2);//3 Function 中前面的参数为后面函数体的形参，最后一个参数为函数体。可以看到传入的都是字符串，这样的创建函数对象的方法是不安全的。 还有一点，Function 构造器的得到的函数对象，拿不到外层函数的变量，但是可以拿到全局变量。它的作用域与众不同，这也是很少使用的原因之一。 对比 函数属性 &amp; arguments函数属性 &amp; arguments1234567891011121314function foo(x, y, z) &#123; arguments.length; // 2 arguments[0]; // 1 arguments[0] = 10; x; // change to 10 arguments[2] = 100; z; // still undefined!!! arguments.callee === foo; // true&#125;foo(1, 2);foo.length; // 3foo.name; //\"foo\" foo.name 函数名 foo.length 形参个数 arguments.length 实参个数 未传参数时，arguments[i] 相应的位置仍然是 undefined。 严格模式下，代码中的改变实参失效。即 x 仍为 1。同时 callee 属性失效。 关于 callee callee 属性的初始值就是正被执行的 Function 对象。 callee 属性是 arguments 对象的一个成员，它表示对函数对象本身的引用，这有利于匿名函数的递归或者保证函数的封装性，例如下边示例的递归计算1到n的自然数之和。而该属性仅当相关函数正在执行时才可用。还有需要注意的是callee拥有length属性，这个属性有时用于验证还是比较好的。 arguments.length是实参长度，arguments.callee.length是形参长度，由此可以判断调用时形参长度是否和实参长度一致。 apply/call 方法（浏览器）12345678function foo(x, y) &#123; console.log(x, y, this);&#125;foo.call(100, 1, 2); //1 2 Number &#123;[[PrimitiveValue]]: 100&#125;foo.apply(true, [3, 4]); //3 4 Boolean &#123;[[PrimitiveValue]]: true&#125;foo.apply(null); //undefined undefined Windowfoo.apply(undefined); //undefined undefined Window call/apply 的作用：调用一个对象的一个方法，以另一个对象替换当前对象(其实就是更改对象的内部指针，即改变对象的this指向的内容)。 call/apply 的第一个参数为对象，即使不是对象，也会被包装为对象。 call 为扁平化传参，apply 后面的参数为数组 传入 null/undefined 时，实际为 Window 对象 在严格模式下：上述代码最后两行分别输出 null, undefined bind 方法bind 是 ES5 中提出的方法，所以浏览器支持为 IE9+ 及现代浏览器。 123456789101112131415this.x = 9;var module = &#123; x: 81, getX: function() &#123; return console.log(this.x); &#125;&#125;;module.getX(); //81var getX = module.getX;getX(); //9var boundGetX = getX.bind(module);boundGetX(); //81 bind 主要用于改变函数中的 this module.getX(); 直接通过对象调用自己的方法，结果是 81 var getX = module.getX; 将这个方法赋值给一个全局变量，这时 this 指向了 Window，所以结果为 9 var boundGetX = getX.bind(module); 使用 bind 绑定了自己的对象，这样 this 仍然指向 module 对象，所以结果为 81 bind 与 curryingbind 可以使函数柯里化，那么什么是柯里化？ 在计算机科学中，柯里化（Currying）是把接受多个参数的函数变换成接受一个单一参数(最初函数的第一个参数)的函数，并且返回接受余下的参数且返回结果的新函数的技术。这个技术由 Christopher Strachey 以逻辑学家 Haskell Curry 命名的，尽管它是 Moses Schnfinkel 和 Gottlob Frege 发明的。 123456789function add(a, b, c) &#123; return a + b + c;&#125;var func = add.bind(undefined, 100);func(1, 2); //103var func2 = func.bind(undefined, 200);func2(10); //310 add 函数拥有 3 个参数。我们想先传入一个参数，再去传其他参数。 var func = add.bind(undefined, 100); add 函数对象调用 bind 方法，由于不需要将 this 指向原来的 add 函数对象，所以第一个参数写为 undefined 或 null。第二个参数 100 传给了 add 函数中的形参 a，并赋值给一个新的函数对象 func。 这时，func(1, 2) 即相当于传入后两个参数，所以结果为 103。 同理，基于 func 可以创造一个函数 func2。它只用传最后一个参数。 bind 与 new12345678910111213function foo() &#123; this.b = 100; return this.a;&#125;console.log(foo()); //undefinedvar func = foo.bind(&#123; a: 1&#125;);console.log(func()); //1console.log(new func()); //foo &#123;b: 100&#125; 对于使用了 new func() 这种方式创建对象，其返回值为一个对象。 而原函数 foo 的返回值不是对象，所以会直接忽视这个 return 方法。而是变为 return this;。并且 this 会被初始化为一个空对象，这个空对象的原型指向 foo.prototype。所以后面的 bind 是不起作用的。 这里面这个 this 对象包含一个属性 b = 100。所以返回的是对象 {b: 100}。","categories":[{"name":"JavaScript","slug":"JavaScript","permalink":"http://www.jiangjinchao.pro/categories/JavaScript/"}],"tags":[{"name":"JavaScript","slug":"JavaScript","permalink":"http://www.jiangjinchao.pro/tags/JavaScript/"},{"name":"慕课网","slug":"慕课网","permalink":"http://www.jiangjinchao.pro/tags/慕课网/"},{"name":"ife","slug":"ife","permalink":"http://www.jiangjinchao.pro/tags/ife/"},{"name":"函数","slug":"函数","permalink":"http://www.jiangjinchao.pro/tags/函数/"}]},{"title":"浅谈倒装式沥青路面结构在福建高速中的应用","slug":"浅谈倒装式沥青路面结构在福建高速中的应用","date":"2015-06-04T16:00:00.000Z","updated":"2018-04-08T15:28:02.072Z","comments":true,"path":"/2015/浅谈倒装式沥青路面结构在福建高速中的应用.html","link":"","permalink":"http://www.jiangjinchao.pro/2015/浅谈倒装式沥青路面结构在福建高速中的应用.html","excerpt":"福建省第一条高速公路，福泉高速公路从1999年正式开通，到2015年”十二五”末，已建成通车里程4817公里，并实现县县通高速目标。这十几年高速公路大建设过程中，伴随社会经济不断发展，交通量猛增，造成早期路面损坏较为严重,例如反射裂缝。本文结合福建省高速建设工作实际，介绍沥青碎石、级配碎石与稳定粒料半刚性基层组合结构形式（简称倒装式），有效减少路面反射性裂缝，延长道路使用寿命，减少管奍费用，提高社会经济效益。 路面结构的分析半刚性基层沥青路面特点早期福建省高速路面结构设计一般奉行”强基、薄面、稳路基”的方针。采用18cm沥青面层+20cm5%水泥稳定碎石半刚性基层+30cm3%水泥稳定碎石半刚性底基层的结构组合形式（例如福宁高速、京福高速），该结构统称为半刚性基层沥青路面层结构，具有承载力、刚度大、模量高、板体性强、且变沉小等特点，是我国沥青路面的主要结构形式。","text":"福建省第一条高速公路，福泉高速公路从1999年正式开通，到2015年”十二五”末，已建成通车里程4817公里，并实现县县通高速目标。这十几年高速公路大建设过程中，伴随社会经济不断发展，交通量猛增，造成早期路面损坏较为严重,例如反射裂缝。本文结合福建省高速建设工作实际，介绍沥青碎石、级配碎石与稳定粒料半刚性基层组合结构形式（简称倒装式），有效减少路面反射性裂缝，延长道路使用寿命，减少管奍费用，提高社会经济效益。 路面结构的分析半刚性基层沥青路面特点早期福建省高速路面结构设计一般奉行”强基、薄面、稳路基”的方针。采用18cm沥青面层+20cm5%水泥稳定碎石半刚性基层+30cm3%水泥稳定碎石半刚性底基层的结构组合形式（例如福宁高速、京福高速），该结构统称为半刚性基层沥青路面层结构，具有承载力、刚度大、模量高、板体性强、且变沉小等特点，是我国沥青路面的主要结构形式。 半刚性基层材料变形量小，脆性材料，具有温缩、干缩及排水不良等特性，决定裂缝的产生不可避免。因此，半刚性基层路面的破坏一般从半刚性基层的缩缝开始，破坏由基层向面层和路基延伸，最终发展为整个路面结构的破坏。而这种破坏模式属于路面的结构性破坏。一旦损坏，维修养护是目前面临的一个大难题。 柔性基层沥青路面特点2006年龙长高速起福建高速结构设计采用”倒装式”沥青路面结构设计，以笔者所在湄渝高速三明段项目为例，采用了10cm沥青面层+16cm沥青碎石上基层+16cm级配碎石下基层+32cm3%水泥稳定碎石半刚性底基层的结构组合形式，该结构为柔性基层沥青路面。材料属于粘弹性材料、韧性好，有一定自愈能力，并且具有层间排水性能，但变形大，弯沉大，因此路面厚度也大，投资成本高。 柔性基层路面只要在结构设计、施工中不出现问题，它的破坏一般始于面层，其破坏属于功能性破坏。对于柔性基层沥青面层内部出现的微小裂缝，由于沥青材料的粘弹性，所以这些微小裂缝往往能够自愈，而不至于像半刚性基层材料，出现裂缝后，将迅速进入裂缝扩展阶段。 路面结构应力分布特点压应力在面层顶面最大，随深度增加，压应力逐渐减小，达到某深度时，结构内部压应力恰好为0，深度继续增加，这时结构内部拉应力开始增大，一般最大弯拉应力出现在基层的底面。剪应力沿路面深度的分布情况，其峰值主要分布在面层0cm～10cm的范围内，在重载、超载的条件下这一影响深度会继续扩大，但是剪应力的分布范围主要集中在0cm～15cm的范围内。即剪应力的影响范围主要集中在面层、基层。一般认为沥青层越厚越容易产生车辙。国外研究表明当沥青层厚度小于18cm时，车辙随沥青层增加而增大，但是当沥青层厚度超过18cm时，车辙与厚度的关系就不大了，这再次证明路面剪应力的影响范围主要在面层和基层。 我国规范规定的路面设计方法在进行柔性基层沥青混凝土路面设计上还很不完善，限制了柔性基层沥青混凝土路面结构在我国的应用。如路面设计弯沉值为： 1Ld=600Ne-0.2Ac.As.Ab ---［JTG D50-2006（8.0.5）］ 式中：Ab—路面结构类型系数，半刚性基层沥青路面为1.0，柔性基层沥青路面为1.6。系数取值幅度过大，混合基层时，如按基层类型系数取1.0，设计层厚度偏厚，不符合实际；若基层类型系数取1.6偏大，设计层厚度偏小，结构设计不合理。在规范的条文说明中，建议在采用混合式基层路面时，路面结构系数Ab可采用内插的方法，并说明目前尚处于研究阶段，缺乏工程实践经验。 沥青碎石、级配碎石与稳定粒料半刚性基层的优化组合为改善级配碎石的抗疲劳性能和受力及提高沥青面层抗疲劳性能及抗裂性，在级配碎石与沥青面层之间设置沥青碎石作为上基层，由于沥青碎石的加入，增加了沥青层的厚度，有效地提高了沥青面层的抗裂性，泉三高速三明段项目采用该路面结构形式，通车至今有效减少路面横向裂缝。在沥青混凝土面层与级配碎石基层之间设置沥青碎石，可使材料模量值较大的沥青混凝土与材料模量值略低的级配碎石之间有一层联结层，减少层间的模量比，以达到降低沥青混凝土面层层底拉应力，提高路面结构的整体使用功能，特别是在交通量较大的情况宜采用沥青碎石作为上基层，同时沥青碎石具有较好的排水性能，可减少沥青混凝土路面水损坏等病害。 以上结构由于是在沥青面层与半刚性基层之间加一层沥青碎石，由于在回弹模量较大的沥青，面层与半刚性基层之间夹了一层较为柔软的回弹模量较小的沥青碎石等层，故称为倒装结构或夹层结构。经计算可知，倒装结构在力学上的特点是： 路表弯沉大于一般的半刚性基层沥青路面，且与中间厚度成正比； 传统的半刚性基层沥青路面结构由于回弹模量较大使得沥青面层基本处于受压状态，而倒装结构由于中间层回弹模量较小使得面层受拉，但此拉应力对于一般沥青面层（6cm～12cm）尚不大于其疲劳抗拉强度，故面层不会拉裂破坏； 中间层受压，力学上是安全的，该层太薄不足以起到减少反射裂缝的作用，太厚则使路表弯沉过大，而且较强的两层材料中间夹一层厚的较软层，结构会不稳定； 对于半刚性基层的底部拉应力，只要厚度足够，拉应力能减小到安全值。 柔性基层沥青路面的经济性能分析本文引用王志军、李福普等同行所著《浦南高速公路柔性基层沥青路面全寿命经济效益分析》分析结果： 浦南高速采用的新型柔性基层路面结构的 经济性要好于半刚性结构,从工程经济的角度讲,新型柔性基层路面结构大于半刚性路面结构； 从初始修建费来看,新型柔性基层路面结构高于传统的半刚性路面结构,其初始修建费是半刚性路面结构的1. 2倍左右;从整个管理部门费用 ( 初始修建费、养护费、改建费和残值之和) 来看,在20年使用寿命分析期内,半刚性基层路面结构管理 部门费用高于新型柔性基层路面结构,比新型柔性基层路面结构高15%左右;在30年使用寿命分析期内,半刚性基层路面结构比新型柔性基层路面结构高50%左右; 在使用寿命期内新型柔性基层路面结构管 理部门费用和总费用均最优,且分析期越长,效果越明显； 从养护维修费用看,半刚性基层沥青路面结构的养护维修费用远远高于新型沥青路面结构养护维修费用,其养护维修费是新型路面结构养护维修费用的6. 3倍左右； 根据经济效益分析,在20年使用寿命分析期内,与通常半刚性基层沥青路面结构相比,总费用 (管理部门费用和用户费)角度比较,浦南新型柔性 基层路面结构节省资金77.69万元/km,约节省7%的费用; 在30年使用寿命分析期内节省260.62万元/km,约节省15%的费用。 结束语充分利用柔性基层与半刚性基层沥青路面的优点，把二者完美结合，可以有效地发挥“强基薄面”的应用特点，在当前我国重载交通条件下，不仅在一定程度上满足了路面结构与功能性能使用性能的全面要求，而且克服了两者的不足，有利于当前的施工工艺水平和防治水损害等优点。所以把柔性基层与半刚性基层沥青路面优化组合，能更好地适应重载。 经过采用全寿命经济效益分析法，对半刚性基层沥青路面和柔性基层沥青路面这两种路面结构进行比较分析发现，长寿命柔性基沥青路面口虽然初期投资大，但是由于后期维护保修费用低，寿命周期长，投资回报时间也长，故它的全寿命周期成本费用反而低。 引用1234《沥青路面结构设计方法对比分析》 任本江 1673-5781（2010）06-0740-04；《不同类型基层设计参数计算分析研究》 岩土工程学报《半刚性基层沥青路面最大拉应力点位分布研究》马庆伟，郭平 2012, 26(02):36-40；《浦南高速公路柔性基层沥青路面全寿命经济效益分析 》 王志军,李福普,严二虎,李 健","categories":[{"name":"沥青路面","slug":"沥青路面","permalink":"http://www.jiangjinchao.pro/categories/沥青路面/"}],"tags":[{"name":"结构","slug":"结构","permalink":"http://www.jiangjinchao.pro/tags/结构/"},{"name":"论文","slug":"论文","permalink":"http://www.jiangjinchao.pro/tags/论文/"},{"name":"沥青路面","slug":"沥青路面","permalink":"http://www.jiangjinchao.pro/tags/沥青路面/"},{"name":"倒装式","slug":"倒装式","permalink":"http://www.jiangjinchao.pro/tags/倒装式/"}]},{"title":"JavaScript 作用域和作用域链","slug":"scope","date":"2015-05-20T06:06:05.000Z","updated":"2018-04-04T06:38:53.113Z","comments":true,"path":"/2015/scope.html","link":"","permalink":"http://www.jiangjinchao.pro/2015/scope.html","excerpt":"JavaScript 作用域作用域就是变量与函数的可访问范围。在JavaScript中，变量的作用域有全局作用域和局部作用域两种。 全局作用域(Global Scope)在代码中任何地方都能访问到的对象拥有全局作用域，一般来说以下 3 种情形拥有全局作用域。 最外层函数和在最外层函数外面定义的变量拥有全局作用域 123456789101112var outVariable = \"我是最外层变量\"; //最外层变量function outFun() &#123; //最外层函数 var inVariable = \"内层变量\"; function innerFun() &#123; //内层函数 console.log(inVariable); &#125; innerFun();&#125;console.log(outVariable); //我是最外层变量outFun(); //内层变量console.log(inVariable); //inVariable is not definedinnerFun(); //innerFun is not defined","text":"JavaScript 作用域作用域就是变量与函数的可访问范围。在JavaScript中，变量的作用域有全局作用域和局部作用域两种。 全局作用域(Global Scope)在代码中任何地方都能访问到的对象拥有全局作用域，一般来说以下 3 种情形拥有全局作用域。 最外层函数和在最外层函数外面定义的变量拥有全局作用域 123456789101112var outVariable = \"我是最外层变量\"; //最外层变量function outFun() &#123; //最外层函数 var inVariable = \"内层变量\"; function innerFun() &#123; //内层函数 console.log(inVariable); &#125; innerFun();&#125;console.log(outVariable); //我是最外层变量outFun(); //内层变量console.log(inVariable); //inVariable is not definedinnerFun(); //innerFun is not defined 所有末定义直接赋值的变量自动声明为拥有全局作用域 1234567function outFun2() &#123; variable = \"未定义直接赋值的变量\"; var inVariable2 = \"内层变量2\";&#125;outFun2();//要先执行这个函数，否则根本不知道里面是啥console.log(variable); //未定义直接赋值的变量console.log(inVariable2); //inVariable2 is not defined 所有window对象的属性拥有全局作用域 window对象的内置属性都拥有全局作用域，例如 window.name、window.location、window.top 等。 局部作用域(Local Scope)和全局作用域相反，局部作用域一般只在固定的代码片段内可访问到，最常见的例如函数内部，所有在一些地方也会看到有人把这种作用域称为函数作用域。 如 1. 中的变量 inVariable 和函数 innerFun 都只拥有局部作用域。 再补充几个例子 全局作用域，函数作用域，eval作用域 123456789var a = 10; // 全局(function() &#123; var b = 20;// 函数&#125;)();console.log(a); // 10console.log(b); // error, b in not definedeval(\"var a = 1;\"); // eval JavaScript 中没有块作用域 1234567for (var item in &#123; a: 1, b: 2&#125;) &#123; console.log(item);&#125;console.log(item); // item still in scope 作用域链(Scope Chain)在 JavaScript 中，函数也是对象，实际上，JavaScript 里一切都是对象。函数对象和其它对象一样，拥有可以通过代码访问的属性和一系列仅供 JavaScript 引擎访问的内部属性。其中一个内部属性是 [[Scope]]，由 ECMA-262 标准第三版定义，该内部属性包含了函数被创建的作用域中对象的集合，这个集合被称为函数的作用域链，它决定了哪些数据能被函数访问。 在函数创建时，它的作用域链中会填入一个全局对象，该全局对象包含了所有全局变量。 函数执行时会创建一个称为“运行期上下文(execution context)”的内部对象，运行期上下文定义了函数执行时的环境。每个运行期上下文都有自己的作用域链，用于标识符解析，当运行期上下文被创建时，而它的作用域链初始化为当前运行函数的[[Scope]]所包含的对象。 这些值按照它们出现在函数中的顺序被复制到运行期上下文的作用域链中。它们共同组成了一个新的对象，叫“活动对象(activation object)”，该对象包含了函数的所有局部变量、命名参数、参数集合以及this，然后此对象会被推入作用域链的前端。 当运行期上下文被销毁，活动对象也随之销毁。 在函数执行过程中，每遇到一个变量，都会经历一次标识符解析过程以决定从哪里获取和存储数据。该过程从作用域链头部，也就是从活动对象开始搜索，查找同名的标识符，如果找到了就使用这个标识符对应的变量，如果没找到继续搜索作用域链中的下一个对象，如果搜索完所有对象都未找到，则认为该标识符未定义。函数执行过程中，每个标识符都要经历这样的搜索过程。 例子举一个作用域链的例子。 123456789var outVariable = \"我是最外层变量\"; //最外层变量function outFun() &#123; //最外层函数 var inVariable = \"内层变量\"; function innerFun() &#123; //内层函数 console.log(inVariable); var tempVariable = inVariable; &#125; innerFun();&#125; 对最开始的代码稍加修改 其作用域链为： 123456window├──outVariable└──outFun() ├──inVariable └──innerFun() └──tempVariable 对于 innerFun()，其作用域链包含 3 个对象：innerFun() 自己的变量对象、outFun()的变量对象、全局变量对象。 特例-构造器创建的函数123456function outer() &#123; var i = 1; var func = new Function(\"console.log(typeof i);\"); func(); // undefined&#125;outer(); 通过构造器创建的函数是访问不到外层的局部变量的。 延长作用域链有些语句可以在作用域链的前端临时增加一个变量对象，该变量对象会在代码执行后被移除。有两种情况下会发生这种现象。 try-catch 语句中的 catch 块 with 语句 对 with 来说，将会指定对象添加到作用域链中。对 catch 来说，会创建一个新的变量对象，其中包含的是被抛出的错误对象的声明。 代码优化从作用域链的结构可以看出，在运行期上下文的作用域链中，标识符所在的位置越深，读写速度就会越慢。因为全局变量总是存在于运行期上下文作用域链的最末端，因此在标识符解析的时候，查找全局变量是最慢的。所以，在编写代码的时候应尽量少使用全局变量，尽可能使用局部变量。一个好的经验法则是：如果一个跨作用域的对象被引用了一次以上，则先把它存储到局部变量里再使用。 VO &amp; AO变量初始化阶段 JS解释器如何找到我们定义的函数和变量？ 变量对象 (Variable Object, 缩写为VO) 是一个抽象概念中的“对象”，它用于存储执行上下文中的： 变量 函数声明 函数参数 VO按照如下顺序填充: 函数参数 (若未传入，初始化该参数值为undefined) 函数声明 (若发生命名冲突，会覆盖) 变量声明 (初始化变量值为 undefined，若发生命名冲突，会忽略。) 12345678910111213141516171819202122232425function foo(x, y, z) &#123; function x() &#123;&#125;; console.log(x);&#125;foo(100); // funtion x()function foo2(x, y, z) &#123; var x = 50; console.log(x);&#125;foo2(110); // 50function foo3() &#123; function x() &#123;&#125;; var x = 100; console.log(x);&#125;foo3(); // 100function foo4() &#123; function x() &#123;&#125;; var x; console.log(x);&#125;foo4(); // funtion x() 注：函数表达式不会影响 VO 代码执行阶段给 VO 对象内的变量赋值。 VO 变为 AO （活动对象 activation object）。 例1234567891011121314151617alert(x); // functionvar x = 10;alert(x); // 10x = 20;function x() &#123;&#125;alert(x); // 20if (true) &#123; var a = 1;&#125; else &#123; var b = true;&#125;alert(a); // 1alert(b); // undefined 参考资料 鸟哥：Javascript作用域原理 理解 JavaScript 作用域和作用域链 JavaScript 深入浅出-慕课网","categories":[{"name":"JavaScript","slug":"JavaScript","permalink":"http://www.jiangjinchao.pro/categories/JavaScript/"}],"tags":[{"name":"JavaScript","slug":"JavaScript","permalink":"http://www.jiangjinchao.pro/tags/JavaScript/"},{"name":"慕课网","slug":"慕课网","permalink":"http://www.jiangjinchao.pro/tags/慕课网/"},{"name":"ife","slug":"ife","permalink":"http://www.jiangjinchao.pro/tags/ife/"},{"name":"作用域","slug":"作用域","permalink":"http://www.jiangjinchao.pro/tags/作用域/"}]},{"title":"前端的一些资料和工具","slug":"front-end-tools","date":"2015-05-18T06:06:05.000Z","updated":"2018-04-04T06:38:30.083Z","comments":true,"path":"/2015/front-end-tools.html","link":"","permalink":"http://www.jiangjinchao.pro/2015/front-end-tools.html","excerpt":"这里记录一些我用到的或者见到的比较好用方便的前端开发相关的工具吧。 色彩与图标CSS滤镜 Filter Effects 界面： 有各种各样的滤镜效果，可以直接调节参数观察变化。 值得一提的是，这个网站还有很多其他 css 生成器。 比如：Border Image, Border Radius, Box Shadow, Filter Effects, Multi-Column, Outline Border, Overflow(x,y), RGBa, Text Rotate, Text Shadow, Textarea Resize, Transform 可以访问这里去使用这些 css 生成器：CSS Generators","text":"这里记录一些我用到的或者见到的比较好用方便的前端开发相关的工具吧。 色彩与图标CSS滤镜 Filter Effects 界面： 有各种各样的滤镜效果，可以直接调节参数观察变化。 值得一提的是，这个网站还有很多其他 css 生成器。 比如：Border Image, Border Radius, Box Shadow, Filter Effects, Multi-Column, Outline Border, Overflow(x,y), RGBa, Text Rotate, Text Shadow, Textarea Resize, Transform 可以访问这里去使用这些 css 生成器：CSS Generators 渐变CSS代码生成器 Ultimate CSS Gradient Generator 界面如下图： 目前 css 写渐变还很复杂，但是用了这个工具简直太方便了，直接生成 css 代码，还能兼容 ie。 QQ截图取色-16进制在按下 Ctrl+Shift+A 后，再按一下 Ctrl 就可以看到截图框下面的颜色代码变成16进制的代码了。 如下图： 普通截图： 按住 Ctrl： 可以看到第一幅图中的 51, 51, 51 变成了 #333333。 配色 nipponcolors 日本的一个配色网站。罗列了很多不饱和经典的颜色，当然，自己选配还是很重要的。 Adobe Color CC Adobe 出的在线配色工具，里面有些现成的配色方案还是很不错的。 paletton 提供了各种预览模式，可以在模板网站中预览，在色块中预览。 图标 easyicon 对中文的搜索支持很好。实际上它是先把中文翻译为英文再搜索的。 Font-Awesome 比上面介绍的那个好用的多，字体图标，不需要考虑像素大小，全部是矢量图。并且图标精美。如果不使用 BootStrap，单独添加图标的话，这一套图标在合适不过了。 iconfont.cn 阿里巴巴制作的图标库。 数据处理Json json editor 将json数据输入进去，会生成一个树形的结构，方便查看每个节点。 展示reveal.js reveal.js 在网页上展示 slides 幻灯片，太酷了。针对不会代码的人还有一个在线编辑器：http://slides.com 还有一个新手入门教程：Reveal.js Tutorial-Reveal.js for Beginners 本文不定期更新。","categories":[{"name":"Tools","slug":"Tools","permalink":"http://www.jiangjinchao.pro/categories/Tools/"}],"tags":[{"name":"CSS","slug":"CSS","permalink":"http://www.jiangjinchao.pro/tags/CSS/"},{"name":"tools","slug":"tools","permalink":"http://www.jiangjinchao.pro/tags/tools/"},{"name":"reveal","slug":"reveal","permalink":"http://www.jiangjinchao.pro/tags/reveal/"},{"name":"配色","slug":"配色","permalink":"http://www.jiangjinchao.pro/tags/配色/"}]},{"title":"百度Web前端技术学院(2)-JavaScript 基础","slug":"baidu-ife-2-javascript","date":"2015-04-22T11:06:05.000Z","updated":"2018-04-04T06:40:58.861Z","comments":true,"path":"/2015/baidu-ife-2-javascript.html","link":"","permalink":"http://www.jiangjinchao.pro/2015/baidu-ife-2-javascript.html","excerpt":"百度前端学院的第二次任务笔记，JavaScript 基础。主要有JavaScript的定义，数据类型，对象，数组，字符串，正则表达式，DOM，事件，BOM，Ajax 等知识。 任务掌握JavaScript基础知识，能够使用JavaScript编写一些复杂度不大的交互功能。 任务： JavaScript基础 做完任务一的时候深深地感觉到自己的基础非常的薄弱，在这里再次感谢一下百度前端技术学院，做任务的时候深刻理解了自己平时掌握不牢固的内容，比如浮动、BFC、等高布局等。继续加油吧！ 像上一篇文章一样，写些东西记录一下。","text":"百度前端学院的第二次任务笔记，JavaScript 基础。主要有JavaScript的定义，数据类型，对象，数组，字符串，正则表达式，DOM，事件，BOM，Ajax 等知识。 任务掌握JavaScript基础知识，能够使用JavaScript编写一些复杂度不大的交互功能。 任务： JavaScript基础 做完任务一的时候深深地感觉到自己的基础非常的薄弱，在这里再次感谢一下百度前端技术学院，做任务的时候深刻理解了自己平时掌握不牢固的内容，比如浮动、BFC、等高布局等。继续加油吧！ 像上一篇文章一样，写些东西记录一下。 第一个页面交互按照任务中的代码，在IE8下提示：对象不支持“addEventListener”属性或方法我猜是IE8浏览器没有这个方法吧。 参考资料：JavaScript 指南-MDN 了解JavaScript是什么来自MDN的解释 JavaScript 是一种跨平台，面向对象的脚本语言。作为一种小巧且轻量级的语言，JavaScript 无意于独立运行，而是被设计为可以轻易嵌入到其它的产品和应用中，比如 Web 浏览器。在宿主环境中，JavaScript 可以被连接到环境中的对象之上，以提供对其的编程控制。 核心的 JavaScript 中包含有一组核心的对象，包括 Array，Date 和 Math，以及一组核心的语言要素，包括操作符，控制结构和语句。出于多种目的，可以通过为其增补附加的对象，对核心 JavaScript 加以扩展；例如： 客户端 JavaScript 提供了用于控制浏览器（Navigator 或者其它浏览器）以及其中的文档对象模型（DOM）的对象，从而扩展了核心 JavaScript。例如，客户端扩展允许应用程序在 HTML 的表单中加入元素，以便响应用户事件，比如鼠标点击，表单输入和页面导航。 服务器端 JavaScript 提供了服务于在服务器上运行 JavaScript 的对象，从而扩展了核心 JavaScript。例如，服务器端扩展可以允许应用程序访问关系型数据库，在应用程序的不同调用间提供信息的连续性，甚至于处理服务器之上的文件。 借由 JavaScript 的 LiveConnect 功能，您可以让 Java 和 JavaScript 间实现通讯。从 JavaScript 中，您可以创建 Java 对象并访问它们的公共方法和域。从 Java 中，也可以访问 JavaScript 的对象，属性和方法。 Netscape 发明了 JavaScript 并将 JavaScript 首先用于 Netscape 浏览器中。 如何在 HTML 页面加载 JavaScript 代码使用 &lt;script&gt; 标签在 HTML 文件中添加 JavaScript 代码。 我们可以将 JavaScript 代码放在 html 文件中任何位置，但是我们一般放在网页的 head 或者 body 部分。 放在 &lt;head&gt; 部分最常用的方式是在页面中head部分放置 &lt;script&gt; 元素，浏览器解析 head 部分就会执行这个代码，然后才解析页面的其余部分。 放在 &lt;body&gt; 部分JavaScript 代码在网页读取到该语句的时候就会执行。 注意: javascript 作为一种脚本语言可以放在 html 页面中任何位置，但是浏览器解释 html 时是按先后顺序的，所以前面的 script 就先被执行。比如进行页面显示初始化的 js 必须放在 head 里面，因为初始化都要求提前进行（如给页面 body 设置 css 等）；而如果是通过事件调用执行的 function 那么对位置没什么要求的。 为什么把 &lt;script&gt; 放在 &lt;/body&gt; 前虽然理论上放在哪里都是可以的，但是对于前端页面优化来讲，还是放在底部是最佳的，因为如果JS执行出现错误了，最起码页面中的元素还能加载出来，因为DOM文档是从上往下的顺序执行的。 如果你还不了解DOM的加载顺序，请阅读jQuery中ready与load事件的区别。 下面是重点 按照HTML5标准中的HTML语法规则，如果在 &lt;/body&gt; 后再出现 &lt;script&gt; 或任何元素的开始标签，都是parse error，浏览器会忽略之前的 &lt;/body&gt; ，即视作仍旧在body内。所以实际效果和写在 &lt;/body&gt; 之前是没有区别的。 总之，这种写法虽然也能work，但是并没有带来任何额外好处，实际上出现这样的写法很可能是误解了“将script放在页面最末端”的教条。所以还是不要这样写为好。 script在body闭合标签之后还是之前-知乎 body 和 html 标签均没有关闭 JavaScript 的性能优化：加载和执行 扩展阅读：JavaScript 的性能优化：加载和执行 脚本位置 由于脚本会阻塞页面其他资源的下载，因此推荐将所有 &lt;script&gt; 标签尽可能放到 &lt;body&gt; 标签的底部，以尽量减少对整个页面下载的影响。 组织脚本 由于每个 &lt;script&gt; 标签初始下载时都会阻塞页面渲染，所以减少页面包含的 &lt;script&gt; 标签数量有助于改善这一情况。这不仅针对外链脚本，内嵌脚本的数量同样也要限制。浏览器在解析 HTML 页面的过程中每遇到一个 &lt;script&gt; 标签，都会因执行脚本而导致一定的延时，因此最小化延迟时间将会明显改善页面的总体性能。 无阻塞的脚本 减少 JavaScript 文件大小并限制 HTTP 请求数在功能丰富的 Web 应用或大型网站上并不总是可行。Web 应用的功能越丰富，所需要的 JavaScript 代码就越多，尽管下载单个较大的 JavaScript 文件只产生一次 HTTP 请求，却会锁死浏览器的一大段时间。为避免这种情况，需要通过一些特定的技术向页面中逐步加载 JavaScript 文件，这样做在某种程度上来说不会阻塞浏览器。 无阻塞脚本的秘诀在于，在页面加载完成后才加载 JavaScript 代码。这就意味着在 window 对象的 onload事件触发后再下载脚本。有多种方式可以实现这一效果。 延迟加载脚本 HTML 4 为 &lt;script&gt; 标签定义了一个扩展属性：defer。Defer 属性指明本元素所含的脚本不会修改 DOM，因此代码能安全地延迟执行。 带有 defer 属性的 &lt;script&gt; 标签可以放置在文档的任何位置。对应的 JavaScript 文件将在页面解析到 &lt;script&gt; 标签时开始下载，但不会执行，直到 DOM 加载完成，即onload事件触发前才会被执行。当一个带有 defer 属性的 JavaScript 文件下载时，它不会阻塞浏览器的其他进程，因此这类文件可以与其他资源文件一起并行下载。 对于如下代码： 123456789101112131415161718&lt;html&gt;&lt;head&gt; &lt;title&gt;Script Defer Example&lt;/title&gt;&lt;/head&gt;&lt;body&gt; &lt;script type=\"text/javascript\" defer&gt; alert(\"defer\"); &lt;/script&gt; &lt;script type=\"text/javascript\"&gt; alert(\"script\"); &lt;/script&gt; &lt;script type=\"text/javascript\"&gt; window.onload = function()&#123; alert(\"load\"); &#125;; &lt;/script&gt;&lt;/body&gt;&lt;/html&gt; 在支持 defer 属性的浏览器上，弹出的顺序则是：”script”、”defer”、”load”。请注意，带有 defer 属性的 &lt;script&gt; 元素不是跟在第二个后面执行，而是在 onload 事件被触发前被调用。 引用的资料可能写的比较早，在 CanIUse 上查了一下 defer 发现大部分浏览器都是支持的。如下图： HTML 5 为 &lt;script&gt; 标签定义了一个新的扩展属性：async。它的作用和 defer 一样，能够异步地加载和执行脚本，不因为加载脚本而阻塞页面的加载。但是有一点需要注意，在有 async 的情况下，JavaScript 脚本一旦下载好了就会执行，所以很有可能不是按照原本的顺序来执行的。如果 JavaScript 脚本前后有依赖性，使用 async 就很有可能出现错误。 IE8,9不支持 async 动态脚本元素 使用 XMLHttpRequest(XHR)对象 原文中的总结 减少 JavaScript 对性能的影响有以下几种方法： 将所有的 &lt;script&gt; 标签放到页面底部，也就是 &lt;/body&gt; 闭合标签之前，这能确保在脚本执行前页面已经完成了渲染。 尽可能地合并脚本。页面中的 &lt;script&gt; 标签越少，加载也就越快，响应也越迅速。无论是外链脚本还是内嵌脚本都是如此。 采用无阻塞下载 JavaScript 脚本的方法： 使用 &lt;script&gt; 标签的 defer 属性（仅适用于 IE 和 Firefox 3.5 以上版本）； 使用动态创建的 &lt;script&gt; 元素来下载并执行代码； 使用 XHR 对象下载 JavaScript 代码并注入页面中。 通过以上策略，可以在很大程度上提高那些需要使用大量 JavaScript 的 Web 网站和应用的实际性能。 JavaScript数据类型及语言基础数据类型概要最新的 ECMAScript 标准定义了 7 种数据类型: 6 种 原始类型: Boolean Null Undefined Number String Symbol (new in ECMAScript 6) 和 Object 一些要点 一个没有被赋值的变量会有个默认值 undefined null 与 undefined 的不同点： 1234typeof null // object (bug in ECMAScript, should be null)typeof undefined // undefinednull === undefined // falsenull == undefined // true 1typeof null 返回 object Number 数字类型，它并没有为整数给出一种特定的类型。除了能够表示浮点数外，还有一些带符号的值：+Infinity，-Infinity 和 NaN (非数值，Not-a-Number)。 NaN与任何值都不相等，包括自身。应当使用 x != x 来判断，当且仅当 x 为 NaN 的时候，表达式的结果才为 true。相似的函数有 isNaN(), isFinite()。 数组直接量的语法允许有可选的结尾逗号，故 [,,] 只有两个元素而非三个。 实践判断各种数据类型的方法123456789// 判断arr是否为一个数组，返回一个bool值function isArray(arr) &#123; return typeof arr === \"object\" &amp;&amp; Object.prototype.toString.call(arr) === \"[object Array]\";&#125;// 判断fn是否为一个函数，返回一个bool值function isFunction(fn) &#123; return typeof fn === \"function\";&#125; 数组类型在 ECMAScript5 中，可以直接使用 Array.isArray() 来判断数组。 12Array.isArray([]); //trueArray.isArray(&#123;&#125;); //false 我看《JavaScript权威指南上》没有推荐使用 instanceof，因为可能会有多窗体(frame)存在。 这样每一个窗口都有一个自己的 JavaScript 环境，有自己的全局对象。并且每个全局对象都有自己的一组构造函数。因此一个窗体中的对象不可能是另外窗体中的构造函数的实例。 所以采用了上述我写的那样的代码 值类型和引用类型的区别 值类型 声明一个值类型变量，编译器会在栈上分配一个空间，这个空间对应着该值类型变量，空间里存储的就是该变量的值。存储在栈（stack）中的简单数据段，也就是说，它们的值直接存储在变量访问的位置。 引用类型 引用类型的实例分配在堆上，新建一个引用类型实例，得到的变量值对应的是该实例的内存分配地址，这就像您的银行账号一样。存储在堆（heap）中的对象，也就是说，存储在变量处的值是一个指针（point），指向存储对象的内存处。 为变量赋值时，ECMAScript 的解释程序必须判断该值是原始类型，还是引用类型。要实现这一点，解释程序则需尝试判断该值是否为 ECMAScript 的原始类型之一，即 Undefined、Null、Boolean、Number 和 String 型。由于这些原始类型占据的空间是固定的，所以可将他们存储在较小的内存区域 - 栈中。这样存储便于迅速查寻变量的值。 在许多语言中，字符串都被看作引用类型，而非原始类型，因为字符串的长度是可变的。ECMAScript 打破了这一传统。 如果一个值是引用类型的，那么它的存储空间将从堆中分配。由于引用值的大小会改变，所以不能把它放在栈中，否则会降低变量查寻的速度。相反，放在变量的栈空间中的值是该对象存储在堆中的地址。地址的大小是固定的，所以把它存储在栈中对变量性能无任何负面影响。如下图所示： JavaScript中原始值包括：undefined，null，布尔值，数字和字符串。引用类型主要指对象（包括数组和函数）。 原始值是不可更改的。对象的值是可修改的。 原始值的比较是值的比较。对象的比较并非值的比较。对象的值都是引用，对象的比较均是引用的比较，当且仅当他们都引用同一个基对象时，他们才相等。 参考： ECMAScript 原始值和引用值 对象的读取、遍历方式参考：JavaScript 指南-使用对象 对象 在javascript中，一个对象可以是一个单独的拥有属性和类型的实体。我们拿它和一个杯子做下类比。一个杯子是一个对象(物体)，拥有属性。杯子有颜色，图案，重量，由什么材质构成等等。同样，javascript对象也有属性来定义它的特征。 属性 一个 javascript 对象有很多属性。一个对象的属性可以被解释成一个附加到对象上的变量。对象的属性和普通的 javascript 变量基本没什么区别，仅仅是属性属于某个对象。属性定义了对象的特征(译注：动态语言面向对象的鸭子类型)。你可以通过点符号来访问一个对象的属性。JavaScript 对象的属性也可以通过方括号访问。 枚举 你可以在 for...in 语句中使用方括号标记以枚举一个对象的所有属性。为了展示它如何工作，下面的函数当你将对象及其名称作为参数传入时，显示对象的属性： 12345678910111213141516171819function showProps(obj, objName) &#123; var result = \"\"; for (var i in obj) &#123; if (obj.hasOwnProperty(i)) &#123; result += objName + \".\" + i + \" = \" + obj[i] + \"\\n\"; &#125; &#125; return result;&#125;var srcObj = &#123; a: 1, b: &#123; b1: [\"hello\", \"hi\"], b2: \"JavaScript\" &#125;&#125;;console.log(showProps(srcObj,'srcObj')); console: 12srcObj.a = 2srcObj.b = [object Object] 这里使用 hasOwnProperty() 是为了确保是自己的属性而非继承的属性。 可以如下写，跳过这个对象的方法： 12345678910111213function showPropsWithoutFun(obj, objName) &#123; var result = \"\"; for (var i in obj) &#123; if (!obj.hasOwnProperty(i)) &#123; //跳过继承属性 continue; &#125; if (typeof obj[i] === \"function\") &#123; //跳过这个对象的方法 continue; &#125; result += objName + \".\" + i + \"=\" + obj[i] + \"\\n\"; &#125; return result;&#125; 相关的方法还有：Object.keys(), Object.getOwnPropertyNames() Object.keys() 方法会返回一个由给定对象的所有可枚举自身属性的属性名组成的数组，数组中属性名的排列顺序和使用for-in循环遍历该对象时返回的顺序一致（两者的主要区别是 for-in 还会遍历出一个对象从其原型链上继承到的可枚举属性）。 Object.getOwnPropertyNames() 方法返回一个由指定对象的所有自身属性的属性名（包括不可枚举属性）组成的数组。 创建对象 创建对象的方式有三种：对象直接量，关键字 new，使用 Object.create() 方法。 Object.create() 方法创建一个拥有指定原型和若干个指定属性的对象。 继承 所有的 JavaScript 对象继承于至少一个对象。被继承的对象被称作原型，并且继承的属性可能通过构造函数的 prototype 对象找到。 定义方法 一个方法 是关联到某个对象的函数，或者简单地说，一个方法是一个值为某个函数的对象属性。定义方法就象定义普通的函数，除了它们必须被赋给对象的某个属性。例如： 1234567objectName.methodname = function_name;var myObj = &#123; myMethod: function(params) &#123; // ...do something &#125;&#125;; 深度克隆了解值类型和引用类型的区别，了解各种对象的读取、遍历方式，并在util.js中实现以下方法： 12345678910111213141516171819202122232425// 使用递归来实现一个深度克隆，可以复制一个目标对象，返回一个完整拷贝// 被复制的对象类型会被限制为数字、字符串、布尔、日期、数组、Object对象。不会包含函数、正则对象等function cloneObject(src) &#123; // your implement&#125;// 测试用例：var srcObj = &#123; a: 1, b: &#123; b1: [\"hello\", \"hi\"], b2: \"JavaScript\" &#125;&#125;;var abObj = srcObj;var tarObj = cloneObject(srcObj);srcObj.a = 2;srcObj.b.b1[0] = \"Hello\";console.log(abObj.a);console.log(abObj.b.b1[0]);console.log(tarObj.a); // 1console.log(tarObj.b.b1[0]); // \"hello\" 参考： 白话简单克隆和深度克隆 介绍什么是深度克隆，用羊圈和羊的图，简单深刻。如下图： javascript克隆对象深度介绍 这个代码写的太妙了，可惜找不到源地址了，都是转载来转载去的，要是你知道源地址，请留言告诉我。 浅度克隆：基本类型为值传递，对象仍为引用传递。 深度克隆：所有元素或属性均完全克隆，并于原引用类型完全独立，即，在后面修改对象的属性的时候，原对象不会被修改。 思路：深度克隆复制目标对象，那么就需要枚举这个对象。 判断当前属性是否是引用类型，如果是数组或者对象，创建相应类型变量。 枚举对象内所有属性。 使用 hasOwnProperty() 方法，排除继承的属性。 给新的对象相应位置赋值，若当前属性为引用类型（数组或对象）递归本方法。直到内部的值类型。 返回新的对象。 我的代码实现： 12345678910111213141516171819function cloneObject(src) &#123; // your implement var o; //result if (Object.prototype.toString.call(src) === \"[object Array]\") &#123; o = []; //判断是否是数组，并赋初始值 &#125; else &#123; o = &#123;&#125;; &#125; for (var i in src) &#123; //遍历这个对象 if (src.hasOwnProperty(i)) &#123; //排出继承属性 if (typeof src[i] === \"object\") &#123; o[i] = cloneObject(src[i]); //递归赋值 &#125; else &#123; o[i] = src[i]; //直接赋值 &#125; &#125; &#125; return o;&#125; 对数组进行去重参考： MDN Array JavaScript Array 对象 w3school 要求： 123456789// 对数组进行去重操作，只考虑数组中元素为数字或字符串，返回一个去重后的数组function uniqArray(arr) &#123; // your implement&#125;// 使用示例var a = [1, 3, 5, 7, 5, 3];var b = uniqArray(a);console.log(b); // [1, 3, 5, 7] 思路： 新建一个空数组 遍历原数组 若新数组中不存在当前元素，将其 push 入新数组中 返回新数组 实现： 12345678910// 对数组进行去重操作，只考虑数组中元素为数字或字符串，返回一个去重后的数组function uniqArray(arr) &#123; var newArr = []; //创建空数组 for (var i in arr) &#123; //遍历旧数组 if (newArr.indexOf(arr[i]) == -1) &#123;//如果新数组中不存在当前元素 newArr.push(arr[i]);//新数组中加入当前元素 &#125; &#125; return newArr;&#125; 相关方法与知识点： Array 对象 Array 对象属性 属性 | 描述constructor | 返回对创建此对象的数组函数的引用。length | 设置或返回数组中元素的数目。prototype | 使您有能力向对象添加属性和方法。 Mutator 方法，这些方法可以改变数组自身 方法 | 描述pop | 移除数组的最后一个元素，返回值是被删除的元素。push | 在数组的末尾添加一个或者多个元素，返回值是新的数组的长度。reverse | 颠倒数组中元素的顺序，原先第一个元素现在变成最后一个，同样原先的最后一个元素变成了现在的第一个，也就是数组的索引发生了变化。shift | 删除数组的第一个元素，返回值是删除的元素。sort | 对数组中的元素进行排序。splice | 添加或删除数组中的一个或多个元素。unshift | 添加一个或者多个元素在数组的开头，返回值是新的数组的长度。 Accessor 方法，这些过程不改变数组自身 These methods do not modify the array and return some representation of the array. 方法|描述concat | 返回一个包含此数组和其他数组和/或值的结合的新数组indexOf | 返回第一个与给定参数相等的数组元素的索引，没有找到则返回-1。join | 将所有的数组元素连接成一个字符串。lastIndexOf | 返回在数组中搜索到的与给定参数相等的元素的最后（最大）索引。slice | 返回数组中的一段。toSource | Returns an array literal representing the specified array; you can use this value to create a new array. Overrides the Object.toSource method.toString | 返回代表该数组及其元素的字符,重写Object.toString 过程.valueOf | Returns the primitive value of the array. Overrides the Object.valueOf method. 循环（迭代）过程 方法 | 描述filter | 对数组中的每一个元素调用参数中指定的过滤函数，并将对于过滤函数返回值为true的那些数组元素集合为新的数组返回。forEach | 对数组的每一个元素依次调用参数中指定的函数。every | 如果数组中每一个元素都满足参数中提供的测试函数，则返回真。map | Creates a new array with the results of calling a provided function on every element in this array.some | 如果数组中至少有一个元素满足参数函数的测试，则返回true。 实现 trim()参考： String MDN JavaScript String 对象 W3school 要求： 12345678910111213141516171819// 中级班同学跳过此题// 实现一个简单的trim函数，用于去除一个字符串，头部和尾部的空白字符// 假定空白字符只有半角空格、Tab// 练习通过循环，以及字符串的一些基本方法，分别扫描字符串str头部和尾部是否有连续的空白字符，并且删掉他们，最后返回一个完成去除的字符串function simpleTrim(str) &#123; // your implement&#125;// 很多同学肯定对于上面的代码看不下去，接下来，我们真正实现一个trim// 对字符串头尾进行空格字符的去除、包括全角半角空格、Tab等，返回一个字符串// 尝试使用一行简洁的正则表达式完成该题目function trim(str) &#123; // your implement&#125;// 使用示例var str = ' hi! ';str = trim(str);console.log(str); // 'hi!' 思路： 对于 simpleTrim() 做两次循环，从前面开始和从后面开始。遇到空格和Tab跳出，最后用 slice() 取出子字符串。 对于 trim() 使用正则表达式。 实现： 12345678910111213141516171819function simpleTrim(str) &#123; var i; var j; for (i = 0; i &lt; str.length; i++) &#123; //从头遍历字符串 if (str.charAt(i) != \" \" &amp;&amp; str.charAt(i) != \"\\t\") &#123; //当不为空的时候 break; //跳出循环 &#125; &#125; for (j = str.length - 1; j &gt;= 0; j--) &#123; if (str.charAt(j) != \" \" &amp;&amp; str.charAt(j) != \"\\t\") &#123; //当不为空的时候 break; //跳出循环 &#125; &#125; return str.slice(i, j + 1); //返回子字符串&#125;function trim(str) &#123; return str.replace(/^\\s+|\\s+$/g, '');&#125; 关于正则表达式： 正则表达式上面的思路是匹配开头和结尾的空白字符，并全局匹配。 ^：匹配字符串的开头，在多行检索中，匹配一行的开头。 $：匹配字符串的结尾，在多行检索中，匹配一行的结尾。 |：选择，匹配的是该符号左边的子表达式或右边的子表达式。 \\s：任何 Unicode 空白符。 g：执行一个全局匹配，简言之，即找到所有匹配，而不是找到第一个之后就停止。 以上来自 JavaScript权威指南（犀牛书），感觉这里面将的正则表达式还不错。 相关方法和知识点： String对象 String 对象属性 属性 | 描述constructor | 对创建该对象的函数的引用length | 字符串的长度prototype | 允许您向对象添加属性和方法 String 对象方法 方法 | 描述charAt() | 返回在指定位置的字符。charCodeAt() | 返回在指定的位置的字符的 Unicode 编码。concat() | 连接字符串。indexOf() | 检索字符串。lastIndexOf() | 从后向前搜索字符串。localeCompare() | 用本地特定的顺序来比较两个字符串。match()| 找到一个或多个正则表达式的匹配。replace() | 替换与正则表达式匹配的子串。search() | 检索与正则表达式相匹配的值。slice()| 提取字符串的片断，并在新的字符串中返回被提取的部分。split()| 把字符串分割为字符串数组。substr() | 从起始索引号提取字符串中指定数目的字符。substring() |提取字符串中两个指定的索引号之间的字符。toLowerCase() | 把字符串转换为小写。toUpperCase() | 把字符串转换为大写。toString() | 返回字符串。valueOf() | 返回某个字符串对象的原始值。 静态方法 String.fromCharCode() 使用作为参数传入的字符编码创建一个新的字符串。 HTML方法 由于不是标准方法，这里就不列举了。 遍历数组，使每一个元素执行 fn 函数要求： 1234567891011121314151617181920// 实现一个遍历数组的方法，针对数组中每一个元素执行fn函数，并将数组索引和元素作为参数传递function each(arr, fn) &#123; // your implement&#125;// 其中fn函数可以接受两个参数：item和index// 使用示例var arr = ['java', 'c', 'php', 'html'];function output(item) &#123; console.log(item)&#125;each(arr, output); // java, c, php, html// 使用示例var arr = ['java', 'c', 'php', 'html'];function output(item, index) &#123; console.log(index + ': ' + item)&#125;each(arr, output); // 0:java, 1:c, 2:php, 3:html 分析： 这个任务有点像 ECMAScript5 中新增的数组方法：forEach()。还有一点这里的参数 index 是可选形参，保证第一个参数 item 能正常传入就行了，代码非常简单，如下： 实现： 12345function each(arr, fn) &#123; for(var i in arr)&#123; fn(arr[i],i); &#125;&#125; 获取对象中第一层元素个数要求： 12345678910111213// 获取一个对象里面第一层元素的数量，返回一个整数function getObjectLength(obj) &#123;&#125;// 使用示例var obj = &#123; a: 1, b: 2, c: &#123; c1: 3, c2: 4 &#125;&#125;;console.log(getObjectLength(obj)); // 3 实现： 123function getObjectLength(obj) &#123; return Object.keys(obj).length;&#125; 这个自己写的比较简单，不知道可以这样写不。其中 Object.keys(o) 为 Object 的一个静态方法，参数是一个对象，返回一个包含o的所有可枚举自有（非继承）属性名字的数组。 正则表达式要求： 123456789// 判断是否为邮箱地址function isEmail(emailStr) &#123; // your implement&#125;// 判断是否为手机号function isMobilePhone(phone) &#123; // your implement&#125; 分析： 邮箱由（数字字母，点），数字字母组合，@符号，数字字母，（点，数字字母）。其中两个小括号都是任意个数的。并且开头和结尾都是字母。 手机号是11位组成的，有时候会在前面加国际区号的前缀，如中国：+86。查阅相关资料后发现区号最多4位。国际电话区号_百度百科 并且手机号最多就是11位，其他国家有用8位的，也有用7位，10位的都有。最短是7位，最长是11位。 实现： 1234567891011// 判断是否为邮箱地址function isEmail(emailStr) &#123; var pattern = /^(\\w+\\.)*\\w+@\\w+(\\.\\w+)+$/; return pattern.test(emailStr);&#125;// 判断是否为手机号function isMobilePhone(phone) &#123; var pattern = /^(\\+\\d&#123;1,4&#125;)?\\d&#123;7,11&#125;$/; return pattern.test(phone);&#125; 相关方法和知识点： 参考：RegExp MDN 正则表达式修饰符： 字符 | 含义g | 全局匹配i | 忽略大小写m | 让开始和结束字符（^ 和 $）工作在多行模式（也就是，^ 和 $ 可以匹配字符串中每一行的开始和结束（行是由 \\n 或 \\r 分割的），而不只是整个输入字符串的最开始和最末尾处。 字符类别 字符 | 含义[…]|方括号内的任意字符[^…]|不在方括号内的任意字符. | （点号，小数点）匹配任意单个字符，但是换行符除外，包括：\\n \\r \\u2028 或 \\u2029。需要注意的是，m 多行（multiline）标志不会改变点号的表现。因此为了匹配多行中的字符集，可使用[^] （当然你不是打算用在旧版本 IE 中），它将会匹配任意字符，包括换行符例如，/.y/ 匹配 “yes make my day” 中的 “my” 和 “ay”，但是不匹配 “yes”。\\d | 匹配基本拉丁字母表（basic Latin alphabet）中的一个数字字符。等价于[0-9]。例如，/\\d/ 或 /[0-9]/ 匹配 “B2 is the suite number.” 中的 ‘2’。\\D | 匹配任意一个不是基本拉丁字母表中数字的字符。等价于[^0-9]。例如，/\\D/ 或 /[^0-9]/ 匹配 “B2 is the suite number.” 中的 ‘B’。\\w | 匹配任意来自基本拉丁字母表中的字母数字字符，还包括下划线。等价于 [A-Za-z0-9_]。例如，/\\w/ 匹配 “apple” 中的 ‘a’，”$5.28” 中的 ‘5’ 和 “3D” 中的 ‘3’。\\W | 匹配任意不是基本拉丁字母表中单词（字母数字下划线）字符的字符。等价于 [^A-Za-z0-9_]。例如，/\\W/ 或 /[^A-Za-z0-9_]/ 匹配 “50%” 中的 ‘%’。\\s | 匹配一个空白符，包括空格、制表符、换页符、换行符和其他 Unicode 空格。等价于 [ \\f\\n\\r\\t\\v​\\u00a0\\u1680​\\u180e\\u2000​\\u2001\\u2002​\\u2003\\u2004​ \\u2005\\u2006​\\u2007\\u2008​\\u2009\\u200a​\\u2028\\u2029​​\\u202f\\u205f​ \\u3000]。例如 /\\s\\w/ 匹配 “foo bar” 中的 ‘ bar’。\\S | 匹配一个非空白符。等价于 [^ \\f\\n\\r\\t\\v​\\u00a0\\u1680​\\u180e\\u2000​\\u2001\\u2002​\\u2003\\u2004​ \\u2005\\u2006​\\u2007\\u2008​\\u2009\\u200a​\\u2028\\u2029​\\u202f\\u205f​\\u3000]。例如，/\\S\\w/ 匹配 “foo bar” 中的 ‘foo’。[\\b] | 匹配一个退格符（backspace）（不要与 \\b 混淆） 直接量字符 字符| 匹配数字和字母字符|自身\\t | 匹配一个水平制表符（tab）\\r | 匹配一个回车符（carriage return）\\n | 匹配一个换行符（linefeed）\\v | 匹配一个垂直制表符（vertical tab）\\f | 匹配一个换页符（form-feed）\\0 | 匹配一个 NUL 字符。不要在此后面跟小数点。\\cX |X 是 A - Z 的一个字母。匹配字符串中的一个控制字符。例如，/\\cM/ 匹配字符串中的 control-M。\\xhh | 匹配编码为 hh （两个十六进制数字）的字符。\\uhhhh | 匹配 Unicode 值为 hhhh （四个十六进制数字）的字符。 边界 字符| 含义^ |匹配输入/字符串的开始。如果多行（multiline）标志被设为 true，该字符也会匹配一个断行（line break）符后的开始处。例如，/^A/ 不匹配 “an A” 中的 “A”，但匹配 “An A” 中的 “A”。$ |匹配输入/字符串的结尾。如果多行（multiline）标志被设为 true，该字符也会匹配一个断行（line break）符的前的结尾处。例如，/t$/ 不匹配 “eater” 中的 “t”，但匹配 “eat” 中的 “t”。\\b |匹配一个零宽单词边界（zero-width word boundary），如一个字母与一个空格之间。 （不要和 [\\b] 混淆）例如，/\\bno/ 匹配 “at noon” 中的 “no”，/ly\\b/ 匹配 “possibly yesterday.” 中的 “ly”。\\B |匹配一个零宽非单词边界（zero-width non-word boundary），如两个字母之间或两个空格之间。例如，/\\Bon/ 匹配 “at noon” 中的 “on”，/ye\\B/ 匹配 “possibly yesterday.” 中的 “ye”。 DOM参考： HTML DOM 教程 W3C JavaScript HTML DOM W3C 参考手册-HTML DOM Document 对象 参考手册-HTML DOM Element 对象 基本任务任务： 先来一些简单的，在你的util.js中完成以下任务： 12345678910111213141516171819// 为element增加一个样式名为newClassName的新样式function addClass(element, newClassName) &#123; // your implement&#125;// 移除element中的样式oldClassNamefunction removeClass(element, oldClassName) &#123; // your implement&#125;// 判断siblingNode和element是否为同一个父元素下的同一级的元素，返回bool值function isSiblingNode(element, siblingNode) &#123; // your implement&#125;// 获取element相对于浏览器窗口的位置，返回一个对象&#123;x, y&#125;function getPosition(element) &#123; // your implement&#125; 思路： addClass() 对于element本身如果没有样式类，那么使用Element的className属性获取的是空字符串，则直接添加新的样式类字符串即可。对于已经有了样式类的元素，获取到原有的样式类后，在后面添加一个空格，再添加新的样式类即可。 removeClass() 获取原始的样式，然后用正则表达式去匹配这个要删掉的样式，由于是动态的正则表达式，所以要用正则的构造函数 RegExp() 来创建，并且使用 \\b 来确定单词边界。匹配好后用空字符串替换被匹配的样式类即可。 isSiblingNode() 直接判断两个父节点是不是相同 getPosition() 下面这些内容是我之前的思路，现在觉得太复杂，可以用另一种解决方法。 offsetTop, offsetLeft 都是相对于最近一个有定位的父元素，如果都没有那么就是相对于 body 的偏移位置。 offsetParent 是寻找最近一个有定位的父级元素，如果没有，那么找到 body 元素。 所以这道题需要先寻找有定位的父级元素，如果都没有，那么就是相对于 body 的偏移了，可以直接使用 offsetTop, offsetLeft。 如果有定位的父级元素不是 body，是 A 元素，那么再寻找 A 元素的最近的有定位的父级元素，如果没有，就是相对于 body 的定位，这时，所求偏移量就是 A 的偏移量加所求元素相对于 A 的偏移量。如果 A 还有已经定位的父级元素，就继续去推，直到找到 body 为止。 这里可能要用到一个递归算法。 另一种方法： 使用 getBoundingClientRect() 方法获取当前元素相对于可视区域的位置，再加上滚动条的位置。 关于滚动条的位置 scrollTop, scrollLeft 这两个属性的使用，各个浏览器还都不一样。 详情见 document.body.scrollTop or document.documentElement.scrollTop。 简单的说就是：FF、Opera 和 IE 浏览器认为在客户端浏览器展示的页面的内容对应于整个 HTML，所以使用 document.documentElement来代表，相应的滚动距离则通过 document.documentElement.scrollLeft 和 document.documentElement.scrollTop 来获取，而 Safari 和 Chrome 浏览器则认为页面开始于 body 部分，从而相应的滚动距离用 document.body.scrollLeft 和 document.body.scrollTop 来获取。另外需要注意的是，FF 和 IE 的 quirks mode（兼容模式）下是用 document.body 来获取的。 documentElement 对应的是 html 标签，而 body 对应的是 body 标签 针对跨浏览器的解决方案则可简单的用如下代码获取： 12var scrollLeft = Math.max(document.documentElement.scrollLeft, document.body.scrollLeft);var scrollTop = Math.max(document.documentElement.scrollTop, document.body.scrollTop); 实现： 1234567891011121314151617181920212223// 为element增加一个样式名为newClassName的新样式function addClass(element, newClassName) &#123; var oldClassName = element.className; //获取旧的样式类 element.className = oldClassName === \"\" ? newClassName : oldClassName + \" \" + newClassName;&#125;// 移除element中的样式oldClassNamefunction removeClass(element, oldClassName) &#123; var originClassName = element.className; //获取原先的样式类 var pattern = new RegExp(\"\\\\b\" + oldClassName + \"\\\\b\"); //使用构造函数构造动态的正则表达式 element.className = originClassName.replace(pattern, '');&#125;function isSiblingNode(element, siblingNode) &#123; return element.parentNode === siblingNode.parentNode;&#125;function getPosition(element) &#123; var pos=&#123;&#125;; pos.x = element.getBoundingClientRect().left + Math.max(document.documentElement.scrollLeft, document.body.scrollLeft); pos.y = element.getBoundingClientRect().top + Math.max(document.documentElement.scrollTop, document.body.scrollTop); return pos;&#125; mini $任务： 接下来挑战一个mini $，它和之前的$是不兼容的，它应该是document.querySelector的功能子集，在不直接使用document.querySelector的情况下，在你的util.js中完成以下任务： 123456789101112131415161718192021// 实现一个简单的Queryfunction $(selector) &#123;&#125;// 可以通过id获取DOM对象，通过#标示，例如$(\"#adom\"); // 返回id为adom的DOM对象// 可以通过tagName获取DOM对象，例如$(\"a\"); // 返回第一个&lt;a&gt;对象// 可以通过样式名称获取DOM对象，例如$(\".classa\"); // 返回第一个样式定义包含classa的对象// 可以通过attribute匹配获取DOM对象，例如$(\"[data-log]\"); // 返回第一个包含属性data-log的对象$(\"[data-time=2015]\"); // 返回第一个包含属性data-time且值为2015的对象// 可以通过简单的组合提高查询便利性，例如$(\"#adom .classa\"); // 返回id为adom的DOM所包含的所有子节点中，第一个样式定义包含classa的对象 参考： Sizzle选择器 Sizzle引擎–原理与实践（一） Sizzle是怎样工作的 思路： 通过空格拆分参数 selector，因为可能是组合查询。拆分为数组 selectorArr 遍历 selectorArr，条件判断各种情况。 得到节点的 Element 对象后，以这个对象为父节点，继续下一层的判断。 实现： 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283848586878889909192939495969798//多个选择器有点难到我了，看了一些资料觉得思路应该如下：//1.如果存在#，直接从#开始向后查//2.如果存在tag直接找到所有的tag然后向后查//3.样式类，属性，从后向前查，得到它所有的父节点名称，去筛选匹配//以上的做法有点太复杂，我还是做一个简单的正向匹配吧。function $(selector) &#123; if (!selector) &#123; return null; &#125; if (selector == document) &#123; return document; &#125; selector = selector.trim(); if (selector.indexOf(\" \") !== -1) &#123; //若存在空格 var selectorArr = selector.split(/\\s+/); //拆成数组 var rootScope = myQuery(selectorArr[0]); //第一次的查找范围 var i = null; var j = null; var result = []; //循环选择器中的每一个元素 for (i = 1; i &lt; selectorArr.length; i++) &#123; for (j = 0; j &lt; rootScope.length; j++) &#123; result.push(myQuery(selectorArr[i], rootScope[j])); &#125; // rootScope = result; // 目前这个方法还有bug &#125; return result[0][0]; &#125; else &#123; //只有一个，直接查询 return myQuery(selector, document)[0]; &#125;&#125;/** * 针对一个内容查找结果 success * @param &#123;String&#125; selector 选择器内容 * @param &#123;Element&#125; root 根节点元素 * @return &#123;NodeList数组&#125; 节点列表，可能是多个节点也可能是一个 */function myQuery(selector, root) &#123; var signal = selector[0]; // var allChildren = null; var content = selector.substr(1); var currAttr = null; var result = []; root = root || document; //若没有给root，赋值document switch (signal) &#123; case \"#\": result.push(document.getElementById(content)); break; case \".\": allChildren = root.getElementsByTagName(\"*\"); // var pattern0 = new RegExp(\"\\\\b\" + content + \"\\\\b\"); for (i = 0; i &lt; allChildren.length; i++) &#123; currAttr = allChildren[i].getAttribute(\"class\"); if (currAttr !== null) &#123; var currAttrsArr = currAttr.split(/\\s+/); console.log(currAttr); for (j = 0; j &lt; currAttrsArr.length; j++) &#123; if (content === currAttrsArr[j]) &#123; result.push(allChildren[i]); console.log(result); &#125; &#125; &#125; &#125; break; case \"[\": //属性选择 if (content.search(\"=\") == -1) &#123; //只有属性，没有值 allChildren = root.getElementsByTagName(\"*\"); for (i = 0; i &lt; allChildren.length; i++) &#123; if (allChildren[i].getAttribute(selector.slice(1, -1)) !== null) &#123; result.push(allChildren[i]); &#125; &#125; &#125; else &#123; //既有属性，又有值 allChildren = root.getElementsByTagName(\"*\"); var pattern = /\\[(\\w+)\\s*\\=\\s*(\\w+)\\]/; //为了分离等号前后的内容 var cut = selector.match(pattern); //分离后的结果，为数组 var key = cut[1]; //键 var value = cut[2]; //值 for (i = 0; i &lt; allChildren.length; i++) &#123; if (allChildren[i].getAttribute(key) == value) &#123; result.push(allChildren[i]); &#125; &#125; &#125; break; default: //tag result = root.getElementsByTagName(selector); break; &#125; return result;&#125; 事件绑定注册事件与移除事件任务与实现： 1234567891011121314151617// 给一个element绑定一个针对event事件的响应，响应函数为listenerfunction addEvent(element, event, listener) &#123; if (element.addEventListener) &#123; element.addEventListener(event,listener); &#125; else if(element.attachEvent)&#123; element.attachEvent(\"on\"+event,listener); &#125;&#125;// 移除element对象对于event事件发生时执行listener的响应function removeEvent(element, event, listener) &#123; if (element.removeEventListenr) &#123; element.removeEventListenr(event,listener); &#125; else if(element.detachEvent)&#123; element.detachEvent(\"on\"+event,listener); &#125;&#125; 相关说明： IE8+ 支持 addEventListener()。IE8 以下的版本使用 attachEvent()。 attachEvent() 不支持事件捕获。 attachEvent() 第一个参数事件处理程序属性名使用前缀 on。 attachEvent() 允许相同的事件处理程序函数注册多次。 click 与 enter 键事件绑定任务与实现： 12345678910111213// 实现对click事件的绑定function addClickEvent(element, listener) &#123; addEvent(element, \"click\", listener);&#125;// 实现对于按Enter键时的事件绑定function addEnterEvent(element, listener) &#123; addEvent(element, \"keydown\", function(event) &#123; if (event.keyCode == 13) &#123; listener(); &#125; &#125;);&#125; 相关说明： 这里我直接使用了上一个任务写好的 addEvent() 函数。这样可以简化代码，并有良好的兼容性。 enter 键的 keyCode 为 13。 事件代理参考： javascript事件代理（委托） JS - 事件代理 任务与实现： 12345678function delegateEvent(element,tag,eventName,listener)&#123; addEvent(element, eventName, function(event)&#123; var target = event.target || event.srcElement; if(target.tagName.toLowerCase() == tag.toLowerCase()) &#123; listener.call(target, event); &#125; &#125;);&#125; BOM任务与实现： 123456789101112131415161718192021222324252627282930313233343536373839404142// 判断是否为IE浏览器，返回-1或者版本号function isIE() &#123; var s = navigator.userAgent.toLowerCase(); console.log(s); //ie10的信息： //mozilla/5.0 (compatible; msie 10.0; windows nt 6.2; trident/6.0) //ie11的信息： //mozilla/5.0 (windows nt 6.1; trident/7.0; slcc2; .net clr 2.0.50727; .net clr 3.5.30729; .net clr 3.0.30729; media center pc 6.0; .net4.0c; .net4.0e; infopath.2; rv:11.0) like gecko var ie = s.match(/rv:([\\d.]+)/) || s.match(/msie ([\\d.]+)/); if(ie) &#123; return ie[1]; &#125; else &#123; return -1; &#125;&#125;// 设置cookiefunction setCookie(cookieName, cookieValue, expiredays) &#123; var cookie = cookieName + \"=\" + encodeURIComponent(cookieValue); if (typeof expiredays === \"number\") &#123; cookie += \";max-age=\" + (expiredays * 60 * 60 * 24); &#125; document.cookie = cookie;&#125;// 获取cookie值function getCookie(cookieName) &#123; var cookie = &#123;&#125;; var all = document.cookie; if (all===\"\") &#123; return cookie; &#125; var list = all.split(\"; \"); for (var i = 0; i &lt; list.length; i++) &#123; var p = list[i].indexOf(\"=\"); var name = list[i].substr(0, p); var value = list[i].substr(p + 1); value = decodeURIComponent(value); cookie[name] = value; &#125; return cookie;&#125; 参考自：JavaScript权威指南 sessionStorage、localStorage 和 cookie 之间的区别 共同点 都是保存在浏览器端，且同源的。都是键值对存储。 区别 特性 | Cookie | localStorage | sessionStorage 数据的声明周期 | 一般由服务器生成，可设置失效时间。如果在浏览器端生成Cookie，默认是关闭浏览器后失效 | 除非被清除，否则永久保存 | 仅在当前会话下有效，关闭页面或浏览器后被清除 存放数据大小 | 4K左右 | 一般为5MB | 同左 与服务器端通信 | 每次都会携带在HTTP头中，如果使用cookie保存过多数据会带来性能问题 | 仅在客户端（即浏览器）中保存，不参与和服务器的通信 | 同左 易用性 | 需要程序员自己封装，源生的Cookie接口不友好 | 源生接口可以接受，亦可再次封装来对Object和Array有更好的支持 | 同左 应用场景 每个 HTTP 请求都会带着 Cookie 信息，所以 Cookie 应当简单，比如判断用户是否登陆。 localStorage 接替 Cookie 管理购物车，同时也可以存储 HTML5 游戏的一些本地数据。 sessionStorage 在表单内容较多的时候，为了优化用户体验，按步骤分页引导填写，这时使用sessionStorage 就发挥了作用。 安全性 cookie 中最好不要放置任何明文的东西。两个 storage的数据提交后在服务端一定要校验 参考： 详说 Cookie, LocalStorage 与 SessionStorage Ajax任务： 123456789101112131415161718// 学习Ajax，并尝试自己封装一个Ajax方法。实现如下方法：function ajax(url, options) &#123; // your implement&#125;// 使用示例：ajax( 'http://localhost:8080/server/ajaxtest', &#123; data: &#123; name: 'simon', password: '123456' &#125;, onsuccess: function (responseText, xhr) &#123; console.log(responseText); &#125; &#125;); 实现： 12345678910111213141516171819202122232425262728293031323334353637383940414243function ajax(url, options) &#123; var dataResult; //结果data // 处理data if (typeof(options.data) === 'object') &#123; var str = ''; for (var c in options.data) &#123; str = str + c + '=' + options.data[c] + '&amp;'; &#125; dataResult = str.substring(0, str.length - 1); &#125; // 处理type options.type = options.type || 'GET'; //获取XMLHttpRequest对象 var xhr = window.XMLHttpRequest ? new XMLHttpRequest() : new ActiveXObject('Microsoft.XMLHTTP'); // 发送请求 xhr.open(options.type, url, true); if (options.type == 'GET') &#123; xhr.send(null); &#125; else &#123; xhr.setRequestHeader('Content-type', 'application/x-www-form-urlencoded'); xhr.send(dataResult); &#125; // readyState xhr.onreadystatechange = function() &#123; if (xhr.readyState === 4) &#123; if (xhr.status === 200) &#123; if (options.onsuccess) &#123; options.onsuccess(xhr.responseText, xhr.responseXML); &#125; &#125; else &#123; if (options.onfail) &#123; options.onfail(); &#125; &#125; &#125; &#125;;&#125; 说明： 首先是处理 data，因为测试用例中的 data 是对象，所以把它遍历出来，把键和值中间用 = 连接，和下一组数据用 &amp; 连接。 处理 type，默认是 GET 请求。 使用 open() 指明请求方法和 url。方法一般为 GET 或 POST。 调用 send() 方法，GET 请求没有主体，所以应该传递 null 或省略这个参数。POST 请求有主体，同时使用 setRequestHeaders() 来指定 “Content-type” 头。这样便成功发送了请求。 取的响应。一个完整的 HTTP 响应是由状态码、响应头集合、响应主体组成。 readyState 是一个整数，它指定了 HTTP 请求的状态。其值和含义如下表： 值 | 含义0 | open() 尚未调用1 | open() 已调用2 | 接收到响应头信息3 | 接收到响应主体4 | 响应完成 status 和 statusText 属性以数字和文本的形式返回 HTTP 状态码。这些属性保存标准的 HTTP 值。如，200和 “OK” 表示成功请求，404和 “Not Found” 表示 URL 不能匹配服务器上的任何资源。 getResponseHeader() 和 getAllResponseHeaders() 能查询响应头。 响应主体可以从 responseText 属性中得到文本形式的，从 responseXML 属性中得到 Document 形式的。 补充一点 onreadystatechange 事件会在 readyState 改变时被触发。 参考： Ajax W3C Comet：基于 HTTP 长连接的“服务器推”技术 练习1：处理兴趣列表任务要求在task0002目录下创建一个task0002_1.html文件，以及一个js目录和css目录，在js目录中创建task0002_1.js，并将之前写的util.js也拷贝到js目录下。然后完成以下需求。 第一阶段 在页面中，有一个单行输入框，一个按钮，输入框中用来输入用户的兴趣爱好，允许用户用半角逗号来作为不同爱好的分隔。 当点击按钮时，把用户输入的兴趣爱好，按照上面所说的分隔符分开后保存到一个数组，过滤掉空的、重复的爱好，在按钮下方创建一个段落显示处理后的爱好。 第二阶段 单行变成多行输入框，一个按钮，输入框中用来输入用户的兴趣爱好，允许用户用换行、空格（全角/半角）、逗号（全角/半角）、顿号、分号来作为不同爱好的分隔。 当点击按钮时的行为同上 第三阶段 用户输入的爱好数量不能超过10个，也不能什么都不输入。当发生异常时，在按钮上方显示一段红色的错误提示文字，并且不继续执行后面的行为；当输入正确时，提示文字消失。 同时，当点击按钮时，不再是输出到一个段落，而是每一个爱好输出成为一个checkbox，爱好内容作为checkbox的label。 思路主要就是对字符串的操作，split() 的使用，以及正则表达式的使用。 实现 代码 在线demo 练习2：倒计时任务要求在和上一任务同一目录下面创建一个task0002_2.html文件，在js目录中创建task0002_2.js，并在其中编码，实现一个倒计时功能。 界面首先有一个文本输入框，允许按照特定的格式YYYY-MM-DD输入年月日； 输入框旁有一个按钮，点击按钮后，计算当前距离输入的日期的00:00:00有多少时间差 在页面中显示，距离YYYY年MM月DD日还有XX天XX小时XX分XX秒 每一秒钟更新倒计时上显示的数 如果时差为0，则倒计时停止 思路 setInterval() 方法可按照指定的周期（以毫秒计）来调用函数或计算表达式。 setInterval() 方法会不停地调用函数，直到 clearInterval() 被调用或窗口被关闭。由 setInterval() 返回的 ID 值可用作 clearInterval() 方法的参数。 clearInterval() 方法可取消由 setInterval() 设置的 timeout。 clearInterval() 方法的参数必须是由 setInterval() 返回的 ID 值。 setTimeout() 方法用于在指定的毫秒数后调用函数或计算表达式。 setTimeout() 只执行 code 一次。如果要多次调用，请使用 setInterval() 或者让 code 自身再次调用 setTimeout()。 clearTimeout() 方法可取消由 setTimeout() 方法设置的 timeout。 实现 代码 在线demo 练习3：图片轮播任务要求在和上一任务同一目录下面创建一个task0002_3.html文件，在js目录中创建task0002_3.js，并在其中编码，实现一个轮播图的功能。 图片数量及URL均在HTML中写好 可以配置轮播的顺序（正序、逆序）、是否循环、间隔时长 图片切换的动画要流畅 在轮播图下方自动生成对应图片的小点，点击小点，轮播图自动动画切换到对应的图片 效果示例：http://echarts.baidu.com/ 上面的轮播图（不需要做左右两个箭头） 思路将图片排列成一排，一起向左运动，每次运动的距离刚好是一张图片的宽度。 对于下面的小圆点，使用事件代理，将事件传递给每个 a 标签。 参考： JS图片切换 实现 代码 在线demo 关于变速运动评论中有人问到运动部分为什么这样写，下面我讲一下吧。 123456789function startMove(target) &#123; clearInterval(timerInner); timerInner = setInterval(function() &#123; var speed = (target - imgListDiv.offsetLeft) / 6; speed = speed &gt; 0 ? Math.ceil(speed) : Math.floor(speed); imgListDiv.style.left = imgListDiv.offsetLeft + speed + \"px\"; &#125;, 30);&#125; 上面是运动部分代码。 参数 target 是运动终点的位置。 首先停止计时器，为了避免上一次调用方法时，计时器没有关闭带来的干扰。 1clearInterval(timerInner); 下面开始开启计时器，每隔 30ms 执行一次内部的函数。 变速运动 1var speed = (target - imgListDiv.offsetLeft) / 6; 逐渐变慢，最后停止，距离越远速度越大，速度由距离决定 速度=(目标值-当前值)/缩放系数 这样写的原因就是为了让它做缓冲运动，而不是匀速运动，这样给用户带来的交互感觉会更好。 速度取整 1speed = speed &gt; 0 ? Math.ceil(speed) : Math.floor(speed); 像素不能是小数，所以速度大于0的时候，向上取整。速度小于0时，向下取整 最后关于运动终止条件。 1imgListDiv.style.left = imgListDiv.offsetLeft + speed + \"px\"; 由这一行可以看出，`imgListDiv.style.left` 在不断增大，即 `imgListDiv.offsetLeft` 在不断增大。这两个是相同的属性，只不过一个是在赋值时使用，第二个是在取值时使用。 再看这行代码，由于这部分是每个30ms执行一次的，所以继续执行到这里。 1var speed = (target - imgListDiv.offsetLeft) / 6; 当不断增大的 `imgListDiv.offsetLeft` 等于 `target` 时，`speed` 为0。宏观表现为不再运动，这便是运动终止的状态，但是这里的方法还是不断在执行，每个30ms在执行。 练习4：输入框即时提示任务要求在和上一任务同一目录下面创建一个task0002_4.html文件，在js目录中创建task0002_4.js，并在其中编码，实现一个类似百度搜索框的输入提示的功能。 要求如下： 允许使用鼠标点击选中提示栏中的某个选项 允许使用键盘上下键来选中提示栏中的某个选项，回车确认选中 选中后，提示内容变更到输入框中 初级班： 不要求和后端交互，可以自己伪造一份提示数据例如： 1var suggestData = ['Simon', 'Erik', 'Kener']; 中级班： 自己搭建一个后端Server，使用Ajax来获取提示数据 思路这里我使用了给 input 标签加 input 监听，即输入框内容发生改变时，触发事件。并兼容到 IE7。 关于 input 监听的代码如下： 12345678910111213141516171819202122function addInputListener() &#123; if (inputArea.addEventListener) &#123; // all browsers except IE before version 9 inputArea.addEventListener(\"input\", OnInput); &#125; if (inputArea.attachEvent) &#123; // Internet Explorer and Opera inputArea.attachEvent(\"onpropertychange\", OnPropChanged); // Internet Explorer &#125;&#125;// Firefox, Google Chrome, Opera, Safari from version 5, Internet Explorer from version 9function OnInput(event) &#123; var inputValue = event.target.value; handleInput(inputValue);&#125;// Internet Explorerfunction OnPropChanged(event) &#123; var inputValue = \"\"; if (event.propertyName.toLowerCase() == \"value\") &#123; inputValue = event.srcElement.value; handleInput(inputValue); &#125;&#125; 其中 handleInput() 为下一步要执行的方法。 其实后来想了想也可以使用 keyup 事件了做这个任务。 匹配的过程同样适用正则表达式，从开头开始匹配。遍历备选单词，如果匹配成功，则放入 li 标签中，准备展示。 然后分别添加点击事件，键盘的 keydown 事件，用来选中提示出的单词。 参考： oninput 事件 实现 代码 在线demo 练习5：拖拽交互任务要求 实现一个可拖拽交互的界面 如示例图，左右两侧各有一个容器，里面的选项可以通过拖拽来左右移动 被选择拖拽的容器在拖拽过程后，在原容器中消失，跟随鼠标移动 注意拖拽释放后，要添加到准确的位置 拖拽到什么位置认为是可以添加到新容器的规则自己定 注意交互中良好的用户体验和使用引导 思路 页面布局时，将要被拖拽的 div 设置为绝对定位，因为这样在后面拖拽的时候才方便更改坐标。 初始化界面的时候，首先让 div 块按照相应的高度重新排列一下。 拖拽方法的实现。由 mousedown mousemove mouseup 三部分组成。 在 mousemove 中判断，不能让鼠标拖出浏览器窗口。 在 mouseup 中判断，是否到达指定区域。完成拖拽。 我在这里没有使用 html5 中的拖拽 API，所以兼容性还是很好的。 实现 代码 在线demo 最终作品 代码 在线 Demo Update2015/06/01 导师的参考答案 review 加油！向着下一个目标前进！","categories":[{"name":"JavaScript","slug":"JavaScript","permalink":"http://www.jiangjinchao.pro/categories/JavaScript/"}],"tags":[{"name":"JavaScript","slug":"JavaScript","permalink":"http://www.jiangjinchao.pro/tags/JavaScript/"},{"name":"ife","slug":"ife","permalink":"http://www.jiangjinchao.pro/tags/ife/"},{"name":"Baidu","slug":"Baidu","permalink":"http://www.jiangjinchao.pro/tags/Baidu/"},{"name":"正则","slug":"正则","permalink":"http://www.jiangjinchao.pro/tags/正则/"},{"name":"Regular","slug":"Regular","permalink":"http://www.jiangjinchao.pro/tags/Regular/"}]},{"title":"百度Web前端技术学院(1)-HTML, CSS基础","slug":"baidu-ife-1","date":"2015-04-15T11:06:05.000Z","updated":"2018-04-04T06:38:05.964Z","comments":true,"path":"/2015/baidu-ife-1.html","link":"","permalink":"http://www.jiangjinchao.pro/2015/baidu-ife-1.html","excerpt":"百度前端学院的第一次任务笔记，HTML、CSS 基础。主要有 CSS 工作原理，选择器的使用，常用属性，行高属性，盒模型与定位，最后根据设计图实现4个页面。 任务任务： HTML、CSS基础 有人问到提交作业 fork 同步的问题，真心觉得官方 GitHub 的帮助文档讲的很好，我上一篇博客 同步一个 fork 就是翻译的这个官方文档，如果懒得看英文可以参考我的博客。 写点东西记录一下我的做题过程吧。","text":"百度前端学院的第一次任务笔记，HTML、CSS 基础。主要有 CSS 工作原理，选择器的使用，常用属性，行高属性，盒模型与定位，最后根据设计图实现4个页面。 任务任务： HTML、CSS基础 有人问到提交作业 fork 同步的问题，真心觉得官方 GitHub 的帮助文档讲的很好，我上一篇博客 同步一个 fork 就是翻译的这个官方文档，如果懒得看英文可以参考我的博客。 写点东西记录一下我的做题过程吧。 CSS 如何工作CSS 如何工作 Mozilla 的开发者文档讲的很好。 浏览器在展现一个文档的时候，必须要把文档内容和相应的样式信息结合起来展示。 这个处理过程一般分两个阶段： 浏览器先将标记语言和 CSS 转换成 DOM (文档对象模型)结构。 这时 DOM 就代表了电脑内存中的相应文档，因为它已经融合了文档内容和相应的样式表。 最后浏览器把 DOM 的内容展示出来。 层叠和继承参考资料: 层叠和继承 对于层叠来说，共有三种主要的样式来源： 浏览器对HTML定义的默认样式。 用户定义的样式。 开发者定义的样式，可以有三种形式： 定义在外部文件（外链样式）：本教程中案例主要是通过这种形式定义样式。 在页面的头部定义（内联样式）：通过这种形式定义的样式只在本页面内生效。 定义在特定的元素身上（行内样式）：这种形式多用于测试，可维护性较差。 用户定义的样式表会覆盖浏览器定义的默认样式，然后网页开发者定义的样式又会覆盖用户样式。 再来看看优先级，从高到低依次为：网页开发者定义的样式、网页阅读者定义的样式、浏览器的默认样式。 对继承的元素来说，子元素自身的样式优先级高于从父级继承来的样式。 更多细节CSS 另外提供了一个 !important 关键字，用户可以通过使用这个关键字使自己定义的样式覆盖掉开发者定义的样式。这就意味着，作为开发者，你很难准确的预知页面最终在用户电脑上的显示效果。 选择器参考资料:选择器（Selectors） 标签选择器类选择器（Class selectors） 通过设置元素的 class 属性，可以为元素指定类名。类名由开发者自己指定。 文档中的多个元素可以拥有同一个类名。 在写样式表时，类选择器是以英文句号（.）开头的。 ID选择器（ID selectors） 通过设置元素的 id 属性为该元素制定ID。ID名由开发者指定。每个ID在文档中必须是唯一的。 在写样式表时，ID选择器是以#开头的。 优先级 如果多余一个规则指定了相同的属性值都应用到一个元素上，CSS规定拥有更高确定度的选择器优先级更高。ID选择器比类选择器更具确定度, 而类选择器比标签选择器（tag selector）更具确定度。 如果样式中包含冲突的规则，且它们具有相同的确定度。那么，后出现的规则优先级高。 如果你遇到规则冲突，你可以增加其中一条的确定度或将之移到后面以使它具有更高优先级。 伪类选择器（Pseudo-classes selectors）基于关系的选择器选择器 |选择的元素A E |任何是元素A的后代元素E (后代节点指A的子节点，子节点的子节点，以此类推)A &gt; E |任何元素A的子元素E:first-child |任何元素的第一个子元素EB + E |任何元素B的下一个兄弟元素E 其他属性text-indent定义和用法text-indent 属性规定文本块中首行文本的缩进。注释：允许使用负值。如果使用负值，那么首行会被缩进到左边。 可能的值 值 |描述length |定义固定的缩进。默认值：0。% |定义基于父元素宽度的百分比的缩进。inherit |规定应该从父元素继承 text-indent 属性的值。 text-transform定义和用法text-transform 属性控制文本的大小写。 说明这个属性会改变元素中的字母大小写，而不论源文档中文本的大小写。如果值为 capitalize，则要对某些字母大写，但是并没有明确定义如何确定哪些字母要大写，这取决于用户代理如何识别出各个“词”。 可能的值 值 |描述none |默认。定义带有小写字母和大写字母的标准的文本。capitalize |文本中的每个单词以大写字母开头。uppercase |定义仅有大写字母。lowercase |定义无大写字母，仅有小写字母。inherit |规定应该从父元素继承 text-transform 属性的值。 text-decoration定义和用法text-decoration 属性规定添加到文本的修饰。注释：修饰的颜色由 “color” 属性设置。注释：IE、Chrome 或 Safari 不支持 “blink” 属性值。 说明这个属性允许对文本设置某种效果，如加下划线。如果后代元素没有自己的装饰，祖先元素上设置的装饰会“延伸”到后代元素中。不要求用户代理支持 blink。 text-align定义和用法text-align 属性规定元素中的文本的水平对齐方式。该属性通过指定行框与哪个点对齐，从而设置块级元素内文本的水平对齐方式。通过允许用户代理调整行内容中字母和字之间的间隔，可以支持值 justify；不同用户代理可能会得到不同的结果。 可能的值 值 |描述left |把文本排列到左边。默认值：由浏览器决定。right |把文本排列到右边。center |把文本排列到中间。justify |实现两端对齐文本效果。inherit |规定应该从父元素继承 text-align 属性的值。 word-spacing定义word-spacing 属性增加或减少单词间的空白（即字间隔）。该属性定义元素中字之间插入多少空白符。针对这个属性，“字” 定义为由空白符包围的一个字符串。如果指定为长度值，会调整字之间的通常间隔；所以，normal 就等同于设置为 0。允许指定负长度值，这会让字之间挤得更紧。注释：允许使用负值。 white-space定义和用法white-space 属性设置如何处理元素内的空白。这个属性声明建立布局过程中如何处理元素中的空白符。值 pre-wrap 和 pre-line 是 CSS 2.1 中新增的。 可能的值 值 |描述normal |默认。空白会被浏览器忽略。pre |空白会被浏览器保留。其行为方式类似 HTML 中的 &lt;pre&gt; 标签。nowrap |文本不会换行，文本会在在同一行上继续，直到遇到 &lt;br&gt; 标签为止。pre-wrap |保留空白符序列，但是正常地进行换行。pre-line |合并空白符序列，但是保留换行符。inherit |规定应该从父元素继承 white-space 属性的值。 @font-faceCSS3 @font-face 规则在 CSS3 之前，web 设计师必须使用已在用户计算机上安装好的字体。通过 CSS3，web 设计师可以使用他们喜欢的任意字体。当您您找到或购买到希望使用的字体时，可将该字体文件存放到 web 服务器上，它会在需要时被自动下载到用户的计算机上。您“自己的”的字体是在 CSS3 @font-face 规则中定义的。 注释：Internet Explorer 8 以及更早的版本不支持新的 @font-face 规则。Internet Explorer 9+ 支持新的 @font-face 规则，但是仅支持 .eot 类型的字体 (Embedded OpenType)。 使用您需要的字体在新的 @font-face 规则中，您必须首先定义字体的名称（比如 myFirstFont），然后指向该字体文件。如需为 HTML 元素使用字体，请通过 font-family 属性来引用字体的名称 (myFirstFont)： 实例 12345678@font-face &#123; font-family: myFirstFont; src: url('Sansation_Light.ttf'), url('Sansation_Light.eot'); /* IE9+ */&#125;div &#123; font-family: myFirstFont;&#125; CSS3 字体描述符 下面的表格列出了能够在 @font-face 规则中定义的所有字体描述符： 描述符 |值 |描述font-family |name |必需。规定字体的名称。src |URL |必需。定义字体文件的 URL。font-stretch |normalcondensedultra-condensedextra-condensedsemi-condensedexpandedsemi-expandedextra-expandedultra-expanded|可选。定义如何拉伸字体。默认是 “normal”。font-style|ormalitalicoblique|可选。定义字体的样式。默认是 “normal”。font-weight|normalbold100200300400500600700800900|选。定义字体的粗细。默认是 “normal”。unicode-range |unicode-range |可选。定义字体支持的 UNICODE 字符范围。默认是 “U+0-10FFFF”。 深入了解行高属性参考：深入了解css的行高Line Height属性 一般来说，设置行高为值：纯数字是最理想的方式，因为其会随着对应的 font-size 而缩放。 盒模型及定位已知宽度的div居中 用两种方法来实现一个背景色为红色、宽度为960px的在浏览器中居中 我的方法一： 使用 margin：0 auto; html文件 1234567891011&lt;!DOCTYPE html&gt;&lt;html lang=\"en\"&gt; &lt;head&gt; &lt;meta charset=\"UTF-8\"&gt; &lt;title&gt;Document&lt;/title&gt; &lt;link rel=\"stylesheet\" type=\"text/css\" href=\"task0001-2.css\"&gt; &lt;/head&gt; &lt;body&gt; &lt;div class=\"center\"&gt;aaa&lt;/div&gt; &lt;/body&gt;&lt;/html&gt; css文件 12345.center &#123; width: 960px; margin: 0 auto; background-color: red;&#125; 方法二： 绝对定位，左边距离 body 50%，margin-left: -480px 1234567.center &#123; width: 960px; background-color: red; position: absolute; left: 50%; margin-left: -480px;&#125; Demo 对于居中的补充参考自 学习CSS布局。 像下面这样写css代码，使用 max-width 替代 width 可以使浏览器更好地处理小窗口的情况。这点在移动设备上显得尤为重要。 有效的避免了如下问题：当浏览器窗口比元素的宽度还要窄时，浏览器会显示一个水平滚动条来容纳页面。 1234#main &#123; max-width: 600px; margin: 0 auto;&#125; CSS布局奇淫技巧之–各种居中 早期css滑动门 有的圆角矩形是复杂图案，无法直接用border-radius，请在不使用 border-radius 的情况下实现一个可复用的高度和宽度都自适应的圆角矩形示例 这道题我一开始不会做，查阅了资料，发现这就是所谓的 css 滑动门的应用。妙味云课堂之css：滑动门、圆角、css精灵使用三层嵌套，或者四层嵌套的 div，通过背景图定位等方式可以实现。 左侧固定右侧自适应宽度的两列布局 用两种不同的方法来实现一个两列布局，其中左侧部分宽度固定、右侧部分宽度随浏览器宽度的变化而自适应变化 我的方法一： 不使用浮动，使用绝对定位，将左上角的块放好位置，右边的块设置margin-left html 文件： 123456789101112131415&lt;!DOCTYPE html&gt;&lt;html lang=\"en\"&gt; &lt;head&gt; &lt;meta charset=\"UTF-8\"&gt; &lt;title&gt;layout&lt;/title&gt; &lt;link rel=\"stylesheet\" type=\"text/css\" href=\"task0001-6-3.css\"&gt; &lt;/head&gt; &lt;body&gt; &lt;div class=\"row\"&gt; &lt;div class=\"left\"&gt;DIV-A&lt;/div&gt; &lt;div class=\"right\"&gt;DIV-B&lt;/div&gt; &lt;/div&gt; &lt;div class=\"bottom\"&gt;DIV-C&lt;/div&gt; &lt;/body&gt;&lt;/html&gt; css 文件： 1234567891011121314151617181920.row &#123; position: relative;&#125;.left &#123; width: 100px; height: 100px; background-color: red; position: absolute; top: 0; left: 0;&#125;.right &#123; height: 100px; background-color: blue; margin-left: 100px;&#125;.bottom &#123; height: 100px; background-color: yellow;&#125; 方法二： 使用浮动，左边的块使用浮动，右边的块使用margin-left 123456789101112131415.left &#123; width: 100px; height: 100px; background-color: red; float: left;&#125;.right &#123; height: 100px; background-color: blue; margin-left: 100px;&#125;.bottom &#123; height: 100px; background-color: yellow;&#125; Demo 补充： 看完了后面的 BFC 之后，本题和下一题都可以用另一种方法了总之我已经震惊了！太爽了！有没有！ html 12345678910111213&lt;!DOCTYPE html&gt;&lt;html lang=\"en\"&gt; &lt;head&gt; &lt;meta charset=\"UTF-8\"&gt; &lt;title&gt;使用 BFC 进行两列布局&lt;/title&gt; &lt;link rel=\"stylesheet\" href=\"two-col-layout-with-BFC.css\"&gt; &lt;/head&gt; &lt;body&gt; &lt;div class=\"left\"&gt;DIV-A&lt;/div&gt; &lt;div class=\"right\"&gt;DIV-B&lt;/div&gt; &lt;div class=\"bottom\"&gt;DIV-C&lt;/div&gt; &lt;/body&gt;&lt;/html&gt; css 123456789101112131415.left&#123; width: 100px; height: 100px; background-color: blue; float: left;&#125;.right&#123; height: 100px; background-color: yellow; overflow: hidden;&#125;.bottom&#123; height: 100px; background-color: red;&#125; Demo 双飞翼布局 用两种不同的方式来实现一个三列布局，其中左侧和右侧的部分宽度固定，中间部分宽度随浏览器宽度的变化而自适应变化 原题中参考资料 双飞翼布局 12345678910111213141516171819202122232425&lt;!DOCTYPE html&gt;&lt;html lang=\"en\"&gt; &lt;head&gt; &lt;meta charset=\"UTF-8\"&gt; &lt;title&gt;Flying Swing Layout&lt;/title&gt; &lt;link rel=\"stylesheet\" type=\"text/css\" href=\"task0001-6-4.css\"&gt; &lt;/head&gt; &lt;body&gt; &lt;div class=\"bd\"&gt; &lt;div class=\"main\"&gt; &lt;div class=\"main-wrap\"&gt; &lt;p&gt;Flying Swing Layout&lt;/p&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class=\"sub\"&gt; &lt;p&gt;Flying Swing Layout&lt;/p&gt; left &lt;/div&gt; &lt;div class=\"extra\"&gt; &lt;p&gt;Flying Swing Layout&lt;/p&gt; right &lt;/div&gt; &lt;/div&gt; &lt;/body&gt;&lt;/html&gt; css 12345678910111213141516171819202122232425262728.bd &#123; /*padding: 0 190px;*/&#125;.main &#123; float: left; width: 100%; background-color: #aaa;&#125;.main-wrap &#123; margin: 0 190px;&#125;.sub &#123; float: left; width: 190px; margin-left: -100%; background-color: blue; /*position: relative; left: -190px;*/&#125;.extra &#123; float: left; width: 190px; margin-left: -190px; background-color: yellow; /*position: relative; right: -190px;*/&#125; Demo 补充： 使用 BFC 的另一种方法，我再一次震惊！ 代码超级简单！ html 123456789101112131415161718&lt;!DOCTYPE html&gt;&lt;html lang=\"en\"&gt; &lt;head&gt; &lt;meta charset=\"UTF-8\"&gt; &lt;title&gt;flying-Swing-BFC&lt;/title&gt; &lt;link rel=\"stylesheet\" href=\"flying-Swing-BFC.css\"&gt; &lt;/head&gt; &lt;body&gt; &lt;div class=\"left\"&gt;left&lt;/div&gt; &lt;div class=\"right\"&gt;right&lt;/div&gt; &lt;div class=\"main\"&gt; flying-Swing-BFC.htmlflying-Swing-BFC.htmlflying-Swing-BFC.htmlflying-Swing-BFC.htmlflying-Swing-BFC.htmlflying-Swing-BFC.htmlflying-Swing-BFC.htmlflying-Swing-BFC.htmlflying-Swing-BFC.htmlflying-Swing-BFC.htmlflying-Swing-BFC.html &lt;/div&gt; &lt;div class=\"footer\"&gt; footerfooterfooterfooterfooterfooterfooterfooterfooter &lt;/div&gt; &lt;/body&gt;&lt;/html&gt; css 1234567891011121314.left&#123; width: 100px; background-color: red; float: left;&#125;.right&#123; width: 200px; background-color: blue; float: right;&#125;.main&#123; background-color: #eee; overflow: hidden;&#125; Demo 浮动布局 实现一个浮动布局，红色容器中每一行的蓝色容器数量随着浏览器宽度的变化而变化 这个题我觉的直接将每一个块浮动起来就好了，不知我理解的对不对。 html文件 12345678910111213141516171819&lt;!DOCTYPE html&gt;&lt;html lang=\"en\"&gt; &lt;head&gt; &lt;meta charset=\"UTF-8\"&gt; &lt;title&gt;Document&lt;/title&gt; &lt;link rel=\"stylesheet\" type=\"text/css\" href=\"task0001-6-5.css\"&gt; &lt;/head&gt; &lt;body&gt; &lt;div&gt;&lt;/div&gt; &lt;div&gt;&lt;/div&gt; &lt;div&gt;&lt;/div&gt; &lt;div&gt;&lt;/div&gt; &lt;div&gt;&lt;/div&gt; &lt;div&gt;&lt;/div&gt; &lt;div&gt;&lt;/div&gt; &lt;div&gt;&lt;/div&gt; &lt;div&gt;&lt;/div&gt; &lt;/body&gt;&lt;/html&gt; css文件 12345678910body &#123; background-color: red;&#125;div &#123; width: 150px; height: 100px; margin: 10px; float: left; background-color: blue;&#125; Demo 清除浮动/闭合浮动参考自 那些年我们一起清除过的浮动 by 一丝冰凉 清除浮动：清除对应的单词是 clear，对应CSS中的属性是 clear：left | right | both | none； 闭合浮动：更确切的含义是使浮动元素闭合，从而减少浮动带来的影响。 我们想要达到的效果更确切地说是闭合浮动，而不是单纯的清除浮动，设置clear：both清除浮动并不能解决warp高度塌陷的问题。 正是因为浮动的这种特性，导致本属于普通流中的元素浮动之后，包含框内部由于不存在其他普通流元素了，也就表现出高度为0（高度塌陷）。在实际布局中，往往这并不是我们所希望的，所以需要闭合浮动元素，使其包含框表现出正常的高度。 最后一丝姐给了两个精益求精方案，我觉得方案一更易于理解，这里实践一下： 闭合浮动的Demo 下面是源码 html 123456789101112131415161718&lt;!DOCTYPE html&gt;&lt;html lang=\"en\"&gt; &lt;head&gt; &lt;meta charset=\"UTF-8\"&gt; &lt;title&gt;Document&lt;/title&gt; &lt;link rel=\"stylesheet\" href=\"close-float.css\"&gt; &lt;/head&gt; &lt;body&gt; &lt;div class=\"row clearfix\"&gt; &lt;div class=\"left\"&gt; &lt;h1&gt;left&lt;/h1&gt; &lt;div&gt;Content or Something&lt;/div&gt; &lt;/div&gt; &lt;div class=\"right\"&gt;right&lt;/div&gt; &lt;/div&gt; &lt;div class=\"row2\"&gt;Row2&lt;/div&gt; &lt;/body&gt;&lt;/html&gt; css 123456789101112131415161718192021222324252627.row &#123; border: 1px solid red;&#125;.clearfix:after &#123; content: \"\\200B\"; display: block; height: 0; clear: both;&#125;.clearfix &#123; *zoom: 1;&#125;.left &#123; width: 200px; float: left; background-color: #eee;&#125;.right &#123; width: 200px; float: right; background-color: #eee;&#125;.row2 &#123; width: 600px; height: 50px; background-color: #aaa;&#125; 其中*zoom: 1是为了触发hasLayout 还有另一种解决方案！ 参考自：清除浮动（clearfix hack） 直接使用，如下代码即可 1234.clearfix&#123; overflow: auto; zoom: 1;&#125; Demo (实际上，我看完后面的资料，再翻到这里就明白了！正是使用了BFC原理！！！！！！！) 但是今天遇到一个坑！ 如果使用了 over-flow，在后面如果有元素要绝对布局在父元素的外面的，意思就是出现 top, bottom, left, right 的值为负值时，就会出现看不到，或者滚动条的问题！ 若是有这种要求，我觉得还是用一丝姐姐的解决方案比较好。 参考 清除浮动的几种方法 box-sizing当你设置一个元素为 box-sizing: border-box; 时，此元素的内边距和边框不再会增加它的宽度。 他们的内边距和边框都是向内的挤压的。支持IE8+，需要加浏览器内核。 1234567.simple &#123; width: 500px; margin: 20px auto; -webkit-box-sizing: border-box; -moz-box-sizing: border-box; box-sizing: border-box;&#125; 响应式布局媒体查询 MDN CSS媒体查询 媒体查询-学习CSS布局 @media screen and (min-width: 500px) and (max-width: 800px) { ... } An Introduction to Meta Viewport and @viewport 多列布局 column BFC 和 IE 的 hasLayout BFC和IE的hasLayout Block Formatting Context 的几大用处 看完这个资料后我震惊了！竟然可以这么玩儿！我将本文之前提到的两列布局，双飞翼布局又重新写了一遍！太爽了！代码超级简洁！ Block Formatting Context 的几大用处： 防止 margin 折叠 清除float 不会环绕float元素 相关资料 视觉格式化模型(visual formatting model) 块格式化上下文(block formatting context) div 三列等高纯CSS实现三列DIV等高布局 最关键的地方有3句： 最外层div设置一个溢出隐藏 123#wrap &#123; overflow:hidden;&#125; 每一个子块设置 padding 和 margin 1234#left,#center,#right&#123; margin-bottom:-10000px; padding-bottom:10000px;&#125; overflow:hidden; ‘隐藏溢出。如果内容溢出wrap层，则不显示。 margin-bottom:-10000px; ‘底部边距-10000px。padding-bottom:10000px; ‘底部填充10000px。上面这两句能够实现的效果就是，产生10000px的填充，然后用负的边距把它给抵销掉。 去除inline-block元素间间距一开始我不知道是因为使用了 display: inline-block 会有间距。后来查找资料找到了相关的方案。 去除inline-block元素间间距的N种方法 Fighting the Space Between Inline Block Elements 真正意义上的inline-block水平呈现的元素间，换行显示或空格分隔的情况下会有间距。这种表现是符合规范的应该有的表现。 解决方法有很多，上述博文中提到的有： 移除空格 使用 margin 负值 取消闭合标签 使用 font-size: 0 使用 letter-spacing 使用 word-spacing 其他 我觉得使用 4 font-size: 0 比较好，对别的元素影响最小。代码如下：在 a 的外层将字体尺寸设为 0，载对内层的 a 重新设置字体大小，即可。 123456nav &#123; font-size: 0;&#125;nav a &#123; font-size: 16px;&#125; 最终作品 在线Demo 源代码 参考资料 HTML、CSS的代码规范 自己要试着改变一些代码风格了，规范化！ 顾轶灵:Web语义化我看他回答最后的举例的Sildes做的非常好，可以经常看看。Semantic HTML。他的其他Slides也做的非常好，很喜欢这种风格！ CSS命名规范@W3C Funs 起名不再困难！ 点击阅读: CSS浏览器兼容性列表-维基百科 类似的我想到了 Can I Use，Can I Use 包含的更多，包括 HTML5, CSS SVG, JS API 等。 学习CSS布局 Media Queries 使用CSS渐变 CSS3 Gradient CSS渐变生成器","categories":[{"name":"HTML CSS","slug":"HTML-CSS","permalink":"http://www.jiangjinchao.pro/categories/HTML-CSS/"}],"tags":[{"name":"HTML","slug":"HTML","permalink":"http://www.jiangjinchao.pro/tags/HTML/"},{"name":"CSS","slug":"CSS","permalink":"http://www.jiangjinchao.pro/tags/CSS/"},{"name":"ife","slug":"ife","permalink":"http://www.jiangjinchao.pro/tags/ife/"},{"name":"Baidu","slug":"Baidu","permalink":"http://www.jiangjinchao.pro/tags/Baidu/"},{"name":"task","slug":"task","permalink":"http://www.jiangjinchao.pro/tags/task/"}]},{"title":"判断两个数组是否相似 (arraysSimilar)","slug":"arrays-similar","date":"2015-04-06T07:14:54.000Z","updated":"2018-04-13T12:59:23.142Z","comments":true,"path":"/2015/arrays-similar.html","link":"","permalink":"http://www.jiangjinchao.pro/2015/arrays-similar.html","excerpt":"题目题目来自 慕课网 JavaScript 深入浅出 1-6 编程练习 请在 index.html 文件中，编写 arraysSimilar 函数，实现判断传入的两个数组是否相似。具体需求： 数组中的成员类型相同，顺序可以不同。例如 [1, true] 与 [false, 2] 是相似的。 数组的长度一致。 类型的判断范围，需要区分: String, Boolean, Number, undefined, null, 函数, 日期, window.","text":"题目题目来自 慕课网 JavaScript 深入浅出 1-6 编程练习 请在 index.html 文件中，编写 arraysSimilar 函数，实现判断传入的两个数组是否相似。具体需求： 数组中的成员类型相同，顺序可以不同。例如 [1, true] 与 [false, 2] 是相似的。 数组的长度一致。 类型的判断范围，需要区分: String, Boolean, Number, undefined, null, 函数, 日期, window. 当以上全部满足，则返回“判定结果:通过”，否则返回“判定结果:不通过”。 题目给出了 index.html 如下： 123456789101112131415161718192021&lt;!DOCTYPE HTML&gt;&lt;html&gt;&lt;head&gt; &lt;meta http-equiv=\"Content-Type\" content=\"text/html; charset=gb18030\"&gt; &lt;title&gt;Untitled Document&lt;/title&gt;&lt;/head&gt;&lt;body&gt; &lt;script type=\"text/javascript\"&gt; /* * param1 Array * param2 Array * return true or false */ function arraysSimilar(arr1, arr2)&#123; &#125; &lt;/script&gt; &lt;script src=\"testData.js\"&gt;&lt;/script&gt;&lt;/body&gt;&lt;/html&gt; 其中 testData.js 是测试用例，代码如下 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566var result = function() &#123; //以下为多组测试数据 var cases = [&#123; arr1: [1, true, null], arr2: [null, false, 100], expect: true &#125;, &#123; arr1: [ function() &#123;&#125;, 100 ], arr2: [100, &#123;&#125;], expect: false &#125;, &#123; arr1: [null, 999], arr2: [&#123;&#125;, 444 ], expect: false &#125;, &#123; arr1: [window, 1, true, new Date(), \"hahaha\", (function() &#123;&#125;), undefined], arr2: [undefined, (function() &#123;&#125;), \"okokok\", new Date(), false, 2, window], expect: true &#125;, &#123; arr1: [new Date()], arr2: [&#123;&#125;], expect: false &#125;, &#123; arr1: [window], arr2: [&#123;&#125;], expect: false &#125;, &#123; arr1: [undefined, 1], arr2: [null, 2], expect: false &#125;, &#123; arr1: [new Object, new Object, new Object], arr2: [&#123;&#125;, &#123;&#125;, null ], expect: false &#125;, &#123; arr1: null, arr2: null, expect: false &#125;, &#123; arr1: [], arr2: undefined, expect: false &#125;, &#123; arr1: \"abc\", arr2: \"cba\", expect: false &#125;]; //使用for循环, 通过arraysSimilar函数验证以上数据是否相似，如相似显示“通过”,否则\"不通过\",所以大家要完成arraysSimilar函数,具体要求，详见任务要求。 for (var i = 0; i &lt; cases.length; i++) &#123; if (arraysSimilar(cases[i].arr1, cases[i].arr2) !== cases[i].expect) &#123; document.write(\"不通过！case\" + (i + 1) + \"不正确！arr1=\" + JSON.stringify(cases[i].arr1) + \", arr2=\" + JSON.stringify(cases[i].arr2) + \" 的判断结果不是\" + cases[i].expect); return false; &#125; &#125; return true;&#125;();document.write(\"判定结果:\" + (result ? \"通过\" : \"不通过\")); 解答各位读者在看解答前也可以自己考虑一下，看看咱们的想法是否一致，期待您在本文的留言。 思路通过观察测试用例，可以发现，最后三个用例有不是数组的。所以我们可以先判断传入的参数是否是数组。又因为题目中要求数组长度必须一致，这也是第二个限制条件。最后再区分具体的类型。 理清思路我们可以分为以下步骤： 判断传入的参数是否为数组 (使用 instanceof 方法) 检查两个数组长度是否一致 分别判断数组内元素的基本数据类型 (使用 typeof 方法) 因为 typeof 只能检查基本数据类型，对于 null, Date, window 返回的都是 object，所以使用 Object.prototype.toString.apply() 来检查这些对象类型，其返回值为：&#39;[object Null]&#39;, &#39;[object Date]&#39;, &#39;[object global]&#39; 分别比较每个数组内元素的各种类型的个数，如果都相等，那么这两个数组是相似的。 具体实现代码JavaScript代码如下 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127/** * ===================================================== * 请在index.html文件中，编写arraysSimilar函数，实现判断传入的两个数组是否相似。具体需求： * 1. 数组中的成员类型相同，顺序可以不同。例如[1, true] 与 [false, 2]是相似的。 * 2. 数组的长度一致。 * 3. 类型的判断范围，需要区分:String, Boolean, Number, undefined, null, 函数，日期, window. * * 当以上全部满足，则返回\"判定结果:通过\"，否则返回\"判定结果:不通过\"。 * ===================================================== *//** param1 Array* param2 Array* return true or false*/function arraysSimilar(arr1, arr2)&#123; if (arr1 instanceof Array &amp;&amp; arr2 instanceof Array ) &#123; //先判断传入的是否是数组 if (arr1.length == arr2.length) &#123; //判断数组长度 console.log(\"same-length\"); console.log(arr1); console.log(arr2); //开始判断数组内部是否相似 return sameLengthArraysSimilar(arr1, arr2); &#125; else&#123; //两个数组长度不同返回false return false; &#125; &#125; else &#123; //传入的参数不是数组返回false return false; &#125;&#125;/** * 判断两个等长的数组内部是否相似 * 遍历数组 * arr1中元素各种类型出现的个数是否和arr2中元素各种类型出现的个数相同 * @param &#123;Array&#125; arr1 数组1 * @param &#123;Array&#125; arr2 数组2 * @return &#123;true,false&#125; */function sameLengthArraysSimilar(arr1,arr2) &#123; var numInArr1 = 0; var numInArr2 = 0; var booleanInArr1 = 0; var booleanInArr2 = 0; var funInArr1 = 0; var funInArr2 = 0; var undefinedInArr1 = 0; var undefinedInArr2 = 0; var stringInArr1 = 0; var stringInArr2 = 0; var nullInArr1 = 0; var nullInArr2 = 0; var dateInArr1 = 0; var dateInArr2 = 0; var windowInArr1 = 0; var windowInArr2 = 0; for (var i = 0; i &lt; arr1.length; i++) &#123; if(typeof arr1[i] === 'number' )&#123; numInArr1 ++; &#125; else if(typeof arr1[i] === 'boolean')&#123; booleanInArr1 ++; &#125; else if(typeof arr1[i] === 'function')&#123; funInArr1 ++; &#125; else if(typeof arr1[i] === 'undefined')&#123; undefinedInArr1 ++; &#125; else if(typeof arr1[i] === 'string')&#123; stringInArr1 ++; &#125; else if(typeof arr1[i] ==='object')&#123; if(Object.prototype.toString.apply(arr1[i]) === '[object Null]')&#123; nullInArr1 ++; &#125; else if(Object.prototype.toString.apply(arr1[i]) === '[object Date]')&#123; dateInArr1 ++; &#125; else if(Object.prototype.toString.apply(arr1[i]) === '[object global]')&#123; windowInArr1 ++; &#125; &#125; if(typeof arr2[i] === 'number')&#123; numInArr2 ++; &#125; else if(typeof arr2[i] === 'boolean')&#123; booleanInArr2 ++; &#125; else if(typeof arr2[i] === 'function')&#123; funInArr2 ++; &#125; else if(typeof arr2[i] === 'undefined')&#123; undefinedInArr2 ++; &#125; else if(typeof arr2[i] === 'string')&#123; stringInArr2 ++; &#125; else if(typeof arr2[i] ==='object')&#123; if(Object.prototype.toString.apply(arr2[i]) === '[object Null]')&#123; nullInArr2 ++; &#125; else if(Object.prototype.toString.apply(arr2[i]) === '[object Date]')&#123; dateInArr2 ++; &#125; else if(Object.prototype.toString.apply(arr2[i]) === '[object global]')&#123; windowInArr2 ++; &#125; &#125; &#125; console.log(\"num---\"+numInArr1); console.log(\"num---\"+numInArr2); console.log(\"boo---\"+booleanInArr1); console.log(\"boo---\"+booleanInArr2); console.log(\"null---\"+nullInArr1); console.log(\"null---\"+nullInArr2); console.log(\"window---\"+windowInArr1); console.log(\"window---\"+windowInArr2); console.log(\"date---\"+dateInArr1); console.log(\"date---\"+dateInArr2); console.log(\"string---\"+stringInArr1); console.log(\"string---\"+stringInArr2); console.log(\"fun---\"+funInArr1); console.log(\"fun---\"+funInArr2); console.log(\"undefined---\"+undefinedInArr1); console.log(\"undefined---\"+undefinedInArr2); if(numInArr1 == numInArr2 &amp;&amp; booleanInArr1==booleanInArr2 &amp;&amp; funInArr1==funInArr2 &amp;&amp; undefinedInArr1==undefinedInArr2 &amp;&amp; stringInArr1==stringInArr2 &amp;&amp; nullInArr1==nullInArr2 &amp;&amp; dateInArr1==dateInArr2 &amp;&amp; windowInArr1==windowInArr2)&#123; console.log('================================true'); return true; &#125;else&#123; console.log('================================false'); return false; &#125;&#125; 总结 上述代码完美的跑完所有的测试用例，读者 点击这里查看结果，并且可以按 f12 看 Console 信息， 里面有代码的执行过程。 当然你也可以复制本文的 JavaScript 代码，在 慕课网的习题 下跑一下，也可以看到 判定结果:通过 的结果 完整源代码在我的 GitHub javascript-test/arraysSimilar/ 仓库中 其实我的代码逻辑并不复杂，有点空间换时间的感觉，执行效率应该是较高的。没有用 JavaScript 封装的任何函数，完全是自己写的。其实代码除去 console.log() 也并没有多少行。 各位读者有什么好的想法欢迎留言交流！","categories":[{"name":"JavaScript","slug":"JavaScript","permalink":"http://www.jiangjinchao.pro/categories/JavaScript/"}],"tags":[{"name":"JavaScript","slug":"JavaScript","permalink":"http://www.jiangjinchao.pro/tags/JavaScript/"},{"name":"慕课网","slug":"慕课网","permalink":"http://www.jiangjinchao.pro/tags/慕课网/"},{"name":"Array","slug":"Array","permalink":"http://www.jiangjinchao.pro/tags/Array/"},{"name":"算法","slug":"算法","permalink":"http://www.jiangjinchao.pro/tags/算法/"}]},{"title":"代码校验工具 SublimeLinter 的安装与使用","slug":"sublimeLinter","date":"2015-03-26T07:14:54.000Z","updated":"2018-04-06T04:59:07.340Z","comments":true,"path":"/2015/sublimeLinter.html","link":"","permalink":"http://www.jiangjinchao.pro/2015/sublimeLinter.html","excerpt":"本文我将讲述一下 SublimeLinter 的安装过程。其组件 jshint 的安装与使用。其组件 csslint 的安装与使用。我将基于 Sublime Text 3 来安装。使用 Sublime Text 2 的用户阅读本文是没有帮助的。 SublimeLinter 是 Sublime 的插件，它的作用是检查代码语法是否有错误，并提示。习惯了 IDE 下写代码的人一定需要一款在 Sublime 上类似的语法检查工具。下面我们开始。","text":"本文我将讲述一下 SublimeLinter 的安装过程。其组件 jshint 的安装与使用。其组件 csslint 的安装与使用。我将基于 Sublime Text 3 来安装。使用 Sublime Text 2 的用户阅读本文是没有帮助的。 SublimeLinter 是 Sublime 的插件，它的作用是检查代码语法是否有错误，并提示。习惯了 IDE 下写代码的人一定需要一款在 Sublime 上类似的语法检查工具。下面我们开始。 安装 SublimeLinter如同其他插件一样使用 Package Control 来安装。 按下 Ctrl+Shift+p 进入 Command Palette 输入install进入 Package Control: Install Package 输入SublimeLinter。进行安装. 安装完成后可以看到这样一段话： 123456789101112131415161718192021Welcome to SublimeLinter, a linter framework for Sublime Text 3. * * * IMPORTANT! * * * SublimeLinter 3 is NOT a drop-in replacement for earlier versions. Linters *NOT* included with SublimeLinter 3, they must be installed separately. The settings are different. * * * READ THE DOCS! * * * Otherwise you will never know how to install linters, nor will you know about all of the great new features in SublimeLinter 3. For complete documentation on how to install and use SublimeLinter, please see: http://www.sublimelinter.com 可以看到具体的 Linters 组件不被包含在 SublimeLinter 3 中，所以我们要额外独立安装组件。可以针对不同的语言安装不同的组件。 JavaScript 语法检查SublimeLinter-jshint 是基于 nodeJS 下的 jshint 的插件，实际上 SublimeLinter-jshint 调用了 nodeJS 中 jshint 的接口来进行语法检查的。 安装 SublimeLinter-jshint为了让 JavaScript 代码有语法检查，我们安装 SublimeLinter-jshint同样的方法，我们安装 SublimeLinter-jshint 按下 Ctrl+Shift+p 进入 Command Palette 输入install进入 Package Control: Install Package 输入SublimeLinter-jshint。进行安装. 如下图 安装完成后我们可以看到下面的一段话 12345678910SublimeLinter-jshint ------------------------------- This linter plugin for SublimeLinter provides an interface to jshint. ** IMPORTANT! ** Before this plugin will activate, you *must* follow the installation instructions here: https://github.com/SublimeLinter/SublimeLinter-jshint 安装 nodeJS 和 jshint在插件开始工作之前，我们必须再看一下上述插件的安装说明通过 SublimeLinter-jshint 的说明 我们可以看到，这个组件依赖于 nodeJS 下的 jshint，所以我们安装 nodeJS 环境和 nodeJS 下的 jshint。 安装 Node.js 通过 npm 安装jshint 在命令行下输入如下代码，完成安装 npm install -g jshint 安装完成后命令行中出现如下的信息 12345678910C:\\Users\\Administrator\\AppData\\Roaming\\npm\\jshint -&gt; C:\\Users\\Administrator\\AppData\\Roaming\\npm\\node_modules\\jshint\\bin\\jshintjshint@2.6.3 C:\\Users\\Administrator\\AppData\\Roaming\\npm\\node_modules\\jshint├── strip-json-comments@1.0.2├── underscore@1.6.0├── exit@0.1.2├── shelljs@0.3.0├── console-browserify@1.1.0 (date-now@0.1.4)├── htmlparser2@3.8.2 (domelementtype@1.3.0, entities@1.0.0, domhandler@2.3.0, readable-stream@1.1.13, domutils@1.5.1)├── minimatch@1.0.0 (sigmund@1.0.0, lru-cache@2.5.0)└── cli@0.6.6 (glob@3.2.11) 可以查看 jshint 版本，已确认安装完成。 12C:\\Users\\Administrator&gt;jshint -vjshint v2.6.3 现在，恭喜你，我们使用 Sublime 编辑 JavaScript 文件，就会有语法检查了！ 在编辑过程中，会有如下提示 点击提示点后，Sublime 状态栏也会有相应的说明 css 语法检查与 jshint 同理，SublimeLinter-csslint 也是基于 nodeJS 下的 csslint 的插件，实际上 SublimeLinter-csslint 调用了 nodeJS 中 csslint 的接口来进行语法检查的。 安装 SublimeLinter-csslint同样的方法。 按下 Ctrl+Shift+p 进入 Command Palette 输入install进入 Package Control: Install Package 输入SublimeLinter-csslint。进行安装. 如下图 安装完成后我们可以看到下面的一段话 12345678910SublimeLinter-csslint-------------------------------This linter plugin for SublimeLinter provides an interface to csslint.** IMPORTANT! **Before this plugin will activate, you *must*follow the installation instructions here:https://github.com/SublimeLinter/SublimeLinter-csslint 在使用插件之前，必须遵循上述网址中的安装说明 在 nodeJS 下安装 csslint进入上述的 GitHub 地址，csslint 的说明页。我们知道了和 jshint 一样，csslint 也是基于 nodeJS 下的 csslint 来使用的。 这里安装 nodeJS 过程省略。只需用 npm 安装 csslint 即可。 在命令行中输入 1npm install -g csslint 安装完成后命令行中出现如下的信息 123C:\\Users\\Administrator\\AppData\\Roaming\\npm\\csslint -&gt; C:\\Users\\Administrator\\AppData\\Roaming\\npm\\node_modules\\csslint\\cli.jscsslint@0.10.0 C:\\Users\\Administrator\\AppData\\Roaming\\npm\\node_modules\\csslint└── parserlib@0.2.5 可以查看 csslint 版本，已确认安装完成。 12C:\\Users\\Administrator&gt;csslint --versionv0.10.0 现在，恭喜你，我们使用 Sublime 编辑 css 文件，就会有语法检查了！ 在编辑过程中，会有如下提示 点击提示点后，Sublime 状态栏也会有相应的说明","categories":[{"name":"Sublime","slug":"Sublime","permalink":"http://www.jiangjinchao.pro/categories/Sublime/"}],"tags":[{"name":"Sublime","slug":"Sublime","permalink":"http://www.jiangjinchao.pro/tags/Sublime/"},{"name":"jshint","slug":"jshint","permalink":"http://www.jiangjinchao.pro/tags/jshint/"},{"name":"csslint","slug":"csslint","permalink":"http://www.jiangjinchao.pro/tags/csslint/"}]},{"title":"沥青混合料级配优选参数SSC","slug":"沥青混合料级配优选参数SSC","date":"2015-01-04T01:06:05.000Z","updated":"2018-04-10T21:53:58.104Z","comments":true,"path":"/2015/沥青混合料级配优选参数SSC.html","link":"","permalink":"http://www.jiangjinchao.pro/2015/沥青混合料级配优选参数SSC.html","excerpt":"根据美国NCHRP 第386 号项目的研究成果, 沥青混合料的级配优选可以采用混合料中的集料嵌挤状况来进行评价。本次研究借鉴了这一研究成果, 主要考察了表征ATB-25混合料中粗集料嵌挤状况的参数SSC, 对于SSC大于80%的级配可以认为沥青混合料中的粗集料嵌挤状况是比较理想的。 这种分析方法首先测定矿料混合料中13.2mm以上集料的捣实密度Dca , 基本公式如下: $$Dac =\\frac{(A-b)}{C}$$ 式中, Dca 为粗集料捣实密度; A 为粗集料+干捣容器重;B 为干捣容器重; C 为干捣容器体积, 并且计算各级配混合料中13.2mm 以上颗粒的密度Dcm","text":"根据美国NCHRP 第386 号项目的研究成果, 沥青混合料的级配优选可以采用混合料中的集料嵌挤状况来进行评价。本次研究借鉴了这一研究成果, 主要考察了表征ATB-25混合料中粗集料嵌挤状况的参数SSC, 对于SSC大于80%的级配可以认为沥青混合料中的粗集料嵌挤状况是比较理想的。 这种分析方法首先测定矿料混合料中13.2mm以上集料的捣实密度Dca , 基本公式如下: $$Dac =\\frac{(A-b)}{C}$$ 式中, Dca 为粗集料捣实密度; A 为粗集料+干捣容器重;B 为干捣容器重; C 为干捣容器体积, 并且计算各级配混合料中13.2mm 以上颗粒的密度Dcm $$Dcm = (Gmb*dw).(1-Ac).R$$ 式中, Dcm 为混合料粗集料密度; Gmb 为试件毛体积密度; dw 为水的密度; AC 为沥青用量; R 为粗集料通过百分比。 再根据粗集料捣实密度Dca 和混合料粗集料密度Dcm计算ATB25 混合料中粗集料嵌挤状况的参数SSC $$SSC=\\frac{Dcm}{Dca}*100$$ 式中, SSC 为混合料中粗集料嵌挤状况的量度; Dcm 为混合料粗集料密度; Dca 为粗集料捣实密度。试验结果如下： 级配 Dca,13.2以上粗集料捣实松方密度 沥青用量 混合料毛体积密度 粗集料13.2通过率 Dcm,混合料中粗集料密度 SSC,% 要求 1 1.299 4.31 2.508 43.2 1.03676 79.812 &gt;80 2 1.388 3.75 2.575 47.1 1.16734 84.103 &gt;80 3 1.386 3.57 2.603 50.8 1.27512 92.066 &gt;80 1试验结果中可以看出, 中级配2 号级配和细级配3 号级配能够满足设计要求.","categories":[{"name":"沥青混合料","slug":"沥青混合料","permalink":"http://www.jiangjinchao.pro/categories/沥青混合料/"}],"tags":[{"name":"级配","slug":"级配","permalink":"http://www.jiangjinchao.pro/tags/级配/"},{"name":"沥青混合料","slug":"沥青混合料","permalink":"http://www.jiangjinchao.pro/tags/沥青混合料/"},{"name":"配合比","slug":"配合比","permalink":"http://www.jiangjinchao.pro/tags/配合比/"},{"name":"SSC","slug":"SSC","permalink":"http://www.jiangjinchao.pro/tags/SSC/"}]},{"title":"沥青混合料贝雷参数与VMA模型建立","slug":"沥青混合料贝雷参数与VMA模型建立","date":"2013-04-14T16:00:00.000Z","updated":"2018-04-15T13:40:17.339Z","comments":true,"path":"/2013/沥青混合料贝雷参数与VMA模型建立.html","link":"","permalink":"http://www.jiangjinchao.pro/2013/沥青混合料贝雷参数与VMA模型建立.html","excerpt":"摘要公路沥青混合料配合比设计中矿料间隙率（VMA）是一项非常重要的技术指标，现行规范对不同类型的沥青混合料提出了最小VMA值要求，本文通过近年热门的沥青混合料级配选定方法-贝雷法，结合我司在福建省建设的8条相同结构层的高速公路路面工程，提取其中一层配合比设计的VMA参数与其对应级配线通过计算贝雷参数CA、Fac和Faf，应用SPSS统计软件进行回归预测模型的建立。通过新建项目对该模型进行验证并评估应用价值。 贝雷法概述贝雷法是由美国伊利诺州交通部的RobertD.Bailey发明的一种确定沥青混合料级配的方法，其的主要设计思想是：粗集料相互嵌挤所形成的空隙由细集料来填充，这些集料即相互嵌挤形成次级骨架，同时又形成更小一级的空隙结构，这又需要更细的集料来填充，这样逐级填充，从而形成多级嵌挤结构。 贝雷法的数学模型是平面圆，也即将集料的形状假设为圆，再平面化。粗细集料分界点就成为级配设计的出发点。当三个圆球相互嵌挤，接触面分别是球面或平面时贝雷分析了四种可能的组合，所形成的空隙率分别是圆直径的0.15、0.20、0.24、0.29倍。贝雷法取其平均值以最大公称尺寸（D）的0.22倍对应的筛孔孔径作为混合料中粗细集料的分界点,大于分界点的集料是粗集料，小于分界点的集料是细集料，同样，细集料也按照此原理分成细集料中的粗集料与细集料中的细集料，并形成依次的填充状态。 贝雷参数确定以沈海复线高速公司莆田B1合同段ATB-25柔性基层沥青路面为例，粗细集料分档分别为19-26.5：9.5-19：4.75-9.5：0-4.75：矿粉=18：36：14：30：2，其设计级配如表所示。 参数 31.5 26.5 16 13.2 9.5 4.75 2.36 1.18 0.6 0.3 0.15 0.075 设计级配 100 94.5 73.3 59.7 52.4 44.1 29.7 20.5 15.6 10.8 7.9 6.0 上限 100 100 80 62 52 40 32 25 18 14 10 6 下限 90 60 48 42 32 20 15 10 8 5 3 2","text":"摘要公路沥青混合料配合比设计中矿料间隙率（VMA）是一项非常重要的技术指标，现行规范对不同类型的沥青混合料提出了最小VMA值要求，本文通过近年热门的沥青混合料级配选定方法-贝雷法，结合我司在福建省建设的8条相同结构层的高速公路路面工程，提取其中一层配合比设计的VMA参数与其对应级配线通过计算贝雷参数CA、Fac和Faf，应用SPSS统计软件进行回归预测模型的建立。通过新建项目对该模型进行验证并评估应用价值。 贝雷法概述贝雷法是由美国伊利诺州交通部的RobertD.Bailey发明的一种确定沥青混合料级配的方法，其的主要设计思想是：粗集料相互嵌挤所形成的空隙由细集料来填充，这些集料即相互嵌挤形成次级骨架，同时又形成更小一级的空隙结构，这又需要更细的集料来填充，这样逐级填充，从而形成多级嵌挤结构。 贝雷法的数学模型是平面圆，也即将集料的形状假设为圆，再平面化。粗细集料分界点就成为级配设计的出发点。当三个圆球相互嵌挤，接触面分别是球面或平面时贝雷分析了四种可能的组合，所形成的空隙率分别是圆直径的0.15、0.20、0.24、0.29倍。贝雷法取其平均值以最大公称尺寸（D）的0.22倍对应的筛孔孔径作为混合料中粗细集料的分界点,大于分界点的集料是粗集料，小于分界点的集料是细集料，同样，细集料也按照此原理分成细集料中的粗集料与细集料中的细集料，并形成依次的填充状态。 贝雷参数确定以沈海复线高速公司莆田B1合同段ATB-25柔性基层沥青路面为例，粗细集料分档分别为19-26.5：9.5-19：4.75-9.5：0-4.75：矿粉=18：36：14：30：2，其设计级配如表所示。 参数 31.5 26.5 16 13.2 9.5 4.75 2.36 1.18 0.6 0.3 0.15 0.075 设计级配 100 94.5 73.3 59.7 52.4 44.1 29.7 20.5 15.6 10.8 7.9 6.0 上限 100 100 80 62 52 40 32 25 18 14 10 6 下限 90 60 48 42 32 20 15 10 8 5 3 2 由设计级配表得公称最大粒径（ NMPS）为26.5mm，通过0.22倍的因子计算级配控制点得相应通过率见下表（级配控制点汇总表）。 级配控制点 计算筛孔（mm） 套用筛孔（mm） 通过率（%） NMPS 26.5 26.5 94.5 NMPS/2 13.2 13.2 52.4 PCS 5.83 4.75 29.7 SCS 1.05 1.18 15.6 TCS 0.26 0.3 7.9 粗细集料的分界点（PCS）PCS=NMPS0.22=26.50.22=5.83≈4.75mm式中：PCS为第一控制筛孔，粗细集料分界筛孔。 细集料的分界点（SCS、TCS）SCS=PCS0.22=4.750.22=1.05≈1.18mm；TCS=SCS0.22=1.180.22=0.26≈0.3mm式中：SCS为第二控制筛孔，TCS为第三控制筛孔。 检验参数计算 CA比： $$ CA=\\frac{P_{NMPS/2}-P_{PCS}}{100-P_{NMPS/2}}=0.486$$ 1式中: 为第一控制筛孔的通过率，%。 为最大公称粒径一半的通过率，%。 FAc比： $$F_{ac}=\\frac{P_{Scs}}{P_{Pcs}}=0.525$$ 1式中: 为第二控制筛孔的通过率，%。 FAf比： $$F_{af}=\\frac{P_{Tcs}}{P_{Scs}}=0.506$$ 1式中: 为第三控制筛孔的通过率，%。 以上计算参数参考李安，何昌轩，陈李锋《密级配沥青稳定碎石混合料性能研究》一文对ATB-25柔性基层相关贝雷参数范围的研究，参考范围见表3合成级配检验参数表。 VMA与贝雷参数预测模型建立本文笔者通过福建省8条高速公路采用ATB-25柔性基层沥青路面目标配合比选用的3条线级配线进行分析，并计算CA、FAc、FAf参数以及通过马氏试验计算出VMA如下表4所示。 项目 级配线 31.5 13.2 4.75 1.18 0.3 CA FAc Faf VMA 福泉高速 1# 100 56.4 35 21.5 9.6 0.491 0.614 0.447 12.7 福泉高速 2# 100 50.1 29.9 18.5 8.6 0.405 0.619 0.465 12.5 福泉高速 3# 100 45.2 24.9 15.6 7.6 0.37 0.627 0.487 12.6 龙长高速 1# 100 58.2 33.8 20.4 10.5 0.584 0.604 0.515 12.9 龙长高速 2# 100 53.7 30.9 18.8 9.7 0.492 0.608 0.516 13.1 龙长高速 3# 100 50.8 27 16.6 8.6 0.484 0.615 0.518 13.6 宁武高速 1# 100 57.6 34.7 17.5 8.5 0.54 0.504 0.486 12.9 宁武高速 2# 100 52.6 29.9 15.3 7.7 0.479 0.512 0.503 13.2 宁武高速 3# 100 47.1 24 12.6 6.6 0.437 0.525 0.524 13.5 泉三高速 1# 100 57.7 34.4 17.3 7.9 0.551 0.503 0.457 13.4 泉三高速 2# 100 52.7 29.7 15 6.7 0.486 0.505 0.447 13.8 泉三高速 3# 100 47.8 25 13.5 6.3 0.437 0.54 0.467 13.4 泉夏高速 1# 100 58.1 36.7 19.8 10.4 0.511 0.54 0.525 12.4 泉夏高速 2# 100 50.7 28.9 15.5 8 0.442 0.536 0.516 13.4 泉夏高速 3# 100 46.4 25.1 13.3 6.9 0.397 0.53 0.519 13.7 绕城高速 1# 100 58.4 33.8 19.7 9.5 0.591 0.583 0.482 13 绕城高速 2# 100 52.7 29.2 17.3 8.8 0.497 0.593 0.509 13 绕城高速 3# 100 46.7 24.3 14.9 8 0.42 0.613 0.537 13.7 邵三高速 1# 100 58.2 33.8 20.4 10.5 0.584 0.604 0.515 12.9 邵三高速 2# 100 53.7 30.9 18.8 9.7 0.492 0.608 0.516 13.1 邵三高速 3# 100 50.8 27 16.6 8.6 0.484 0.615 0.518 13.4 永宁高速 1# 100 58.1 34.9 16.3 8.2 0.554 0.467 0.503 12.3 永宁高速 2# 100 53.9 31.1 14.6 7.4 0.495 0.47 0.507 12.8 永宁高速 3# 100 50.9 28.2 13.5 6.9 0.462 0.479 0.511 13.4 影响VMA的因素有非常多，本文主要通过SPSS（Statistical Product and Service Solutions）统计软件建立贝雷参数与VMA的回归模型进行分析，检验预测模型的回归效果。通过实际应用检验回归预测模型的可行性。 通过SPSS非线性回归分析进行模型拟合，因变量为ＶＭＡ，采用Levenverg-Marquardt估计方法，设置平方和收敛性和参数收敛性同为1E-8，计算出迭代数为5.1时连续残差平方和之间的相对减少量最多为 SSCON = 1E-8系统停止运行，如表5所示。 模型公式：1ＶＭＡ=a+b*CA+c*FAC+d*FAF+e*CA*CA+f*FAC*FAC+g*FAF*FAF+h*CA*FAC+j*CA*FAF+i*FAC*FAF 迭代数a 残差平方和 参数 a b c d e f g h j i 1 4130.71 0 0 0 0 0 0 0 0 0 0 1.1 2.034 9.008 11.493 2.41 5.956 -11.144 -27.776 0.02 30.581 -40.877 25.938 2 2.034 9.008 11.493 2.41 5.956 -11.144 -27.776 0.02 30.581 -40.877 25.938 2.1 0.757 17.531 32.642 -42.532 4.73 -9.511 -36.562 -12.172 55.723 -116.771 111.706 3 0.757 17.531 32.642 -42.532 4.73 -9.511 -36.562 -12.172 55.723 -116.771 111.706 3.1 0.278 53.193 22.598 -167.271 13.287 -6.244 23.752 -54.54 92.085 -146.134 193.089 4 0.278 53.193 22.598 -167.271 13.287 -6.244 23.752 -54.54 92.085 -146.134 193.089 4.1 0.264 64.096 15.966 -192.224 4.181 -4.69 36.498 -54.002 99.962 -145.145 207.1 5 0.264 64.096 15.966 -192.224 4.181 -4.69 36.498 -54.002 99.962 -145.145 207.1 5.1 0.264 64.094 15.966 -192.224 4.188 -4.691 36.498 -54.008 99.962 -145.146 207.1 1注：导数是通过数字计算的。 主迭代数在小数左侧显示，次迭代数在小数右侧显示。 PSS统计参数评估值可以分析预测模型影响显著的变量有i、c和j，分别为FAcFAf、FAC、CAFAf，而影响不显著的变量有d,e分别为FAf和CACA（见下表，未调整前参数估计值表），模型的拟合优度检验结果显示Ｒ2为0.937，采用德宾-沃森统计量(Durbin-Watson)检验残差是否存在自相关，其取值范围介于0~4之间，其值越接近2，说明变量之间是相互独立的, 本文拟合优度检验结果Durbin-Watson为２.689. 参数 估计 标准误 95% 置信区间下限 95% 置信区间上限 a 64.096 20.952 19.159 109.033 b 15.966 17.448 -21.457 53.388 c -192.224 30.409 -257.445 -127.002 d 4.181 66.03 -137.44 145.802 e -4.69 7.986 -21.82 12.439 f 36.498 18.385 -2.933 75.929 g -54.002 62.309 -187.641 79.637 h 99.962 13.49 71.029 128.895 j -145.145 26.929 -202.902 -87.387 i 207.1 25.298 152.842 261.359 笔者决定取消FAf和CA*CA变量并重新调整模型，应用SPSS得出参数估计值（见下表，调整后参数估计值表）。 参数 估计 标准误 95% 置信区间下限 95% 置信区间上限 a 67.112 9.472 47.032 87.192 b 10.898 11.994 -14.528 36.324 c -194.906 28.478 -255.276 -134.535 f 37.717 17.286 1.073 74.362 g -50.027 18.199 -88.607 -11.446 h 101.346 12.455 74.942 127.751 j -145.783 20.564 -189.377 -102.189 i 208.213 23.89 157.567 258.858 模型公式为： 1ＶＭＡ＝a+b*CA+c*FAC+f*FAC*FAC+g*FAF*FAF+h*CA*FAC+j*CA*FAF+i*FAC*FAFgmf 调整后模型的拟合优度检验结果显示Ｒ2为0.935，durbin－watson为2.514.说明线性拟合两种方法测量的关系是适合的, 试验数据的误差为随机误差,所得参数估计值的相关性见下表。 a b c f g h j i a 1 -0.604 -0.952 0.789 -0.568 0.774 0.154 0.615 b -0.604 1 0.333 -0.155 0.661 -0.519 -0.799 -0.275 c -0.952 0.333 1 -0.884 0.411 -0.715 0.12 -0.612 f 0.789 -0.155 -0.884 1 -0.038 0.596 -0.239 0.21 g -0.568 0.661 0.411 -0.038 1 -0.154 -0.652 -0.836 h 0.774 -0.519 -0.715 0.596 -0.154 1 -0.097 0.246 j 0.154 -0.799 0.12 -0.239 -0.652 -0.097 1 0.134 i 0.615 -0.275 -0.612 0.21 -0.836 0.246 0.134 1 通过线性回归置性区间采用95%水平值进行方差Anova分析，回归模型F值为318.923, P 值为0.000, 因此笔者采用的这个回归模型是有统计学意义的, 系数检验的结果见下表（Anova检验表）。 模型 平方和 df 均方 F Sig. 1 回归 3.681 1 3.681 318.923 .000b 残差 0.254 22 0.012 总计 3.935 23 根据回归预测模型，因变量VMA，自变量CA、FAC、FAC^2、FAf^2、CAFAC、CAFAf及FAC*FAf得出回归公式。回归公式: 1VMA=67.112+10.898.CA-194.898.FAC+37.717.FAC^2-50.027.FAf^2+101.346.CA.FAC-145.783.CA.FAf+208.213.FAC.FAf 其中R2为0.935，通过案例诊断分析最小残差为-0.00193，预测值为12.9137，最大残差为-0.25949，预测值为13.5685。VMA的实际值和预测值结果诊断见下表（案例诊断表）。 案例数目 标准残差 实际VMA [预测VMA ] 残差 1 -0.172 12.71 12.7266 -0.01851 2 -1.328 12.4 12.5395 -0.14268 3 0.93 12.73 12.6331 0.09986 4 -0.018 12.91 12.9137 [-0.00193] 5 1.152 13.22 13.1008 0.12373 6 -2.415 13.31 13.5685 [-0.25949] 7 -0.516 12.86 12.9137 -0.05542 8 -0.681 13.12 13.1944 -0.07311 9 -1.053 13.36 13.475 -0.11312 10 0.41 13.43 13.3814 0.044 11 0.497 13.81 13.7556 0.05341 12 0.032 13.38 13.3814 0.00345 13 0.698 12.52 12.446 0.07494 14 -0.569 13.32 13.3814 -0.06114 15 1.414 13.81 13.6621 0.15193 16 0.078 13.02 13.0073 0.00836 17 0.725 13.09 13.0073 0.07789 18 0.442 13.71 13.6621 0.04749 19 -0.018 12.91 12.9137 -0.00193 20 1.152 13.22 13.1008 0.12373 21 -0.674 13.31 13.3814 -0.0724 22 -1.386 12.2 12.3524 -0.14888 23 1.61 12.99 12.8202 0.17301 24 -0.309 13.35 13.3814 -0.0332 从案例诊断表可以看出24组级配所预测的VMA与实际VMA均相差不大，回归方程为二次关系，回归效果显著可进行实际工程应用。 因此我们进行沥青混合料配合比设计时，通过选定的级配线计算出贝雷参数再通过回归模型计算出VMA的预测值，进行判断该级配VMA的预测值是否符合公路路面施工技术规范规定最小VMA要求。从而优化沥青混合料配合比设计过程。 结论贝雷法在沥青混合料中的应用，使配合比设计级配的选定有了进一步的认识而更好的优化级配线，笔者建议先计算出CA、FAc、FAf三个参数后再根据已定级配线反算松装密度的K值修正百分比，再评价级配骨架是否紧密且易于施工。 笔者通过SPSS统计软件的非线性回归分析变量参数并采用方差Anovaa方法确定预测公式如下：1VMA=67.112+10.898.CA-194.898.FAC+37.717.FAC^2-50.027.FAf^2+101.346.CA.FAC-145.783.CA.FAf+208.213.FAC.Faf. 通过同行很多研究表明VMA指标更加依赖于集料级配线，且集料公称最大粒径对VMA的影响非常大，本文仅通过ATB-25柔性基层公称最大粒径为26.5mm且不考虑沥青用量影响情况下所进行的回归预测模型的建立，该模型使配合比设计人员在ATB-25沥青混合料级配选线阶段通过计算贝雷参数并预测该级配的VMA值，判断是否合理并作相应调整。通过结合贝雷参数与VMA预测模型的建立使沥青混合料配合计设计更加科学，同时其他类型的沥青混合料配合比设计也可通过此方法建立预测模型。因此非常具有实际工程的应用价值。 参考文献123[1]William R V , William J P, Samuel H C.Bailey method for gradation selection in HMAmixture design[R] .Transportation Research Circular Number E- C044,2002.[2]李安，何昌轩，陈李锋.密级配沥青稳定碎石混合料性能研究[J].公路，2010,(01)[3]谢志华. 谈谈 Durbin-Watson检验[J].预测，1987,(06)","categories":[{"name":"沥青混合料","slug":"沥青混合料","permalink":"http://www.jiangjinchao.pro/categories/沥青混合料/"}],"tags":[{"name":"公路","slug":"公路","permalink":"http://www.jiangjinchao.pro/tags/公路/"},{"name":"沥青混合料","slug":"沥青混合料","permalink":"http://www.jiangjinchao.pro/tags/沥青混合料/"},{"name":"论文","slug":"论文","permalink":"http://www.jiangjinchao.pro/tags/论文/"},{"name":"贝雷参数","slug":"贝雷参数","permalink":"http://www.jiangjinchao.pro/tags/贝雷参数/"},{"name":"VMA","slug":"VMA","permalink":"http://www.jiangjinchao.pro/tags/VMA/"},{"name":"模型","slug":"模型","permalink":"http://www.jiangjinchao.pro/tags/模型/"},{"name":"SPSS","slug":"SPSS","permalink":"http://www.jiangjinchao.pro/tags/SPSS/"}]},{"title":"水泥稳定碎石及级配碎石生产拌和楼标定","slug":"水泥稳定碎石及级配碎石生产拌和楼标定","date":"2012-12-04T16:00:00.000Z","updated":"2018-04-06T08:42:55.170Z","comments":true,"path":"/2012/水泥稳定碎石及级配碎石生产拌和楼标定.html","link":"","permalink":"http://www.jiangjinchao.pro/2012/水泥稳定碎石及级配碎石生产拌和楼标定.html","excerpt":"","text":"目标通过各料仓在规定时间（如3min）流出的料（单档料）与理论上应流出的质量比较。在调速R值，使其满足碎石允许偏差为理论质量的±3%，水泥以实际滴定的剂量为准。要求允许偏差小于±1%。R值调整公式（非线性）设计质量÷实际质量×R值=新R值（经验公式）R值一经确定不宜随意调动，否则会使配料精度变差，导致级配失调。电脑的屏幕显示可以跟配合比一样，但可以通过改变R值来改变料的流量。 案例沈海复线水稳1号拌和楼的生产能力是500T/h为例. 方法 注拌和楼的转速不能超过1500转/分，否则料门往上提。 拌和楼配合比的单位符号为‰，如500‰代表配合比为50%，总产量单位为吨/小时，R的单位为1%，即100代表1，当生产输入相应的配比及R值后，会显示出相应的转速。如总产量为500T/h ，配合比为25%，R值为761.则转速N=Q×R=500×（250÷1000）×（761÷100）=951.25≈951。 用转载机和一辆货车配合。采用装载机接料，先按经验固定设置一个R值，以3min为准称取单档料的输出量进行过磅。看是否与理论相符合，不符合则通过 （设计质量÷实际质量×R值=新R值）来调整。重新进行设定R值，再进行过磅。计算没分钟的各仓比例对照配合比的比例通过确定R值后，关键步骤：试拌混合料，开动拌和机，突然停机，在传送带上截取混合料进行筛分试验，当结果不乐观时，进行微调比例，以保证级配符合设计要求。","categories":[{"name":"技术文档","slug":"技术文档","permalink":"http://www.jiangjinchao.pro/categories/技术文档/"}],"tags":[{"name":"拌和楼标定","slug":"拌和楼标定","permalink":"http://www.jiangjinchao.pro/tags/拌和楼标定/"},{"name":"水泥稳定碎石","slug":"水泥稳定碎石","permalink":"http://www.jiangjinchao.pro/tags/水泥稳定碎石/"}]},{"title":"体积法预估最佳沥青用量在混合料配合比设计中的应用","slug":"体积法预估最佳沥青用量在混合料配合比设计中的应用 ","date":"2012-10-02T16:00:00.000Z","updated":"2018-04-17T00:27:27.624Z","comments":true,"path":"/2012/体积法预估最佳沥青用量在混合料配合比设计中的应用 .html","link":"","permalink":"http://www.jiangjinchao.pro/2012/体积法预估最佳沥青用量在混合料配合比设计中的应用 .html","excerpt":"1出版源-《公路工程》第37卷，第5期，2012年10月 文章编号:1674—0610( 2012) 05—0001—04 内容摘要 本文选取福建路桥建设有限公司从2002年福宁高速公路B2段至2010年永宁高速公路8条高速公路、8个沥青混合料类型及20多个热拌沥青混合料配合比设计中最佳沥青用量的选定进行跟踪与剖析，对热拌沥青混合料配合比设计中如何使用体积法预估沥青用量从理论上做了详细阐述，并经过京珠复线湖南桂武高速公路路面34合同段superpave-25沥青混合料下面层目标配合比设计进行了的检验，证明该方法是准确可行的。 前言公路路面工程使用沥青混合料柔性路面，混合料中沥青用量的大小对路用性能有非常大的的影响。当沥青用量过大时易导致成本提高、泛油和车辙，沥青用量过小时易出现耐久性、水损坏和沥青老化等现象，从而降低路面使用寿命提高养护成本。","text":"1出版源-《公路工程》第37卷，第5期，2012年10月 文章编号:1674—0610( 2012) 05—0001—04 内容摘要 本文选取福建路桥建设有限公司从2002年福宁高速公路B2段至2010年永宁高速公路8条高速公路、8个沥青混合料类型及20多个热拌沥青混合料配合比设计中最佳沥青用量的选定进行跟踪与剖析，对热拌沥青混合料配合比设计中如何使用体积法预估沥青用量从理论上做了详细阐述，并经过京珠复线湖南桂武高速公路路面34合同段superpave-25沥青混合料下面层目标配合比设计进行了的检验，证明该方法是准确可行的。 前言公路路面工程使用沥青混合料柔性路面，混合料中沥青用量的大小对路用性能有非常大的的影响。当沥青用量过大时易导致成本提高、泛油和车辙，沥青用量过小时易出现耐久性、水损坏和沥青老化等现象，从而降低路面使用寿命提高养护成本。 体积参数设计沥青混合料配合比时应先确定合理的设计空隙率（或空气体积率）VV（%）（即压实沥青混合料中孔隙占沥青混合料总体积的百分率），再通过设计空隙率及矿料的公称最大粒径（mm）确定最小矿料间隙率VMA（%）（矿料表面沥青膜厚度的表征）。而压实沥青混合料中的体积由矿料实体+闭口体积①、矿料表面开口空隙未吸收沥青的毛体积②、矿料表面开口空隙吸收沥青的体积③、形成结构沥青的有效沥青体积④和空气体积所组成⑤。 可以看出理论沥青混合料的配合比设计最佳沥用量，其实，就是满足设计空隙率及最小VMA条件下的矿料表面开口空隙吸收的沥青的体积③+形成结构沥青的有效沥青体积的体积之和④。在单体体积中只须知道③、④的体积再乘以沥青相对密度便能计算出混合料中沥青用量。 集料毛体积Vsb为表面轮廓线范围内的全部毛体积，包含了材料实体、开口及闭口孔隙。沥青混合料中有效体积Vse(采用有效相对密度计算)包括材料实体体积与表面空隙没有被沥青填充的体积。因此矿料表面开口空隙吸收沥青的体积③Vba为Vsb-Vse之差。形成结构沥青的有效沥青体积④Vbe为矿料间隙率VMA-空隙率VV之差。最终单位体积沥青混合料的沥青用量：$$Pb^1 =(Vb_a+Vb_e)* γ_b$$ 实例计算配合比设计阶段我们要进行原材料密度试验同时设计优化矿料级配确实各档原材料的比例。通过沥青混合料的类型设计空隙率及选择VMA。 原材料 原材料比例（%） 毛体积相对密度 表观相对密度 1#料 24 2.678 2.711 2#料 35 2.665 2.704 3#料 9 2.631 2.695 4#料 30 2.588 2.662 矿粉 2 2.605 2.605 假设1m3沥青混合料，设计空隙率Va=4.5%；VMAmin=13.0%；沥青相对密度γb=1.028。计算步骤如下: 矿料料合成毛体积密度:$$ Gsb =\\frac{100}{\\frac{p_1}{Gsb_1}+\\frac{p_2}{Gsb_2}+…+\\frac{p_n}{Gsb_n}} =\\frac{100}{\\frac{24}{2.678}+\\frac{35}{2.665}+\\frac{9}{2.631}+\\frac{30}{2.588}+\\frac{2}{2.605}} =2.640 $$ 矿料料合成表观密度:$$ Gsa =\\frac{100}{\\frac{p_1}{Gsa_1}+\\frac{p_2}{Gsa_2}+…+\\frac{p_n}{Gsa_n}} =\\frac{100}{\\frac{24}{2.711}+\\frac{35}{2.704}+\\frac{9}{2.695}+\\frac{30}{2.662}+\\frac{2}{2.605}} =2.690 $$ 确定矿料的有效相对密度:$$ G_{se} =C.G_{sa}+(1-C).G_{sb}=2.677 $$$$ C =0.033{W_x}^2-0.2936W_x+0.9339=0.744 $$$$ W_x =(\\frac{1}{G_{sb}}- \\frac{1}{G_{sa}})*100 =0.704$$ 有效沥青体积$$ V_{be}=VMA-VV=0.085 $$ 1m^3 矿料体积$$ V_{sb}=1-VMA=0.87 $$ 1m^3矿料质量（kg）$$ M_s=V_{sb}.G{sb}.1000 =2296.8{kg} $$ 有效矿料体积$$ V_{se}=\\frac{M_s}{V_{se}*1000} =0.858 $$ 矿料表面开口空隙吸收沥青的体积$$ V_{ba}=V_{sb}-V_{se}=0.012 $$ 计算沥青用量Mb＇（kg）$$ {M_b}^`=(V_{ba}+V_{be}).r_b.1000=99.72{kg} $$ 1m^3混合料质量（kg）$$ P_{mm}={P_b}^`+P_s=2396.5{kg}$$ 计算沥青用量Pb＇（%）（占混合料总量的百分比）=Mb`/P100=99.7/2396.5100=4.16% 1最后，还可以计算出沥青混合料试件毛体积相对密度γf=2.396；计算最大理论相对密度Gmm=2.509；饱和度VFA=65.4%等。 计算沥青用量与最佳沥青用量比较沥青配合比设计中通过体积法上述公式可以计算预估沥青用量。同时，笔者通过2002年福宁高速公路B2段至2010年永宁高速公路8条高速公路、8个沥青混合料类型及20个热拌沥青混合料配合比设计中所确定的最佳沥青用量与体积法计算沥青用量进行了比较。如下图： 路段 混合料类型 γsb γsa γse VMA(%) (VV)% 最佳沥青用量(%) 计算沥青用量(%) 油量偏差(%) 邵三高速 ATB-25 2.638 2.713 2.669 13 5 3.8 3.87 -0.07 永宁高速B2 ATB-25 2.645 2.706 2.668 13 5.1 3.7 3.7 0 龙长高速B4 ATB-25 2.638 2.713 2.669 13 5 3.8 3.89 -0.09 泉厦高速 ATB-25 2.641 2.683 2.664 13.2 4.8 3.9 3.94 -0.04 福泉高速 ATB-25 2.603 2.651 2.628 13.3 5.1 3.9 3.96 -0.06 绕城高速 ATB-25 2.644 2.693 2.666 13 4.7 3.9 3.87 0.03 邵三高速 AC-20 2.622 2.682 2.653 13.9 4.7 4.4 4.45 -0.05 泉厦高速 AC-20 2.636 2.684 2.672 13.8 4.6 4.5 4.49 0.01 福泉高速 AC-20 2.597 2.651 2.636 14 4.8 4.6 4.61 -0.01 永宁高速B4 AC-20 2.65 2.701 2.688 14 4.6 4.7 4.63 0.07 京福高速 AC-20 2.643 2.663 2.646 13.5 4.1 4.2 4.2 0 绕城高速 AC-20 2.639 2.696 2.68 13.8 4.5 4.6 4.58 0.02 粤赣高速 AC-20 2.707 2.759 2.746 13.5 4.2 4.4 4.47 -0.07 泉三高SM4 AC-20 2.675 2.725 2.712 13.9 4.7 4.4 4.44 -0.04 邵三高速 AC-16 2.605 2.668 2.649 13.8 4.5 4.5 4.69 -0.19 绕城高速 AC-16 2.625 2.683 2.666 14.8 4.4 5.1 5.11 -0.01 京福高速 AK-16 2.862 2.917 2.869 14.8 4.5 4.3 4.24 0.06 龙长高速B4 AC-13 2.614 2.667 2.653 14.4 5 4.7 4.67 0.03 泉三高速SM4 AC-13 2.689 2.744 2.729 14.8 4.8 4.8 4.81 -0.01 泉厦高速 SMA-13 2.65 2.688 2.68 16.5 3.7 6 6.02 -0.02 福泉高速 SMA-13 2.586 2.646 2.628 16.6 3.8 6.2 6.33 -0.13 邵三高速 AC-25 2.625 2.684 2.667 13.1 4.7 4 4.22 -0.22 京福高速 AC-25 2.624 2.662 2.63 13.4 4.1 4.1 4.12 -0.02 粤赣高速 ATB-30 2.715 2.76 2.742 12.7 5.4 3.2 3.3 -0.1 通过图表，我们可以得出体积法计算的沥青用量与混合料类型关系不大，而矿料合成毛体积相对密度及矿料合成表观相对密度对计算预估沥青用量有直接的影响。最大偏差为邵三高速公路（AC-25）体积法计算的沥青用量为4.22%，最佳沥青用量为4.00%，偏差-0.22%。其他配合比总平均偏差为-0.04%。因此，沥青混合料配合比设计中应用体积法预估沥青用量适用大部分热拌沥青混合料配合比设计。由于地区气候的不同对最佳沥青用量的选定存在差异。还须对计算的沥青用量与最佳沥青用量建立数学模型确定回归议程式。 回归方程式的确立对上述数据进行建模（最大二乘法），得出本检测中心使用体积法的经验公式，下表可以看出，本次样本数量为26组，样本均方差：0.4324；回归均方差：10.5331；可决系数：0.9871；F检验值为1836.0182，当显著性水平0.01的F临界值：7.8229，F值检验结论为回归方程线性关系特别显著；T检验值为42.8488，当显著性水平0.01的T临界值2.7969，T值检验结论为回归系数特别显著大于0。所以回归方程特征呈线性关系。 最终的经验公式为：Pb=0.996 Pb’-0.0259，Pb’为体积法计算的理论沥青用量，Pb为修正后的预估沥青用量。 检验计算笔者通过桂武高速公路路面34合同段superpave-25沥青混合料下面层目标配合比设计对体积法预估沥青用量进行检验,superpave-25沥青混合料下面层目标配合比设计通过委托江苏省交通规划设计院股份有限公司工程质量检测中心进行，依据美国superpave沥青混合设计标准进行设计，并依据我国《公路路面施工技术规范》（JTG F40-2004）的要求进行马歇尔试验验证，在工程设计级配范围内设计供优选用的1~3组不同的矿料级配，最终确定一条设计级配线，其中矿料合成毛体积相对密度γsb=2.663；矿料合成表观相对密γsa=2.706；矿料有效密度γse=2.698。设计空隙率VV=4.0%；最小VMA=12.1%；沥青相对密度γb=1.032。在选定设计级配的基础上，以3.5、4.0%、4.5%和5.0%四种沥青用量进行试验，确定沥青用量3.9%做为最佳沥青用量。 总结 用体积法计算出预估沥青用量通过修正后的预估沥青用量与最佳沥青相近，准确性较高；避免了以往经验或已建类似工程所带来的误差。 体积法计算出的参数，可以做为试验人员配合比设计初的参考值，当试验出来结果与理论计算的结果相差较大时，应找出原因使配合比设计过程当中能进行方面参考。 矿料合成毛体积相对密度及合成相对表观密度对计算预估沥青用量有直接的影响，应提高集料密度试验的准确性。 多孔性集料的配合比设计未验证。 123参考文献：中华人民共和国交通部. 《公路沥青路面施工技术规范》JTG F40-2004 ［S］.北京:人民交通出版社,2004 《公路沥青路面施工技术规范实施手册》 李福普 沈金安 编著 北京：人民交通出版社,2004","categories":[{"name":"配合比","slug":"配合比","permalink":"http://www.jiangjinchao.pro/categories/配合比/"}],"tags":[{"name":"公路","slug":"公路","permalink":"http://www.jiangjinchao.pro/tags/公路/"},{"name":"沥青","slug":"沥青","permalink":"http://www.jiangjinchao.pro/tags/沥青/"},{"name":"配合比设计","slug":"配合比设计","permalink":"http://www.jiangjinchao.pro/tags/配合比设计/"},{"name":"沥青混合料","slug":"沥青混合料","permalink":"http://www.jiangjinchao.pro/tags/沥青混合料/"},{"name":"体积法","slug":"体积法","permalink":"http://www.jiangjinchao.pro/tags/体积法/"},{"name":"论文","slug":"论文","permalink":"http://www.jiangjinchao.pro/tags/论文/"}]},{"title":"基于Excel VBA应用三次样条插值法开发CBR曲线","slug":"基于Excel VBA应用三次样条插值法开发CBR曲线","date":"2010-07-29T01:06:05.000Z","updated":"2018-04-13T07:41:29.546Z","comments":true,"path":"/2010/基于Excel VBA应用三次样条插值法开发CBR曲线.html","link":"","permalink":"http://www.jiangjinchao.pro/2010/基于Excel VBA应用三次样条插值法开发CBR曲线.html","excerpt":"说明CBR又称加州承载比，是California Bearing Ration的缩写，由美国加利福尼亚州公路局首先提出来，用于评定路基土和路面材料的强度指标。在国外多采用CBR作为路面材料和路基土的设计参数。 我国现行沥青和水泥混凝土路面设计规范，对路面、路基的设计参数系采用回弹模量指标，而在境外修建的公路工程多采用CBR指标。为了进一步积累经验用于实际，以促进国际学术交流，参考了国内外的情况，将CBR指标列入《公路路基设计规范》（JTG D30-2004）和《公路路基施工技术规范》（JTG F10-2006），作为路基填料选择的依据。 CBR数据是根据试验检测得出系列结果,以贯入量L为纵坐标,以单位压力P为横坐标,在直角坐标系上标出这些点,根据点的位置,用模糊数学(线形回归)的理论,推出曲线的公式,根据公式,将这些点绘制出一个圆滑的关系曲线,必要时进行原点修正。然后就可以根据曲线得出贯入量L=2.5mm 和贯入量L=5.0mm 时候单位压力P的数值了。","text":"说明CBR又称加州承载比，是California Bearing Ration的缩写，由美国加利福尼亚州公路局首先提出来，用于评定路基土和路面材料的强度指标。在国外多采用CBR作为路面材料和路基土的设计参数。 我国现行沥青和水泥混凝土路面设计规范，对路面、路基的设计参数系采用回弹模量指标，而在境外修建的公路工程多采用CBR指标。为了进一步积累经验用于实际，以促进国际学术交流，参考了国内外的情况，将CBR指标列入《公路路基设计规范》（JTG D30-2004）和《公路路基施工技术规范》（JTG F10-2006），作为路基填料选择的依据。 CBR数据是根据试验检测得出系列结果,以贯入量L为纵坐标,以单位压力P为横坐标,在直角坐标系上标出这些点,根据点的位置,用模糊数学(线形回归)的理论,推出曲线的公式,根据公式,将这些点绘制出一个圆滑的关系曲线,必要时进行原点修正。然后就可以根据曲线得出贯入量L=2.5mm 和贯入量L=5.0mm 时候单位压力P的数值了。 介绍了CBR制图基本情况，在试验检测中对L-P分析曲线图常遇到以下问题： L-P分析曲线的制图及数据精确度？目前，试验检测工程师对L-P分析曲线的绘制都是应用Excel的制图功能实现的，但Excel制图中存在一个问题就是贯入量L=2.5mm和贯入量L=5.0mm所对应P的数据无法直接计算出来，还是要用内插计算（已影响精度）。如果个别数据不是很理想时，可能出现“弹簧”现象而且曲线也不够平滑。 什么是原点修正，如何在图中表示出来？下图曲线1是适合的，曲线2在接近原点的一段出现凹曲线,这是由于试验过程中由于试件表面不平贯入阻力没有成比例的增加造成的。对此需要进行修正。修正方法:在变曲率点引一切线,与纵坐标交与O′点,O′即为修正后的原点。 什么是三次样条插值法,浏览《三次样条函数计算》或网络查找. 以下是基于Excel VBA 应用三次样条插值法原理开发的L-P曲线图，能够自动计算曲线任意点对应的x,y值，同时自动计算出贯入量L=2.5mm 和贯入量L=5.0mm 时候单位压力P的精确数值。曲线稳定性与光滑性好。 VBA代码： 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194195196197198199200201202203204205206207208209210211212213214215216217218219220221222223224225226227228229230231232233234235236237238239240241242243244245246247248249250251252253254255256257258259260261262263264265266267268269270Public x() As DoublePublic y() As DoublePublic N As IntegerPublic yp1, ypn As DoublePublic y2() As Double '初始化数据Sub initdata()Dim i As Integer'判断点数N = [b1]'定义动态数组大小ReDim x(N)ReDim y(N)ReDim y2(N)'赋值For i = 1 To N x(i) = Cells(i + 2, 1) y(i) = Cells(i + 2, 2)Next i'头尾点的一介导数'yp1 = (y(2) - y(1)) / (x(2) - x(1))'ypn = (y(N) - y(N - 1)) / (x(N) - x(N - 1))yp1 = 0ypn = 0End Sub'求二阶导Sub spline()Dim u(500) As DoubleDim aaa, sig, bbb, ccc, p, qn, un As DoubleDim i, k As IntegerIf yp1 &gt; 9.9E+29 Then y2(1) = 0 u(1) = 0Else y2(1) = -0.5 aaa = (y(2) - y(1)) / (x(2) - x(1)) u(1) = (3 / (x(2) - x(1))) * (aaa - yp1)End IfFor i = 2 To N - 1 sig = (x(i) - x(i - 1)) / (x(i + 1) - x(i - 1)) p = sig * y2(i - 1) + 2 y2(i) = (sig - 1) / p aaa = (y(i + 1) - y(i)) / (x(i + 1) - x(i)) bbb = (y(i) - y(i - 1)) / (x(i) - x(i - 1)) ccc = x(i + 1) - x(i - 1) u(i) = (6 * (aaa - bbb) / ccc - sig * u(i - 1)) / pNext iIf yp1 &gt; 9.9E+29 Then qn = 0 un = 0Else qn = 0.5 aaa = ypn - (y(N) - y(N - 1)) / (x(N) - x(N - 1)) un = (3 / (x(N) - x(N - 1))) * aaaEnd Ify2(N) = (un - qn * u(N - 1)) / (qn * y2(N - 1) + 1)For k = N - 1 To 1 Step -1 y2(k) = y2(k) * y2(k + 1) + u(k)Next kEnd SubSub splint(px As Double, py As Double)Dim k, klo, khi As IntegerDim h, a, b, aaa, bbb, q, qq As Doubleklo = 1khi = N'二分法L1: If khi - klo &gt; 1 Then k = Int((khi + klo) / 2) If x(k) &gt; px Then khi = k Else klo = k End If GoTo L1 End Ifh = x(khi) - x(klo)If h = 0 Then Exit SubEnd Ifa = (x(khi) - px) / hb = (px - x(klo)) / haaa = a * y(klo) + b * y(khi)If a = 0 Then q = 0Else If a &gt; 0 Then q = Exp(3 * Log(a)) Else q = -Exp(3 * Log(-a)) End IfEnd IfIf b = 0 Then qq = 0Else If b &gt; 0 Then qq = Exp(3 * Log(b)) Else qq = -Exp(3 * Log(-b)) End IfEnd Ifbbb = (q - a) * y2(klo) + (qq - b) * y2(khi)py = aaa + bbb * (h * h) / 6End Sub'求值Sub caldata()Dim i As IntegerDim j As IntegerDim z As IntegerDim MY_Y As DoubleDim q As DoubleDim PList() As DoubleCall initdataCall splineReDim PList((N - 1) * 40 + 1, 4)For i = 1 To N - 1 PList((i - 1) * 40 + 1, 1) = x(i) PList((i - 1) * 40 + 1, 2) = y(i) If i = 1 Then PList((i - 1) * 40 + 1, 3) = 0 Else PList((i - 1) * 40 + 1, 3) = (PList((i - 1) * 40 + 1, 2) - PList((i - 1) * 40, 2)) / (PList((i - 1) * 40 + 1, 1) - PList((i - 1) * 40, 1)) End If PList((i - 1) * 40 + 1, 4) = y2(i) For j = 2 To 40 PList((i - 1) * 40 + j, 1) = PList((i - 1) * 40 + j - 1, 1) + (x(i + 1) - x(i)) / 40 Call splint(PList((i - 1) * 40 + j, 1), MY_Y) PList((i - 1) * 40 + j, 2) = MY_Y PList((i - 1) * 40 + j, 3) = (PList((i - 1) * 40 + j, 2) - PList((i - 1) * 40 + j - 1, 2)) / (PList((i - 1) * 40 + j, 1) - PList((i - 1) * 40 + j - 1, 1)) PList((i - 1) * 40 + j, 4) = (PList((i - 1) * 40 + j, 3) - PList((i - 1) * 40 + j - 1, 3)) / (PList((i - 1) * 40 + j, 1) - PList((i - 1) * 40 + j - 1, 1)) Next j Next i'最后一点PList((N - 1) * 40 + 1, 1) = x(N)PList((N - 1) * 40 + 1, 2) = y(N)PList((N - 1) * 40 + 1, 3) = 0PList((N - 1) * 40 + 1, 4) = y2(N)'计算2.5mm的P值Call splint(2.5, MY_Y)Cells(1, 8) = MY_Y'计算5.0mm的P值Call splint(5, MY_Y)Cells(1, 10) = MY_YRange(\"K:L\").SelectSelection.ClearContentsRange(\"a3\").SelectFor i = 1 To (N - 1) * 40 + 1 Cells(i + 2, 11) = PList(i, 1) Cells(i + 2, 12) = PList(i, 2)Next iRange(\"e4:h4\").SelectSelection.ClearContentsRange(\"a3\").SelectDim la, lb As IntegerFor i = 2 To (N - 1) * 40 - 1 '查找变曲率点 If PList(i, 4) = 0 Then 'x Cells(4, 5) = PList(i, 1) 'y Cells(4, 6) = PList(i, 2) 'y' Cells(4, 7) = PList(i, 3) 'y'' Cells(4, 8) = PList(i, 4) '变曲率点致O'直线参数，y=ax+b b=lb,a=la lb = PList(i, 2) - PList(i, 1) * PList(i, 3) la = lb / PList(i, 3) Exit For Else If PList(i, 4) * PList(i + 1, 4) &lt; 0 Then If Abs(PList(i, 4)) &lt; Abs(PList(i + 1, 4)) Then Cells(4, 5) = PList(i, 1) Cells(4, 6) = PList(i, 2) Cells(4, 7) = PList(i, 3) Cells(4, 8) = PList(i, 4) lb = PList(i, 2) - PList(i, 1) * PList(i, 3) la = lb / PList(i, 3) Exit For Else Cells(4, 5) = PList(i + 1, 1) Cells(4, 6) = PList(i + 1, 2) Cells(4, 7) = PList(i + 1, 3) Cells(4, 8) = PList(i + 1, 4) lb = PList(i + 1, 2) - PList(i + 1, 1) * PList(i + 1, 3) la = lb / PList(i + 1, 3) Exit For End If End If End IfNext i'修正后2.5mm,5.0mm的P值Call splint(2.5 - la, MY_Y)Cells(1, 8) = MY_YCall splint(5 - la, MY_Y)Cells(1, 10) = MY_Y'图表美化，不用了解Call Macro1End SubSub Macro1() Dim a, b, c, d, e a = Range(\"f1\") b = Range(\"d1\") c = Range(\"e18\") d = Range(\"f18\") ActiveSheet.ChartObjects(\"图表 7\").Activate ActiveChart.Axes(xlValue).Select With ActiveChart.Axes(xlValue) If a - (a + b) / 10 &lt;= 0 Then .MinimumScale = 0 Else .MinimumScale = a - (a + b) / 10 .MaximumScale = Int(b + (a + b) / 10) .MinorUnit = ((a + b) / 20) .MajorUnit = ((a + b) / 10) .Crosses = xlAutomatic .ReversePlotOrder = True .ScaleType = xlLinear .DisplayUnit = xlNone End With ActiveChart.Axes(xlCategory).MajorGridlines.Select With ActiveChart.Axes(xlCategory) If c - (c + d) / 10 &lt;= 0 Then .MinimumScale = 0 Else .MinimumScale = c - (c + d) / 10 &lt; 0 .MaximumScale = Int(d + (c + d) / 10) .MinorUnit = (c + d) / 20 .MajorUnit = (c + d) / 10 .Crosses = xlAutomatic .ReversePlotOrder = False .ScaleType = xlLinear .DisplayUnit = xlNone End WithEnd Sub 1作者：江锦朝，如果需要文件留下Email,希望与大家交个朋友。","categories":[{"name":"VBA","slug":"VBA","permalink":"http://www.jiangjinchao.pro/categories/VBA/"}],"tags":[{"name":"Excel","slug":"Excel","permalink":"http://www.jiangjinchao.pro/tags/Excel/"},{"name":"VBA","slug":"VBA","permalink":"http://www.jiangjinchao.pro/tags/VBA/"},{"name":"试验","slug":"试验","permalink":"http://www.jiangjinchao.pro/tags/试验/"},{"name":"函数","slug":"函数","permalink":"http://www.jiangjinchao.pro/tags/函数/"},{"name":"CBR","slug":"CBR","permalink":"http://www.jiangjinchao.pro/tags/CBR/"},{"name":"三次样条插值法","slug":"三次样条插值法","permalink":"http://www.jiangjinchao.pro/tags/三次样条插值法/"}]},{"title":"Excel绘制泰勒曲线级配图","slug":"Excel绘制泰勒曲线级配图","date":"2010-07-29T01:06:05.000Z","updated":"2018-04-03T15:40:46.581Z","comments":true,"path":"/2010/Excel绘制泰勒曲线级配图.html","link":"","permalink":"http://www.jiangjinchao.pro/2010/Excel绘制泰勒曲线级配图.html","excerpt":"前言矿料级配在公路工程中有着重要的应用，合理设置不同矿料间的比例对工程质量、成本等方面有着很大影响。因此，在配合比计划阶段经常需要先绘制出合成级配图，为分析配料比例提供详细的信息。我们知道现行技术规范规定级配图的绘制必须采用泰勒曲线。而泰勒曲线的特点是X轴（孔径）是不等距的，且需要按某一个规律变化间距。实际上我们需要在图表X轴上显示的是筛孔孔径（如：31.5、26.5、19和16等）。这为我们在绘制级配图时制造了困难。 朋友和同事经常问我要怎样才能准确绘制级配图，今天我把主要绘制步骤和小技巧写出来，供大家参考。所谓条条大路通罗马，大家有更好方法可以一起分享！","text":"前言矿料级配在公路工程中有着重要的应用，合理设置不同矿料间的比例对工程质量、成本等方面有着很大影响。因此，在配合比计划阶段经常需要先绘制出合成级配图，为分析配料比例提供详细的信息。我们知道现行技术规范规定级配图的绘制必须采用泰勒曲线。而泰勒曲线的特点是X轴（孔径）是不等距的，且需要按某一个规律变化间距。实际上我们需要在图表X轴上显示的是筛孔孔径（如：31.5、26.5、19和16等）。这为我们在绘制级配图时制造了困难。 朋友和同事经常问我要怎样才能准确绘制级配图，今天我把主要绘制步骤和小技巧写出来，供大家参考。所谓条条大路通罗马，大家有更好方法可以一起分享！ 绘制前准备工作准备好矿料筛分数据（以下沥青矿料数据），如图: 根据上面的基础数据，我们可以绘制下面出矿料合成级配图 转换孔径数据。为了绘制不等距的X轴，我们先将孔径数据转泰勒曲线系数（规程已有转好系数），表中的单元格C2就是转好的。 建立一个辅助线，先在表上填写有关数据，我在单元格C7：O7中全部填0，具体作用后面会详细说明。 绘制图表绘制基础图表拉选单元格C2：O6,并在菜单栏中的[插入]→[图表]选项,打开[图表向导]对话框。选择[XY散点图]在图表类型中的[平滑散点图]，点击[完成]，这时基础图表已完成，如图 隐藏图表刻度范围选中图表，然后右击鼠标，在弹出的快捷菜单中选择[图表选项]选项，打开[图表选项对话框]，选择其中的[坐标轴]选项卡，取消[数值(X)轴]选项,最后[确定]。如图: 调整图表Y轴的刻度范围。双击图表的Y轴，打开[坐标轴格式]对话框，选择[刻度]选项卡，设置Y坐标轴的刻度范围,最后[确定]。如图： 增加辅助X轴在图表上右击选择[数据源]在[系列]中添加[名称]：‘辅助X轴’；[X值]选择单元格C2：O2(泰勒曲线）；[Y值]选择单元格C7：O7(辅助线），最后[确定]，如图： 在[图表]工具栏中选择“系列‘辅助X轴’”，然后单击[数据系列格式]按钮。如图： 选择[误差线Y]，显示方式为[正偏差]，误差量选择[定值]，参数设100（因为X轴最大值设为100，也理解通过率100）。选择[图案]，[线形]选‘无’，[数据标记]选‘无’。如图： 选择[数据标志]，[数据标签包括]选‘Y值’，最后按[确定]键。 关联数据标志在我们看到的图表如下，X轴全部是0值，因为报表上辅助线上的值都是0值，而最终我们希望得到的是实际的筛孔孔径（如：31.5）。因此，需求将X轴的数据标示和单元格进行关联，选择第二个数据标志，在编辑栏中输入“=Sheet1!$O$1”。如图： 在[图表]工具栏中选择“系列‘辅助X轴’数据标志”，然后单击[数据系列格式]按钮。选择[对齐]，[标签位置]选‘下方’；[方向]选文本方向为90度。按[确定]键，如图： 其他孔径的关联数据标志，重复上面的步骤，依次将其他数据标志和单元格进行关联，实现X轴为实际的筛孔孔径。 美化图表适当调整图表的大小，查看最后的图表效果如下图： 最后,矿料合成级配图与Excel的规划求解功能（具体看“VBA调用‘规划求解’自动合成矿料级配”）结合使用，能大大提高你的工作效率。成为你工作中非常实用的工具。","categories":[{"name":"Excel","slug":"Excel","permalink":"http://www.jiangjinchao.pro/categories/Excel/"}],"tags":[{"name":"Excel","slug":"Excel","permalink":"http://www.jiangjinchao.pro/tags/Excel/"},{"name":"试验","slug":"试验","permalink":"http://www.jiangjinchao.pro/tags/试验/"},{"name":"级配","slug":"级配","permalink":"http://www.jiangjinchao.pro/tags/级配/"},{"name":"泰勒曲线","slug":"泰勒曲线","permalink":"http://www.jiangjinchao.pro/tags/泰勒曲线/"}]},{"title":"利用VBA+加载宏制作‘奇进偶不进’修约函数","slug":"利用VBA+加载宏制作‘奇进偶不进’修约函数","date":"2010-07-29T01:06:05.000Z","updated":"2018-04-03T15:40:58.415Z","comments":true,"path":"/2010/利用VBA+加载宏制作‘奇进偶不进’修约函数.html","link":"","permalink":"http://www.jiangjinchao.pro/2010/利用VBA+加载宏制作‘奇进偶不进’修约函数.html","excerpt":"前言以前就有不少朋友问我试验上经常用到的奇进偶不进在Excel中怎么处理，方法比较多。常见就是在单元格中直接编写判断语句（IF). 函数如下： 或","text":"前言以前就有不少朋友问我试验上经常用到的奇进偶不进在Excel中怎么处理，方法比较多。常见就是在单元格中直接编写判断语句（IF). 函数如下： 或 但以上代码有几个缺点： 代码偏长修改容易出错； 无法像自带函数（sum、abs)简易通用； 因为Excel的BUG原因，理论上数字=0 有时会得到0.000000143056 所以会出现修约有误现象，本人以前就遇过代码没错，结果出错的现象。 今天花点时间写个，像sum,abs，round等函数一样调用简单方便而且各个报表都能通用，参数修改方便不易出错。如图： 首先了解下加载宏.加载宏可以扩展EXCEL的功能，将代码写在加载宏中和写在普通的工作簿中相比，有如下优点： 加载宏对所有打开的EXCEL文件都生效。普通工作簿的代码一般只在特定的工作簿中才生效。 加载宏不受宏安全级的限制，也不会有宏运行的提示。即使将安全级设为“非常高”，加载宏就象EXCEL本身固有的功能一样工作。同样，它也不会被按住的Shift屏蔽。 加载宏在运行时其工作簿窗口是隐藏的，因此普通用户并不会感觉到它的存在。 加载宏函数似乎是制作加载宏中最简单的，通常它只需要在模块中写一段Function代码，它就会和EXCEL自身的函数一样使用，并且出现在“插入函数”对话框的列表中。因此今天我们就用Function来实现上述功能。 编写代码在VBA代码编辑窗口中，点击菜单命令“插入→模块”，得到“模块1”编辑窗口， 在其中输入如下自定义函数的代码，如图所示。 1234567891011121314151617181920Function Mround(ByVal X As Double, Optional ByVal Factor As Double = 1) As DoubleDim Temp As Double, FixTemp As Double'X 要修约的数'Factor 保留小数位数(如:1000，100，10，1，0.1,0.01)If (Factor &gt; 1 And Factor Mod 10 &lt;&gt; 0) Or (Factor &lt; 1 And 1 / Factor Mod 10 &lt;&gt; 0) Then Factor = Application.InputBox(Prompt:=\"输入正确的参数（如:100，10，1，0.1,0.01）：\", Type:=1)If Factor &lt;&gt; 0 Then Factor = 1 / Factor Temp = X * Factor FixTemp = Fix(Temp + 0.5 * Sgn(X)) If Temp - Int(Temp) = 0.5 Then If FixTemp / 2 &lt;&gt; Int(FixTemp / 2) Then FixTemp = FixTemp - Sgn(X) End If End If Mround = FixTemp / FactorElse Mround = XEnd IfEnd Function 完成后，选择菜单中[文件]→[关闭并返回到Microsoft Excel]命令，返回到Excel工作表窗口。 现在，在E1单元格输入公式“=Mround(D1,0.1)”，回车后就可以看到结果了。拖动E1单元格的填充句柄向下复制公式，则可以轻松地得到所需要的结果，如图所示。 Excel中加载宏函数“Mround”是我们自定义的函数，它可以象Excel本身自带的函数一样使用。但是在默认的情况下它只能在当前工作薄使用。如果我们需要经常在其它工作薄中使用该函数，则点击“Office按钮”，在弹出的菜单中点击“另存为→其它格式”命令，打开“另存为”对话框，在“保存类型”下拉列表中选择“Excel加载宏”，然后输入一个文件名，如“Mround”，如图所示。单击“确定”后文件就被保存为加载宏。 再点击“Office按钮”，点击右下角的“Excel选项”按钮，打开“Excel选项”对话框，点击左侧的“加载项”项目，然后右侧“管理”下拉列表中选择“Excel加载项”，单击其右侧的“转到”按钮。打开“加载宏”对话框，勾选“可用加载宏”列表框中的“Mround”复选框，如下图所示，单击“确定”按钮后，就可以在本机上的所有工作薄中使用该自定义函数了。 如果您在这个对话框中看不到“Mround”复选项，可以点击“浏览”按钮查找。我们所保存的“Mround”加载宏会保存在“C:\\Documents and Settings\\用户名\\Application Data\\Microsoft\\AddIns”文件夹中。如果我们想在其它的机器中使用此自定义函数，那么也需要将加载宏文件保存到其它机器中相应的文件夹中。 123[Mround]函数说明：格式： Mround(ByVal X As Double, Optional ByVal Factor As Double = 1)，X：修约的数字；Factor：修约参数(如:1000，100，10，1，0.1,0.01)。如果Factor输入错误会影响修约结果，所以我加了一个提示框。 总结从上面我们可以举一反三，可以编写击实试验得出的结果求最大干密度与最佳含水量,沥青针入度的结果判定等试验参数。如果想自己写的函数不被别人随意修改，可以进行封装成DLL文件。","categories":[{"name":"VBA","slug":"VBA","permalink":"http://www.jiangjinchao.pro/categories/VBA/"}],"tags":[{"name":"Excel","slug":"Excel","permalink":"http://www.jiangjinchao.pro/tags/Excel/"},{"name":"VBA","slug":"VBA","permalink":"http://www.jiangjinchao.pro/tags/VBA/"},{"name":"试验","slug":"试验","permalink":"http://www.jiangjinchao.pro/tags/试验/"},{"name":"函数","slug":"函数","permalink":"http://www.jiangjinchao.pro/tags/函数/"},{"name":"加载宏","slug":"加载宏","permalink":"http://www.jiangjinchao.pro/tags/加载宏/"},{"name":"奇进偶不进","slug":"奇进偶不进","permalink":"http://www.jiangjinchao.pro/tags/奇进偶不进/"}]},{"title":"VBA调用‘规划求解’自动合成矿料级配","slug":"VBA调用‘规划求解’自动合成矿料级配","date":"2010-07-29T01:06:05.000Z","updated":"2018-04-03T15:40:35.887Z","comments":true,"path":"/2010/VBA调用‘规划求解’自动合成矿料级配.html","link":"","permalink":"http://www.jiangjinchao.pro/2010/VBA调用‘规划求解’自动合成矿料级配.html","excerpt":"试验检测技术人员都知道，已知五、六档甚至七档集料计算合成成符合技术规范及级配关键点的控制要求,是非常消耗脑力和时间，特别是没有经验的检测人员更困难。因此我们可利用计算机的信息处理能力，为我们分忧解难。Excel是办公中最常用的办公软件之一，其功能非常强大，能利用好相关功能,会有意想不到的效果。 规划求解也称作“假设分析”，是一个非常好用的工具，经常用于查看更改某些单元格中的变量对工作表中公式结果的影响，例如： 121. 根据已知结果倒推变量应赋予的初值：已知各档级配通过率及矿料的级配范围，可以用单变量求解、循环引用，也可规划求解得出配合比例。2. 根据已知参数和配比，寻找最佳组合方案：这种应用案例居多。","text":"试验检测技术人员都知道，已知五、六档甚至七档集料计算合成成符合技术规范及级配关键点的控制要求,是非常消耗脑力和时间，特别是没有经验的检测人员更困难。因此我们可利用计算机的信息处理能力，为我们分忧解难。Excel是办公中最常用的办公软件之一，其功能非常强大，能利用好相关功能,会有意想不到的效果。 规划求解也称作“假设分析”，是一个非常好用的工具，经常用于查看更改某些单元格中的变量对工作表中公式结果的影响，例如： 121. 根据已知结果倒推变量应赋予的初值：已知各档级配通过率及矿料的级配范围，可以用单变量求解、循环引用，也可规划求解得出配合比例。2. 根据已知参数和配比，寻找最佳组合方案：这种应用案例居多。 利用Excel2003提供的规划求解可以进行级配合成、最佳沥青用量的选定、沥青混合料拌和楼的标定等问题. 常规操作规划求解过程中,美中不足的是除了限制变量个数、求解时间有时候比较长外，还有是如果变量不多、算法也不难，但有许多需要求解的值，而每一次改变都要重复操作，弹出规划求解对话框、求解。 以上常规操作无法避免的问题，在利用VBA调用规划求解宏却可以很好的解决。从而更好的提高工作效率。通过工程上最常用的配合比级配比例的选定（例子为沥青混合料配合比）进行说明. 代码如下： 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758 Sub ww() '取消密码保护 ActiveSheet.Unprotect Password:=123 Range(\"C4:C11\").Select Selection.ClearContents ' 全部重设 SolverReset '规划求解参数设置 Solverok setcell=设置目标单元格: 'MaxMinVal 对应于是否要解决目标单元对最大值 (1)、 最小值 (2), 或特定值 (3) 'ValueOf 指定要匹配目标单元值。 如果您设置 MaxMinVal 为 3, 必须指定该参数。 '如果将设置为 1 或 2, MaxMinVal 才能省略该参数。 'ByChange 指定单元格或区域的单元格， 将更改 'SolverAdd (CellRef, 关系, FormulaText) '1 值是否小于或等于 =&lt; '2 vaue 等于 (=)。 '3 值是否大于或等于 &gt;= '4 值是整数 '5 是二进制（值是零或一个） 'FormulaText 引用一个或多个单元格构成右边的 constraint Solverok setcell:=Range(\"$D$12\"), maxminval:=3, ValueOf:=100, bychange:=Range(\"c4:c11\") SolverAdd CellRef:=Range(\"d12\"), Relation:=2, FormulaText:=Range(\"q12\") SolverAdd CellRef:=Range(\"d12\"), Relation:=3, FormulaText:=Range(\"d17\") SolverAdd CellRef:=Range(\"d12\"), Relation:=1, FormulaText:=Range(\"d16\") SolverAdd CellRef:=Range(\"e12\"), Relation:=3, FormulaText:=Range(\"e17\") SolverAdd CellRef:=Range(\"e12\"), Relation:=1, FormulaText:=Range(\"e16\") SolverAdd CellRef:=Range(\"f12\"), Relation:=3, FormulaText:=Range(\"f17\") SolverAdd CellRef:=Range(\"f12\"), Relation:=1, FormulaText:=Range(\"f16\") SolverAdd CellRef:=Range(\"g12\"), Relation:=3, FormulaText:=Range(\"g17\") SolverAdd CellRef:=Range(\"g12\"), Relation:=1, FormulaText:=Range(\"g16\") SolverAdd CellRef:=Range(\"h12\"), Relation:=3, FormulaText:=Range(\"h17\") SolverAdd CellRef:=Range(\"h12\"), Relation:=1, FormulaText:=Range(\"h16\") SolverAdd CellRef:=Range(\"i12\"), Relation:=3, FormulaText:=Range(\"i17\") SolverAdd CellRef:=Range(\"i12\"), Relation:=1, FormulaText:=Range(\"i16\") SolverAdd CellRef:=Range(\"j12\"), Relation:=3, FormulaText:=Range(\"j17\") SolverAdd CellRef:=Range(\"j12\"), Relation:=1, FormulaText:=Range(\"j16\") SolverAdd CellRef:=Range(\"k12\"), Relation:=3, FormulaText:=Range(\"k17\") SolverAdd CellRef:=Range(\"k12\"), Relation:=1, FormulaText:=Range(\"k16\") SolverAdd CellRef:=Range(\"l12\"), Relation:=3, FormulaText:=Range(\"l17\") SolverAdd CellRef:=Range(\"l12\"), Relation:=1, FormulaText:=Range(\"l16\") SolverAdd CellRef:=Range(\"m12\"), Relation:=3, FormulaText:=Range(\"m17\") SolverAdd CellRef:=Range(\"m12\"), Relation:=1, FormulaText:=Range(\"m16\") SolverAdd CellRef:=Range(\"n12\"), Relation:=3, FormulaText:=Range(\"n17\") SolverAdd CellRef:=Range(\"n12\"), Relation:=1, FormulaText:=Range(\"n16\") SolverAdd CellRef:=Range(\"o12\"), Relation:=3, FormulaText:=Range(\"o17\") SolverAdd CellRef:=Range(\"o12\"), Relation:=1, FormulaText:=Range(\"o16\") SolverAdd CellRef:=Range(\"p12\"), Relation:=3, FormulaText:=Range(\"p17\") SolverAdd CellRef:=Range(\"p12\"), Relation:=1, FormulaText:=Range(\"p16\") SolverSolve UserFinish:=True SolverFinish KeepFinal:=1 '密码保护 ActiveSheet.Protect Contents:=True, Scenarios:=True, AllowFormattingCells:=True, Password:=123 End Sub 最后点击“合成级配线”一切OK！ 1注：泰勒曲线绘制可以看我写的《Excel绘制泰勒曲线级配图》","categories":[{"name":"VBA","slug":"VBA","permalink":"http://www.jiangjinchao.pro/categories/VBA/"}],"tags":[{"name":"Excel","slug":"Excel","permalink":"http://www.jiangjinchao.pro/tags/Excel/"},{"name":"VBA","slug":"VBA","permalink":"http://www.jiangjinchao.pro/tags/VBA/"},{"name":"试验","slug":"试验","permalink":"http://www.jiangjinchao.pro/tags/试验/"},{"name":"级配","slug":"级配","permalink":"http://www.jiangjinchao.pro/tags/级配/"},{"name":"规划求解","slug":"规划求解","permalink":"http://www.jiangjinchao.pro/tags/规划求解/"}]}]}